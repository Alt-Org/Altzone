
Photon Realtime C# Client - Changelog
www.photonengine.com  -  Join our Discord Server: https://dashboard.photonengine.com/account/profile


Version 5.0.10 (10 July 2024 - rev7627)
    Fixed: EventBetter now assignes an instance to EventBetterWorker.EventBetterInstance.
    Changed: Player.UpdateNickNameOnJoined() avoids sending the NickName if it is empty and also not found in the props.

Version 5.0.9 (26. June 2024 - rev7603)
    Added: Authentication exception for connect async operation.
    Fixed: Matchmaking ticket is now in MatchmakingArguments. Ticket and lobby get correctly set when using async api to get into a room (e.g. ConnectToRoomAsync and RejoinRoomAsync).
    Fixed: Async API to set CustomProperties and CustomLobbyProperties correctly.
    Changed: MatchmakingArguments.CustomProperties type to PhotonHashtable.
    Changed: setting JoinRandomRoomArgs using matchmaking async operations.
    Removed: Surplus error logging in async API.
    Updated: Plenty of reference docs.
    Changed: EventBetter is now in the namespace Photon.Realtime.

Version 5.0.8 (27. May 2024 - rev7575)
    Changed: ConnectUsingSettings() will now check if the AppSettings.Server value is an IP and help avoid common problems: WS / WSS never works with IPs as addresses (fails to connect) and due to that, AuthOnceWss can not be used (so the check switches to AuthOnce). These cases log an error / warning respectively.
    Updated: Use of obsolete InitDatagramEncryption overload.

Version 5.0.7 (16. May 2024 - rev7565)
    Changed: Compile define for log level callbacks. Each got a prefix: PHOTON_LOG_WARNING, PHOTON_LOG_INFO and PHOTON_LOG_DEBUG.
    Fixed: Log.Exception() which wasn't logging the formatted output.
    Added: AuthValues.AreValid() to check known, mandatory key-values the client needs to set (per AuthType).
    Added: Use of AuthValues.AreValid() in the client to log a warning (only).
    Updated: ProtocolPorts.SetWsDefaultOld() now sets ports for MS (9090) and GS (9091) as well.

Version 5.0.6 (02. May 2024 - rev7543)
    Changed: ConnectionHandler for Unity. The singleton GameObject now has a ConnectionHandler instance per client (supporting multiple now).
    Changed: The RealtimeClient knows the instance and should call handler.RemoveInstance() on disconnect.
    Changed: The ConnectionHandler backgroundStopwatch is reset when the handler did not need to send anything.
    Changed: StaticReset() will now set go = null.
    Changed: Callbacks.OnDisconnected() will now call this.client.Handler.RemoveInstance() to remove/stop the ConnectionHandler instance.

Version 5.0.5 (29. April 2024 - rev7531)
    Changed: Logging in ConnectUsingSettings to use the log level of the client.
    Fixed: Potential InvalidOperationException if region pinging got no results.

Version 5.0.4 (19. April 2024 - rev7511)
    Fixed: Minor issue where a NickName change triggered an update of player properties at a time when it had to fail. This now updates when reaching the Joined state.
    Changed: InternalCacheProperties() will update the Player.NickName for remote players. The local player has control over it's NickName locally.
    Renamed: ActorProperties.PlayerName to ActorProperties.NickName (keeping the old name as obsolete).
    Renamed: SetPlayerNameProperty() to SetNickNameProperty().
    Changed: Anything the PhotonPeer logs via DebugReturn, will now be passed on to the logging with the RealtimePeer.LogLevel. So network level logging is fully independent from the higher level logging.

Version 5.0.3 (25. March 2024 - rev7477)
    Changed: Room.SetExpectedUsers() will now send the current expected users as CAS condition, even if they are null. The server enforces usage of some condition to change Expected Users.
    Changed: ConnectionHandler.BuildInstance() now only creates one ConnectionHandler component (and looks up the component if the GO exists).
    Changed: The ConnectionHandler RealtimeFallback() now returns if it was running longer than the KeepAliveInBackground (while no other thread is sending outgoing messages on the peer).
    Added: RealtimeClient.Handler as access to the ConnectionHandler and changing the Handler.KeepAliveInBackground value at runtime.
    Changed: AsyncExtensions. DisconnectAsync() will return Task.CompletedTask if client.State == Disconnecting.
    Internal: Changed the private handler.Disposables from a List<T> to ConcurrentQueue<T>, which avoids issues with async execution (in .Net, while Unity is bound to the main thread).
    Breaking: RejoinRoomAsync() has a new optional parameter "ticket". This is for Matchmaking Tickets. This is breaking, because it changes the parameter order (if you used throwOnError and or config).
    Changed: JoinRandomRoomAsync() parameter joinRandomRoomParams now defaults to null which is a little cleaner to call if you don't need parameters.
    Updated: Stats usage. See changes-library.txt.

Version 5.0.2 (01. February 2024 - rev7373)
    Changed: Code for GamePropertyKey.MaxPlayersInt. Was 244 is now 243 to avoid incompatibilities. This is a breaking change. Affected versions v4.1.7.2 to v4.1.7.4 must be replaced or edited!
    Fixed: Incompatibility of JoinRandom with older servers (and the server SDK) which were introduces by earlier changes with MaxPlayersInt.
    Added: Random Matchmaking option for low CCU test cases. Clients which join rooms at the same time (with low room count / CCU) will now get matched with one another (which requires up tp date server versions).
    Added: ParameterCode.AllowRepeats and sending it in JoinRandomGame operations.
    Fixed: A problem when applying the same EnterRoomArgs to multiple clients (for testing, mostly). The client was using a single instance of it to store the assigned room name (getting all clients into the same room no matter what).
    Changed: Enum EncryptionMode to only have Payload Encryption and Datagram Encryption GCM. The other modes are outdated by now.
    Note: The default AuthMode is AuthOnceWss, which means that the initial connection of clients is done via WSS and user data is secured with it. To use Datagram Encryption, you need a native plugin per platform.
    Changed: RealtimeClient.AppId is now obsolete. Use the AppSettings.AppId instead.

Version 5.0.1 (07. December 2023 - rev7261)
    Added: Group Matchmaking and Matchmaking Tickets. With tickets, the server side can define matchmaking parameters (e.g. the name of a group or the room to join). If the server provides a ticket for a group, the players can use it to find the group or join a random room together with the group, which changes party matchmaking.
    Note: Group Matchmaking via Tickets is not available yet on all Public Cloud servers and you also need a backend server or a plugin to write tickets for clients. Currently this is an Early Access feature. Docs will follow.
    Changed: Best Region Selection. In some locations, clients will get very similar results to various regions. We now pick a code alphabetically (improving determinism) if there is a shortlist of regions with similar ping results.
    Added: Private RegionHandler.pingSimilarityFactor to calculate the max ping value for "similar results". Default is 1.2f. If pings are wildly variable for any region, there might still be false positives.
    Added: LoadBalancingClient constructor to simplify migration. This is an obsolete API.

Version 5.0.0 (09. November 2023 - rev7225)
    Changed: To semantic versioning with 3 digits only.
    Removed: Support for .Net 3.5. From 5.x on we use .Net Standard 2.0 as minimum.
    Changed: The MaxPlayers and PlayerCount values for Rooms (RoomInfo and Room class) are now  integer in the client API. Between client and server, byte is still used. You can still only set 0-255 players until further note. This prepares a later change.
    Changed: Custom Properties can now use string and integer keys. We use byte-typed keys for "Well Known" Properties (current range 240-255), so be aware that there might be two separate keys 255, differentiated by their type! A bit cumbersome but we wanted to allow int keys finally.
    Note: There are plenty of other changes. Mostly renaming. Check out the migration-v4-to-v5.txt.


---


Version 4.1.8.4 (26. April 2024 - rev7530)
    No notable changes (except in library).

Version 4.1.8.3 (24. April 2024 - rev7519)
    Fixed: Minor issue where a NickName change triggered an update of player properties at a time when it had to fail. This now updates when reaching the Joined state.
    Changed: InternalCacheProperties() will update the Player.NickName for remote players. The local player has control over it's NickName on join.

Version 4.1.8.2 (25. March 2024 - rev7471)
    Changed: If a Ticket was set, LoadBalancingClient.OpJoinRandomRoom() will now send it to the Master Server.
    Added: Clarification about the parameters of OpJoinRandomOrCreateRoom() which both contain a Ticket field. Only the opJoinRandomRoomParams.Ticket gets used by this method.
    Added: Optional ticket parameter to LoadBalancingClient.OpRejoinRoom().

Version 4.1.8.1 (12. March 2024 - rev7444)
    Changed: Tickets will get cached in the LoadBalancingClient.enterRoomParamsCache.Ticket and sent to the Game Server. Formerly, it was only sent to the Master Server.
    Added: Ticket (Matchmaking Tickets) to EnterRoomParams, which is used in Join and Create Room.
    Note: Operations, which have both OpJoinRandomRoomParams and EnterRoomParams, will use the OpJoinRandomRoomParams.Ticket as preference (unless that is null).

Version 4.1.8.0 (31. January 2024 - rev7364)
    Changed: Code for GamePropertyKey.MaxPlayersInt. Was 244 is now 243 to avoid incompatibilities. This is a breaking change. Affected versions v4.1.7.2 to v4.1.7.4 must be replaced or edited!
    Important: Due to breaking changes, all clients with versions v4.1.7.2 to v4.1.7.4 must be updated to fix "JoinRandom" with MaxPlayers being not zero. Alternatively change GamePropertyKey.MaxPlayersInt to 243 if your project compiles the LoadBalancingApi.
    Changed: Enum EncryptionMode to only have Payload Encryption and Datagram Encryption GCM (which requires AuthMode being set to AuthOnceWss). The other modes are outdated by now.
    Note: To use Datagram Encryption, you need a native plugin per platform. This can be requested via mail: developer@photonengine.com
    Updated: The Particle Demo has been updated. It is no longer inheriting and extending the LoadBalancingClient, Room and Player classes, which is not recommended, really. It now shows how to use callbacks, too.
    Changed: Random Matchmaking for low CCU test cases: When multiple clients join random rooms or create them at the same time, they will now match into the fitting rooms instead of missing one another. This is only done with a low room count / low CCUs for the virtual app. This avoids problematic cases when testing mostly.
    Added: ParameterCode.AllowRepeats and sending it in JoinRandomGame operations (this is done internally).

Version 4.1.7.4 (13. December 2023 - rev7284)
    Added: Matchmaking Ticket support. Tickets can be written server side (in a plugin or some backend) to define some parameters for the client. For example, a ticket can contain a list of party members who should join the same room or a room name to join or other parameters. More to be added to the online docs soon.
    Fixed: Potential InvalidOperationException in RegionHandler if pinging failed to get any results.

Version 4.1.7.3 (07. December 2023 - rev7252)
    Changed: Best Region selection. From a shortlist of similar regions, we now pick a code alphabetically (improving determinism). In some locations, clients will get very similar results to various regions.
    Added: Private RegionHandler.pingSimilarityFactor to calculate the max ping value for "similar results".

Version 4.1.7.2 (20. September 2023 - rev7218)
    Added: MaxPlayer support for more than 255 players. With a recent server version, it is now possible to define larger limits without setting the room's capability to infinite (0).
    Changed: To work around an issue while running a WebGL-project in Editor, Realtime will use http instead of https to ping servers. For unknown reasons, the https ping in Editor (and only there) is delayed considerable in some cases, ruining the ping results).

Version 4.1.7.1 (06. September 2023 - rev7148)
    No notable changes.

Version 4.1.7.0 (18. August 2023 - rev7111)
    Added: Class SystemConnectionSummary, which wraps up network-related conditions on the client when it gets created. It relies on Unity's callbacks and requires a ConnectionHandler to be present in the scene (as implementation of a MonoBehaviour getting the callbacks). Check the reference doc for details on how to put it to use.
    Added: LoadBalancingClient.SystemConnectionSummary, created for DisconnectCause.ExceptionOnConnect, DisconnectCause.Exception, DisconnectCause.ServerTimeout and DisconnectCause.ClientTimeout.
    Added: Error logging to each place that creates a SystemConnectionSummary (in LoadBalancingClient).
    Changed: Order of a few switch-cases in LBC.OnStatusChanged() for organizational reasons (the cases which create a SystemConnectionSummary are closer together this way).
    Changed: LBC.DisconnectedCause is reset before calling PhotonPeer.Connect(). This should be set before the connect and not only if Connect() returns true.
    Added: PhotonRealtime.asmdef (and meta file) to Unity SDK. This should be the same for all of our SDKs (PUN, Quantum, Voice).

Version 4.1.6.26 (09. August 2023 - rev7077)
    Changed: Name Server default port for WS is now 80, WSS is 443.
    Changed: client.State = ClientState.Joined is set in GameEnteredOnGameServer() if room-events are suppressed. Otherwise it is now set by event Join. This change aligns the state change with the callback calls.
    Changed: The SummaryToCache will not include a best region, if none of the regions was pinged successfully.
    Added: RegionHandler.BestRegionSummaryPingLimit to ping all regions if the current best region is worse than this limit. Default: 90ms.
    Changed: Demo Particle, GameLogic-class to check the Server Type instead of the client's State, when it entered a room on the Game Server.
    Note: This is affected by the changes we did to set the State from joining to joined! In best case, you would use the callback OnJoinedRoom() which is independent.

Version 4.1.6.25 (05. June 2023 - rev6925)
    No notable changes.

Version 4.1.6.24 (15. May 2023 - rev6894)
    Fixed: Potential NullReferenceException in PingMono.Dispose().

Version 4.1.6.23 (15. March 2023 - rev6743)
    Fixed: Replaced Null-conditional operator for MonoBehaviours and GameObjects. This caused issues with the usage of RegionHandler.emptyMonoBehavior.
