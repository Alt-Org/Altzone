<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quantum.Deterministic</name>
    </assembly>
    <members>
        <member name="T:Photon.Deterministic.FP">
            <summary>
            A fixed-point number. 16 lower bits are used for the decimal part, 48 for the integral part.
            <para> It provides various methods for performing mathematical operations and converting between different data types.</para>
            <para>However, a majority of internal code and the multiplication operator perform fast multiplication,
            where the result can use at most 32 bits for the integral part and overflows are not detected.
            This means that you should stay in <see cref="T:System.Int16"/> range.
            <seealso cref="P:Photon.Deterministic.FP.UseableMax"/>
            <seealso cref="P:Photon.Deterministic.FP.UseableMin"/></para>
            </summary>
            \ingroup MathAPI
            <remarks>
            The precision of the decimal part is 5 digits.
            The decimal fraction normalizer is 1E5.
            The size of an FP object is 8 bytes.
            The raw value of one is equal to FPLut.ONE.
            The raw value of zero is 0.
            The precision value is equal to FPLut.PRECISION.
            The number of bits in an FP object is equal to the size of a long (64 bits).
            The MulRound constant is 0.
            The MulShift constant is equal to the precision value.
            The MulShiftTrunc constant is equal to the precision value.
            The UsesRoundedConstants constant is either <see langword="true"/> or <see langword="false"/>, depending on the value of PHOTONDETERMINISTIC_FP_OLD_CONSTANTS.
            </remarks>
            <seealso cref="T:Photon.Deterministic.FPLut"/>
            <see langword="true"/>
        </member>
        <member name="P:Photon.Deterministic.FP.SmallestNonZero">
            <summary>
            The smallest FP unit that is not 0.
            <para>Closest double: 1.52587890625E-05</para>
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FP.Raw">
            <summary>
            Holds <see cref="T:Photon.Deterministic.FP"/> constants in raw (long) form.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.SmallestNonZero">
            <summary>
            The smallest FP unit that is not 0.
            <para>Closest double: 1.52587890625E-05</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.MinValue">
            <summary>
            Minimum FP value, but values outside of <see cref="F:Photon.Deterministic.FP.Raw.UseableMin"/> and <see cref="F:Photon.Deterministic.FP.Raw.UseableMax"/> (inclusive) can overflow when multiplied.
            <para>Closest double: -140737488355328</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.MaxValue">
            <summary>
            Maximum FP value, but values outside of <see cref="F:Photon.Deterministic.FP.Raw.UseableMin"/> and <see cref="F:Photon.Deterministic.FP.Raw.UseableMax"/> (inclusive) can overflow when multiplied.
            <para>Closest double: 140737488355328</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.UseableMin">
            <summary>
            Represents the highest negative FP number that can be multiplied with itself and not cause an overflow (exceeding long range).
            <para>Closest double: -32768</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.UseableMax">
            <summary>
            Represents the highest FP number that can be multiplied with itself and not cause an overflow (exceeding long range).
            <para>Closest double: 32767.9999847412</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Pi">
            <summary>
            Pi number.
            <para>Closest double: 3.14158630371094</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.PiInv">
            <summary>
            1/Pi.
            <para>Closest double: 0.318313598632813</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.PiTimes2">
            <summary>
            2 * Pi.
            <para>Closest double: 6.28318786621094</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.PiOver2">
            <summary>
            Pi / 2.
            <para>Closest double: 1.57080078125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.PiOver2Inv">
            <summary>
            2 / Pi.
            <para>Closest double: 0.636627197265625</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.PiOver4">
            <summary>
            Pi / 4.
            <para>Closest double: 0.785400390625</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Pi3Over4">
            <summary>
            3 * Pi / 4.
            <para>Closest double: 2.356201171875</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Pi4Over3">
            <summary>
            4 * Pi / 3.
            <para>Closest double: 4.18879699707031</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Deg2Rad">
            <summary>
            Degrees-to-radians conversion constant.
            <para>Closest double: 0.0174560546875</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Rad2Deg">
            <summary>
            Radians-to-degrees conversion constant.
            <para>Closest double: 57.2957763671875</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0">
            <summary>
            FP constant representing the number 0.
            <para>Closest double: 0</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1">
            <summary>
            FP constant representing the number 1.
            <para>Closest double: 1</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._2">
            <summary>
            FP constant representing the number 2.
            <para>Closest double: 2</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._3">
            <summary>
            FP constant representing the number 3.
            <para>Closest double: 3</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._4">
            <summary>
            FP constant representing the number 4.
            <para>Closest double: 4</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._5">
            <summary>
            FP constant representing the number 5.
            <para>Closest double: 5</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._6">
            <summary>
            FP constant representing the number 6.
            <para>Closest double: 6</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._7">
            <summary>
            FP constant representing the number 7.
            <para>Closest double: 7</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._8">
            <summary>
            FP constant representing the number 8.
            <para>Closest double: 8</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._9">
            <summary>
            FP constant representing the number 9.
            <para>Closest double: 9</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._10">
            <summary>
            FP constant representing the number 10.
            <para>Closest double: 10</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._99">
            <summary>
            FP constant representing the number 99.
            <para>Closest double: 99</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._100">
            <summary>
            FP constant representing the number 100.
            <para>Closest double: 100</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._180">
            <summary>
            FP constant representing the number 180.
            <para>Closest double: 180</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._200">
            <summary>
            FP constant representing the number 200.
            <para>Closest double: 200</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._360">
            <summary>
            FP constant representing the number 360.
            <para>Closest double: 360</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1000">
            <summary>
            FP constant representing the number 1000.
            <para>Closest double: 1000</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._10000">
            <summary>
            FP constant representing the number 10000.
            <para>Closest double: 10000</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_01">
            <summary>
            FP constant representing the number 0.01.
            <para>Closest double: 0.0099945068359375</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_02">
            <summary>
            FP constant representing the number 0.02.
            <para>Closest double: 0.0200042724609375</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_03">
            <summary>
            FP constant representing the number 0.03.
            <para>Closest double: 0.029998779296875</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_04">
            <summary>
            FP constant representing the number 0.04.
            <para>Closest double: 0.0399932861328125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_05">
            <summary>
            FP constant representing the number 0.05.
            <para>Closest double: 0.0500030517578125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_10">
            <summary>
            FP constant representing the number 0.10.
            <para>Closest double: 0.100006103515625</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_20">
            <summary>
            FP constant representing the number 0.20.
            <para>Closest double: 0.199996948242188</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_25">
            <summary>
            FP constant representing the number 0.25.
            <para>Closest double: 0.25</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_50">
            <summary>
            FP constant representing the number 0.50.
            <para>Closest double: 0.5</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_75">
            <summary>
            FP constant representing the number 0.75.
            <para>Closest double: 0.75</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_33">
            <summary>
            FP constant representing the number 0.33.
            <para>Closest double: 0.333328247070313</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._0_99">
            <summary>
            FP constant representing the number 0.99.
            <para>Closest double: 0.990005493164063</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Minus_1">
            <summary>
            FP constant representing the number -1.
            <para>Closest double: -1</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Rad_360">
            <summary>
            FP constant representing 360 degrees in radian.
            <para>Closest double: 6.28318786621094</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Rad_180">
            <summary>
            FP constant representing 180 degrees in radian.
            <para>Closest double: 3.14158630371094</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Rad_90">
            <summary>
            FP constant representing 90 degrees in radian.
            <para>Closest double: 1.57080078125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Rad_45">
            <summary>
            FP constant representing 45 degrees in radian.
            <para>Closest double: 0.785400390625</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Rad_22_50">
            <summary>
            FP constant representing 22.5 degrees in radian.
            <para>Closest double: 0.3927001953125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_01">
            <summary>
            FP constant representing the number 1.01.
            <para>Closest double: 1.00999450683594</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_02">
            <summary>
            FP constant representing the number 1.02.
            <para>Closest double: 1.02000427246094</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_03">
            <summary>
            FP constant representing the number 1.03.
            <para>Closest double: 1.02999877929688</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_04">
            <summary>
            FP constant representing the number 1.04.
            <para>Closest double: 1.03999328613281</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_05">
            <summary>
            FP constant representing the number 1.05.
            <para>Closest double: 1.05000305175781</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_10">
            <summary>
            FP constant representing the number 1.10.
            <para>Closest double: 1.10000610351563</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_20">
            <summary>
            FP constant representing the number 1.20.
            <para>Closest double: 1.19999694824219</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_25">
            <summary>
            FP constant representing the number 1.25.
            <para>Closest double: 1.25</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_50">
            <summary>
            FP constant representing the number 1.50.
            <para>Closest double: 1.5</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_75">
            <summary>
            FP constant representing the number 1.75.
            <para>Closest double: 1.75</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_33">
            <summary>
            FP constant representing the number 1.33.
            <para>Closest double: 1.33332824707031</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw._1_99">
            <summary>
            FP constant representing the number 1.99.
            <para>Closest double: 1.99000549316406</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.EN1">
            <summary>
            FP constant representing the epsilon value EN1.
            <para>Closest double: 0.100006103515625</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.EN2">
            <summary>
            FP constant representing the epsilon value EN2.
            <para>Closest double: 0.0099945068359375</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.EN3">
            <summary>
            FP constant representing the epsilon value EN3.
            <para>Closest double: 0.001007080078125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.EN4">
            <summary>
            FP constant representing the epsilon value EN4.
            <para>Closest double: 0.0001068115234375</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.EN5">
            <summary>
            FP constant representing the epsilon value EN5.
            <para>Closest double: 1.52587890625E-05</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Epsilon">
            <summary>
            FP constant representing Epsilon <see cref="F:Photon.Deterministic.FP.Raw.EN3"/>.
            <para>Closest double: 0.001007080078125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.E">
            <summary>
            FP constant representing the Euler Number constant.
            <para>Closest double: 2.71827697753906</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Log2_E">
            <summary>
            FP constant representing Log(E).
            <para>Closest double: 1.44268798828125</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Raw.Log2_10">
            <summary>
            FP constant representing Log(10).
            <para>Closest double: 3.32192993164063</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.MinValue">
            <summary>
            Minimum FP value, but values outside of <see cref="P:Photon.Deterministic.FP.UseableMin"/> and <see cref="P:Photon.Deterministic.FP.UseableMax"/> (inclusive) can overflow when multiplied.
            <para>Closest double: -140737488355328</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.MaxValue">
            <summary>
            Maximum FP value, but values outside of <see cref="P:Photon.Deterministic.FP.UseableMin"/> and <see cref="P:Photon.Deterministic.FP.UseableMax"/> (inclusive) can overflow when multiplied.
            <para>Closest double: 140737488355328</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.UseableMin">
            <summary>
            Represents the highest negative FP number that can be multiplied with itself and not cause an overflow (exceeding long range).
            <para>Closest double: -32768</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.UseableMax">
            <summary>
            Represents the highest FP number that can be multiplied with itself and not cause an overflow (exceeding long range).
            <para>Closest double: 32767.9999847412</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Pi">
            <summary>
            Pi number.
            <para>Closest double: 3.14158630371094</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.PiInv">
            <summary>
            1/Pi.
            <para>Closest double: 0.318313598632813</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.PiTimes2">
            <summary>
            2 * Pi.
            <para>Closest double: 6.28318786621094</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.PiOver2">
            <summary>
            Pi / 2.
            <para>Closest double: 1.57080078125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.PiOver2Inv">
            <summary>
            2 / Pi.
            <para>Closest double: 0.636627197265625</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.PiOver4">
            <summary>
            Pi / 4.
            <para>Closest double: 0.785400390625</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Pi3Over4">
            <summary>
            3 * Pi / 4.
            <para>Closest double: 2.356201171875</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Pi4Over3">
            <summary>
            4 * Pi / 3.
            <para>Closest double: 4.18879699707031</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Deg2Rad">
            <summary>
            Degrees-to-radians conversion constant.
            <para>Closest double: 0.0174560546875</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Rad2Deg">
            <summary>
            Radians-to-degrees conversion constant.
            <para>Closest double: 57.2957763671875</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0">
            <summary>
            FP constant representing the number 0.
            <para>Closest double: 0</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1">
            <summary>
            FP constant representing the number 1.
            <para>Closest double: 1</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._2">
            <summary>
            FP constant representing the number 2.
            <para>Closest double: 2</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._3">
            <summary>
            FP constant representing the number 3.
            <para>Closest double: 3</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._4">
            <summary>
            FP constant representing the number 4.
            <para>Closest double: 4</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._5">
            <summary>
            FP constant representing the number 5.
            <para>Closest double: 5</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._6">
            <summary>
            FP constant representing the number 6.
            <para>Closest double: 6</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._7">
            <summary>
            FP constant representing the number 7.
            <para>Closest double: 7</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._8">
            <summary>
            FP constant representing the number 8.
            <para>Closest double: 8</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._9">
            <summary>
            FP constant representing the number 9.
            <para>Closest double: 9</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._10">
            <summary>
            FP constant representing the number 10.
            <para>Closest double: 10</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._99">
            <summary>
            FP constant representing the number 99.
            <para>Closest double: 99</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._100">
            <summary>
            FP constant representing the number 100.
            <para>Closest double: 100</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._180">
            <summary>
            FP constant representing the number 180.
            <para>Closest double: 180</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._200">
            <summary>
            FP constant representing the number 200.
            <para>Closest double: 200</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._360">
            <summary>
            FP constant representing the number 360.
            <para>Closest double: 360</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1000">
            <summary>
            FP constant representing the number 1000.
            <para>Closest double: 1000</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._10000">
            <summary>
            FP constant representing the number 10000.
            <para>Closest double: 10000</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_01">
            <summary>
            FP constant representing the number 0.01.
            <para>Closest double: 0.0099945068359375</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_02">
            <summary>
            FP constant representing the number 0.02.
            <para>Closest double: 0.0200042724609375</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_03">
            <summary>
            FP constant representing the number 0.03.
            <para>Closest double: 0.029998779296875</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_04">
            <summary>
            FP constant representing the number 0.04.
            <para>Closest double: 0.0399932861328125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_05">
            <summary>
            FP constant representing the number 0.05.
            <para>Closest double: 0.0500030517578125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_10">
            <summary>
            FP constant representing the number 0.10.
            <para>Closest double: 0.100006103515625</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_20">
            <summary>
            FP constant representing the number 0.20.
            <para>Closest double: 0.199996948242188</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_25">
            <summary>
            FP constant representing the number 0.25.
            <para>Closest double: 0.25</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_50">
            <summary>
            FP constant representing the number 0.50.
            <para>Closest double: 0.5</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_75">
            <summary>
            FP constant representing the number 0.75.
            <para>Closest double: 0.75</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_33">
            <summary>
            FP constant representing the number 0.33.
            <para>Closest double: 0.333328247070313</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._0_99">
            <summary>
            FP constant representing the number 0.99.
            <para>Closest double: 0.990005493164063</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Minus_1">
            <summary>
            FP constant representing the number -1.
            <para>Closest double: -1</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Rad_360">
            <summary>
            FP constant representing 360 degrees in radian.
            <para>Closest double: 6.28318786621094</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Rad_180">
            <summary>
            FP constant representing 180 degrees in radian.
            <para>Closest double: 3.14158630371094</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Rad_90">
            <summary>
            FP constant representing 90 degrees in radian.
            <para>Closest double: 1.57080078125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Rad_45">
            <summary>
            FP constant representing 45 degrees in radian.
            <para>Closest double: 0.785400390625</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Rad_22_50">
            <summary>
            FP constant representing 22.5 degrees in radian.
            <para>Closest double: 0.3927001953125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_01">
            <summary>
            FP constant representing the number 1.01.
            <para>Closest double: 1.00999450683594</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_02">
            <summary>
            FP constant representing the number 1.02.
            <para>Closest double: 1.02000427246094</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_03">
            <summary>
            FP constant representing the number 1.03.
            <para>Closest double: 1.02999877929688</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_04">
            <summary>
            FP constant representing the number 1.04.
            <para>Closest double: 1.03999328613281</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_05">
            <summary>
            FP constant representing the number 1.05.
            <para>Closest double: 1.05000305175781</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_10">
            <summary>
            FP constant representing the number 1.10.
            <para>Closest double: 1.10000610351563</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_20">
            <summary>
            FP constant representing the number 1.20.
            <para>Closest double: 1.19999694824219</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_25">
            <summary>
            FP constant representing the number 1.25.
            <para>Closest double: 1.25</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_50">
            <summary>
            FP constant representing the number 1.50.
            <para>Closest double: 1.5</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_75">
            <summary>
            FP constant representing the number 1.75.
            <para>Closest double: 1.75</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_33">
            <summary>
            FP constant representing the number 1.33.
            <para>Closest double: 1.33332824707031</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP._1_99">
            <summary>
            FP constant representing the number 1.99.
            <para>Closest double: 1.99000549316406</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.EN1">
            <summary>
            FP constant representing the epsilon value EN1.
            <para>Closest double: 0.100006103515625</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.EN2">
            <summary>
            FP constant representing the epsilon value EN2.
            <para>Closest double: 0.0099945068359375</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.EN3">
            <summary>
            FP constant representing the epsilon value EN3.
            <para>Closest double: 0.001007080078125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.EN4">
            <summary>
            FP constant representing the epsilon value EN4.
            <para>Closest double: 0.0001068115234375</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.EN5">
            <summary>
            FP constant representing the epsilon value EN5.
            <para>Closest double: 1.52587890625E-05</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Epsilon">
            <summary>
            FP constant representing Epsilon <see cref="P:Photon.Deterministic.FP.EN3"/>.
            <para>Closest double: 0.001007080078125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.E">
            <summary>
            FP constant representing the Euler Number constant.
            <para>Closest double: 2.71827697753906</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Log2_E">
            <summary>
            FP constant representing Log(E).
            <para>Closest double: 1.44268798828125</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.Log2_10">
            <summary>
            FP constant representing Log(10).
            <para>Closest double: 3.32192993164063</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.SIZE">
            <summary>
            Represents the size of a variable in bytes.
            <para>The SIZE constant is used to determine the size of a variable in bytes.</para>
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FP.Comparer">
            <summary>
            Compares <see cref="T:Photon.Deterministic.FP"/>s.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Comparer.Instance">
            <summary>
            A global FP comparer instance.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FP.Comparer.Compare(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Compares two instances of FP and returns an integer that indicates whether the first instance is less than, equal to, or greater than the second instance.
            </summary>
            <param name="x">The first instance to compare.</param>
            <param name="y">The second instance to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as shown in the following table:
            - Less than zero: x is less than y.
            - Zero: x equals y.
            - Greater than zero: x is greater than y.
            </returns>
        </member>
        <member name="T:Photon.Deterministic.FP.EqualityComparer">
            <summary>
            Equality comparer for <see cref="T:Photon.Deterministic.FP"/>s.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.EqualityComparer.Instance">
            <summary>
            A global FP equality comparer instance.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.RAW_ONE">
            <summary>
            The value of one as a fixed-point number.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.RAW_ZERO">
            <summary>
            Represents a constant that holds the raw value of zero for the <see cref="T:Photon.Deterministic.FP"/> struct.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.Precision">
            <summary>
            Represents the precision used for Fixed Point calculations.
            </summary>
            <remarks>
            The Precision constant is used to determine the number of decimal places in Fixed Point calculations.
            </remarks>
        </member>
        <member name="F:Photon.Deterministic.FP.Bits">
            <summary>
            The size in bits of the fixed-point number. (64)
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.MulRound">
            <summary>
            Represents the value of the rounding constant used in Fixed Point multiplication.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.MulShift">
            <summary>
            Represents the bit shift used in Fixed Point multiplication.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FP.RawValue">
            <summary>
            The raw integer value of the fixed-point number.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.AsLong">
            <summary>
            Returns integral part as long.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.AsInt">
            <summary>
            Return integral part as int.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.AsShort">
            <summary>
            Return integral part as int.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.AsFloat">
            <summary>
            Converts to float.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.AsRoundedDouble">
            <summary>
            Converts to double. The returned value is not exact, but rather the one that has the least
            significant digits given FP's precision.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FP.AsDouble">
            <summary>
            Converts to double.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FP.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes the given pointer using the provided serializer.
            </summary>
            <param name="ptr">The pointer to the FP object to be serialized.</param>
            <param name="serializer">The serializer used for serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.FP.CompareTo(Photon.Deterministic.FP)">
            <summary>
            Compares this instance of FP to another instance and returns an integer that indicates whether this instance is less than, equal to, or greater than the other instance.
            </summary>
            <param name="other">The other instance to compare.</param>
            <returns>A signed integer that indicates the relative values of this instance and the other instance.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.Equals(Photon.Deterministic.FP)">
            <summary>
            Determines whether the current instance is equal to another instance of FP.
            </summary>
            <param name="other">The instance to compare with the current instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the other instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.Equals(System.Object)">
            <summary>
            Determines whether the current instance of FP is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with the current instance of FP.</param>
            <returns>
            <see langword="true"/> if the specified object is equal to the current instance of FP; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FP.GetHashCode">
            <summary>
            Computes the hash code for the current instance of the FP struct.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FP.ToString">
            <summary>
            Returns a string representation of the current FP value.
            </summary>
            <returns>
            A string representation of the current FP value.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FP.ToStringLegacy">
            <summary>
            Converts the value of the current FP object to its equivalent string representation using the legacy format.
            </summary>
            <returns>
            The string representation of the value of the current FP object, formatted using the legacy format.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FP.ToString(System.String)">
            <summary>
            Returns a string that represents the <see cref="T:Photon.Deterministic.FP"/>.
            </summary>
            <returns>String representation of the FP.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.ToStringInternal">
            <summary>
            Returns a string that represents the <see cref="T:Photon.Deterministic.FP"/> using a custom format.
            </summary>
            <returns>String representation of the FP.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.FromRoundedDouble_UNSAFE(System.Double)">
            <summary>
            Converts a double value to an instance of the FP, with rounding to the nearest representable FP.
            </summary>
            <param name="value">The rounded double value to convert.</param>
            <returns>The FP value that represents the rounded double value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.FromDouble_UNSAFE(System.Double)">
            <summary>
            Converts a double value to an instance of the FP, with rounding towards zero..
            To round towards nearest representable FP, use <see cref="M:Photon.Deterministic.FP.FromRoundedDouble_UNSAFE(System.Double)"/>.
            This method is marked as unsafe because it is not deterministic.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>An instance of the FP struct that represents the converted value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.FromRoundedFloat_UNSAFE(System.Single)">
            <summary>
            Converts a single-precision floating-point value to an instance of the FP, with rounding to the nearest representable FP.
            This method is marked as unsafe because it is not deterministic.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.FromFloat_UNSAFE(System.Single)">
            <summary>
            Converts a single-precision floating-point value to an instance of the FP, with rounding towards zero..
            To round towards nearest representable FP, use <see cref="M:Photon.Deterministic.FP.FromRoundedFloat_UNSAFE(System.Single)"/>.
            This method is marked as unsafe because it is not deterministic.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.FromRaw(System.Int64)">
            <summary>
            Converts a raw integer value to an instance of FP.
            </summary>
            <param name="value">The raw integer value to convert.</param>
            <returns>A new instance of FP that represents the same value as the raw integer.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.FromString_UNSAFE(System.String)">
            <summary>
            Creates an instance of FP from a string representation of a float value.
            This method is marked as unsafe because it is not deterministic.
            </summary>
            <param name="value">The string representation of the float value.</param>
            <returns>An instance of FP representing the float value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.FromString(System.String)">
            <summary>
            Converts a string representation of a fixed-point number to an instance of the FP struct.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Photon.Deterministic.FP.op_UnaryNegation(Photon.Deterministic.FP)">
            <summary>
            Negates the value.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FP.op_UnaryPlus(Photon.Deterministic.FP)">
            FP.Operators.cs
            <summary>
            Converts the value to its absolute version.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Addition(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to add two FP values.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns>The sum of the two FP values.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Addition(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Overloads the addition operator to add an integer value to an FP value.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value to add.</param>
            <returns>The result of adding the integer value to the FP value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Addition(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Represents the operator overloading for adding an integer and an FP value.
            </summary>
            <param name="a">The integer value.</param>
            <param name="b">The FP value.</param>
            <returns>The result of adding the integer and FP values.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Subtraction(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Subtracts two FP (fixed point) values.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns>The result of subtracting the second FP value from the first FP value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Subtraction(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Subtracts an integer value from an FP value.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Subtraction(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Represents an overloaded operator for negating the value of an integer.
            </summary>
            <param name="a">The integer value to be negated.</param>
            <param name="b">The FP value to subtract from.</param>
            <returns>The result of subtracting the FP value from the negated integer value.</returns>
            <remarks>
            This operator subtracts the FP value from the negated integer value by shifting the integer value to the left by the precision of FP,
            then subtracting the raw value of FP from it. The result is then returned as a new FP value.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Multiply(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to multiply two FP values.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The Second FP value</param>
            <returns>The product.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Multiply(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Represents the operator for multiplying a floating-point value by an integer value.
            </summary>
            <param name="a">The floating-point value.</param>
            <param name="b">The integer value.</param>
            <returns>The result of multiplying the floating-point value by the integer value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Multiply(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Multiplies an integer value by an FP value.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Division(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Represents an operator to perform division on two FP (fixed point) numbers.
            </summary>
            <param name="a">The dividend.</param>
            <param name="b">The divisor.</param>
            <returns>The result of the division operation.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Division(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Divides an FP value by an integer value.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second Int32 value.</param>
            <returns>The divided result.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Division(System.Int32,Photon.Deterministic.FP)">
            <summary>
            This operator takes an integer value (`a`) and an `FP` value (`b`) and returns the result of the division of `a` by `b`.
            </summary>
            <param name="a">The integer value to be divided.</param>
            <param name="b">The `FP` value to divide by.</param>
            <returns>An `FP` value representing the result of the division of `a` by `b`.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Division(Photon.Deterministic.FP,Photon.Deterministic.FPHighPrecisionDivisor)">
            <summary>
            Divides an FP value by a high precision divisor.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The HighPrecisionDivisor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Modulus(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Modulo operator for FP values.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Modulus(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Modulo operator for FP and integer values.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Modulus(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Modulo operator for integer and FP values.
            </summary>
            <param name="a">The integer value.</param>
            <param name="b">The FP value.</param>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Modulus(Photon.Deterministic.FP,Photon.Deterministic.FPHighPrecisionDivisor)">
            <summary>
            Modulo operator for FP and high precision divisor.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The high precision divisor.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_LessThan(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to compare two FP values.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_LessThan(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Represents the operator to compare an FP value with an integer value.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_LessThan(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to compare an integer value with an FP value.
            </summary>
            <param name="a">The integer value.</param>
            <param name="b">The FP value.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_LessThanOrEqual(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to compare two FP values.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_LessThanOrEqual(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Code that defines the operator for less than or equal to comparison between a FP (Fixed Point) value and an integer value.
            </summary>
            <param name="a">The FP value to compare</param>
            <param name="b">The integer value to compare</param>
            <returns>Returns <see langword="true"/> if the FP value is less than or equal to the integer value, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_LessThanOrEqual(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Code that defines the operator for less than or equal to comparison between an integer value and a FP (Fixed Point) value.
            </summary>
            <param name="a">The integer value to compare</param>
            <param name="b">The FP value to compare</param>
            <returns>Returns <see langword="true"/> if the integer value is less than or equal to the FP value, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_GreaterThan(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to compare two FP values.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns><see langword="true"/> if the first value is greater than the second, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_GreaterThan(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Represents the operator to compare an FP value with an integer value.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value.</param>
            <returns><see langword="true"/> if the FP value is greater than the integer value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_GreaterThan(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to compare an integer value with an FP value.
            </summary>
            <param name="a">The integer value.</param>
            <param name="b">The FP value.</param>
            <returns><see langword="true"/> if the integer value is greater than the FP value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_GreaterThanOrEqual(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to compare two FP values.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns><see langword="true"/> if the first value is greater than or equal to the second, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_GreaterThanOrEqual(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Represents the operator to compare an FP value with an integer value.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value.</param>
            <returns><see langword="true"/> if the FP value is greater than or equal to the integer value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_GreaterThanOrEqual(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Represents the operator to compare an integer value with an FP value.
            </summary>
            <param name="a">The integer value.</param>
            <param name="b">The FP value.</param>
            <returns><see langword="true"/> if the integer value is greater than or equal to the FP value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Equality(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Compares two FP values for equality.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns><see langword="true"/> if the two values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Equality(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Compares an FP value with an integer value for equality.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value.</param>
            <returns><see langword="true"/> if the two values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Equality(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Compares an integer value with an FP value for equality.
            </summary>
            <param name="a">The integer value.</param>
            <param name="b">The FP value.</param>
            <returns><see langword="true"/> if the two values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Inequality(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Compares two FP values for inequality.
            </summary>
            <param name="a">The first FP value.</param>
            <param name="b">The second FP value.</param>
            <returns><see langword="true"/> if the two values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Inequality(Photon.Deterministic.FP,System.Int32)">
            <summary>
            Compares an FP value with an integer value for inequality.
            </summary>
            <param name="a">The FP value.</param>
            <param name="b">The integer value.</param>
            <returns><see langword="true"/> if the two values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Inequality(System.Int32,Photon.Deterministic.FP)">
            <summary>
            Compares an integer value with an FP value for inequality.
            </summary>
            <param name="a">The integer value.</param>
            <param name="b">The FP value.</param>
            <returns><see langword="true"/> if the two values are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.Int32)~Photon.Deterministic.FP">
            <summary>
            Converts an integer value to an FP value.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>The FP value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.UInt32)~Photon.Deterministic.FP">
            <summary>
            Converts an integer value to an FP value.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>The FP value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.Int16)~Photon.Deterministic.FP">
            <summary>
            Converts an integer value to an FP value.
            </summary>
            <param name="value">The integer value to convert.</param>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.UInt16)~Photon.Deterministic.FP">
            <summary>
            Converts an integer value to an FP value.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>The FP value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.SByte)~Photon.Deterministic.FP">
            <summary>
            Implicitly converts a signed byte value to an instance of the FP struct.
            </summary>
            <param name="value">The signed byte value to be converted.</param>
            <returns>An instance of the FP struct representing the converted value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.Byte)~Photon.Deterministic.FP">
            <summary>
            Implicit conversion operator for converting a Byte value to an FP (Fixed Point) value.
            </summary>
            <param name="value">The Byte value to be converted.</param>
            <returns>An FP value representing the converted Byte value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Explicit(Photon.Deterministic.FP)~System.Int32">
            <summary>
            Converts an integer value to an FP value.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>The FP value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Explicit(Photon.Deterministic.FP)~System.Int64">
            <summary>
            Converts an FP value to an integer value.
            </summary>
            <param name="value">The FP value to convert.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Explicit(Photon.Deterministic.FP)~System.Single">
            <summary>
            Converts an FP value to a float value.
            </summary>
            <param name="value">The FP value to convert.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Explicit(Photon.Deterministic.FP)~System.Double">
            <summary>
            Converts an FP value to a double value.
            </summary>
            <param name="value">The FP value to convert.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.Single)~Photon.Deterministic.FP">
            <summary>
            Purposefully throws an exception when trying to cast from a float to an FP.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Photon.Deterministic.FP.op_Implicit(System.Double)~Photon.Deterministic.FP">
            <summary>
            Purposefully throws an exception when trying to cast from a double to an FP.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Photon.Deterministic.FPBounds2">
            <summary>
            Represents an 2D axis aligned bounding box (AABB).
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.FPBounds2.SIZE">
            <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPBounds2.Center">
            <summary>
            Center of the bounding box.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPBounds2.Extents">
            <summary>
            Extents of the bounding box (half of the size).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPBounds2.Max">
            <summary>
            Gets or sets the maximal point of the box. This is always equal to <see cref="F:Photon.Deterministic.FPBounds2.Center"/> + <see cref="F:Photon.Deterministic.FPBounds2.Extents"/>.
            Setting this property will not affect <see cref="P:Photon.Deterministic.FPBounds2.Min"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPBounds2.Min">
            <summary>
            Gets or sets the minimal point of the box. This is always equal to <see cref="F:Photon.Deterministic.FPBounds2.Center"/> - <see cref="F:Photon.Deterministic.FPBounds2.Extents"/>.
            Setting this property will not affect <see cref="P:Photon.Deterministic.FPBounds2.Max"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.#ctor(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Create a new Bounds with the given center and extents.
            </summary>
            <param name="center">Center point.</param>
            <param name="extents">Extents (half the size).</param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.Expand(Photon.Deterministic.FP)">
            <summary>
            Expand bounds by 0.5 * <paramref name="amount"/> in both directions.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.Expand(Photon.Deterministic.FPVector2)">
            <summary>
            Expand bounds by 0.5 * <paramref name="amount"/> in both directions.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.SetMinMax(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Set the bounds to the given min and max points.
            </summary>
            <param name="min">Minimum position.</param>
            <param name="max">Maximum position.</param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.Encapsulate(Photon.Deterministic.FPVector2)">
            <summary>
            Expand bounds to contain <paramref name="point"/> (if needed).
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.Encapsulate(Photon.Deterministic.FPBounds2)">
            <summary>
            Expand bounds to contain <paramref name="bounds"/> (if needed).
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.Intersects(Photon.Deterministic.FPBounds2)">
            <summary>
            Returns <see langword="true"/> if there is an intersection between bounds.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes the FPBounds2 struct by serializing its FPVector2 fields.
            </summary>
            <param name="ptr">A pointer to the FPBounds2 struct to be serialized.</param>
            <param name="serializer">The serializer object used to serialize the components.</param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds2.GetHashCode">
            <summary>
            Computes the hash code of the FPBounds2 instance.
            </summary>
            <returns>The hash code of the FPBounds2 object.</returns>
        </member>
        <member name="T:Photon.Deterministic.FPBounds3">
            <summary>
            Represents an 3D axis aligned bounding box (AABB).
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.FPBounds3.SIZE">
            <summary>
            /// <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPBounds3.Center">
            <summary>
            Center of the bounding box.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPBounds3.Extents">
            <summary>
            Extents of the bounding box (half of the size).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPBounds3.Max">
            <summary>
            Gets or sets the maximal point of the box. This is always equal to <see cref="F:Photon.Deterministic.FPBounds3.Center"/> + <see cref="F:Photon.Deterministic.FPBounds3.Extents"/>.
            Setting this property will not affect <see cref="P:Photon.Deterministic.FPBounds3.Min"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPBounds3.Min">
            <summary>
            Gets or sets the minimal point of the box. This is always equal to <see cref="F:Photon.Deterministic.FPBounds3.Center"/> - <see cref="F:Photon.Deterministic.FPBounds3.Extents"/>.
            Setting this property will not affect <see cref="P:Photon.Deterministic.FPBounds3.Max"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.#ctor(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Create a new Bounds with the given center and extents.
            </summary>
            <param name="center">Center point.</param>
            <param name="extents">Extents (half the size).</param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.Expand(Photon.Deterministic.FP)">
            <summary>
            Expand bounds by 0.5 * <paramref name="amount"/> in both directions.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.Expand(Photon.Deterministic.FPVector3)">
            <summary>
            Expand bounds by 0.5 * <paramref name="amount"/> in both directions.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.SetMinMax(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Set the bounds to the given <paramref name="min"/> and <paramref name="max"/> points.
            </summary>
            <param name="min">Minimum position.</param>
            <param name="max">Maximum position.</param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.Encapsulate(Photon.Deterministic.FPVector3)">
            <summary>
            Expand bounds to contain <paramref name="point"/> (if needed).
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.Encapsulate(Photon.Deterministic.FPBounds3)">
            <summary>
            Expand bounds to contain <paramref name="bounds"/> (if needed).
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.Intersects(Photon.Deterministic.FPBounds3)">
            <summary>
            Returns <see langword="true"/> if there is an intersection between bounds.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes the FPBounds3 struct.
            </summary>
            <param name="ptr">Pointer to the FPBounds3 struct to be serialized.</param>
            <param name="serializer">The serializer object used to serialize and deserialize components.</param>
        </member>
        <member name="M:Photon.Deterministic.FPBounds3.GetHashCode">
            <summary>
            Computes a hash code for the current instance of the <see cref="T:Photon.Deterministic.FPBounds3"/> class.
            </summary>
            <remarks>
            The hash code is computed by combining the hash codes of the <see cref="F:Photon.Deterministic.FPBounds3.Center"/> and <see cref="F:Photon.Deterministic.FPBounds3.Extents"/>.
            </remarks>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="T:Photon.Deterministic.FPCollision">
            <summary>
            A collection of collision helper functions.
            </summary>
            \ingroup MathAPI
        </member>
        <member name="M:Photon.Deterministic.FPCollision.TriangleCenter(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns the center of a triangle defined by three vertices.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.IsPointOnLine(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns <see langword="true"/> if a point <paramref name="point"/> lies on a line crossing <paramref name="p1"/> and <paramref name="p2"/>.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.IsPointOnLineSegment(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns <see langword="true"/> if a point <paramref name="point"/> lies on a segment defined by <paramref name="p1"/> and <paramref name="p2"/>.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestPointOnSegment(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Returns the closest point on a segment to a given point.
            </summary>
            <param name="point">The point to find the closest point on the segment to.</param>
            <param name="p1">The start point of the segment.</param>
            <param name="p2">The end point of the segment.</param>
            <returns>The closest point on the segment to the given point.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestPointOnSegment(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Cast point <paramref name="point"/> on a line crossing <paramref name="p1"/> and <paramref name="p2"/>.
            The result is clamped to lie on a segment defined by <paramref name="p1"/> and <paramref name="p2"/>.
            </summary>
            <param name="point"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClampPointToAABB(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@)">
            <summary>
            Clamps a 2D point to an axis-aligned bounding box (AABB).
            </summary>
            <param name="point">The point to clamp.</param>
            <param name="boxExtents">The half extents of the AABB. The AABB is centered at the origin.</param>
            <param name="clampedPoint">The clamped point will be stored in this output parameter.</param>
            <returns>Returns <see langword="true"/> if the original point is inside the AABB, or <see langword="false"/> if it is outside. The clamped point will always be inside the AABB.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestPointBetweenSegments(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Computes the closes point in segment A to a segment B.
            </summary>
            <param name="segment1Start">Start point of segment A.</param>
            <param name="segment1End">End point of segment A.</param>
            <param name="segment2Start">Start point of segment A.</param>
            <param name="segment2End">End point of segment B.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestPointOnTriangle(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Casts a point <paramref name="pt"/> on a triangle defined by three vertices.
            </summary>
            <param name="pt"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestPointOnCicle(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2)">
            <summary>
            Casts a point <paramref name="pt"/> on a circle.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.TriangleContainsPointExclusive(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Checks if <paramref name="pt"/> is inside a triangle, excluding vertices and edges. Works for CW and CWW.
            </summary>
            <param name="pt">Point to check</param>
            <param name="v0">vertex position 0</param>
            <param name="v1">vertex position 1</param>
            <param name="v2">vertex position 2</param>
            <returns><see langword="true"/> if <paramref name="pt"/> is inside the triangle. <see langword="false"/> if point is outside or if the point is located on an edge or vertex.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.TriangleContainsPointExclusive(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Checks if <paramref name="pt"/> is inside a triangle, excluding vertices and edges. This only checks the XZ component like the triangle is in 2D! Works for CW and CWW.
            </summary>
            <param name="pt">Point to check</param>
            <param name="v0">vertex position 0</param>
            <param name="v1">vertex position 1</param>
            <param name="v2">vertex position 2</param>
            <returns><see langword="true"/> if <paramref name="pt"/> is inside the triangle. <see langword="false"/> if point is outside or if the point is located on an edge or vertex.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.TriangleContainsPointInclusive(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Checks if <paramref name="pt"/> is inside a triangle, including edges and vertices. Works for CW and CWW.
            </summary>
            <param name="pt">Point to check</param>
            <param name="v0">vertex position 0</param>
            <param name="v1">vertex position 1</param>
            <param name="v2">vertex position 2</param>
            <returns><see langword="true"/> if <paramref name="pt"/> is inside the triangle or is located on an edge or vertex.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.TriangleContainsPointInclusive(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Checks if <paramref name="pt"/> is inside a triangle, including edges and vertices.  This only checks the XZ component like the triangle is in 2D! Works for CW and CWW.
            </summary>
            <param name="pt">Point to check</param>
            <param name="v0">vertex position 0</param>
            <param name="v1">vertex position 1</param>
            <param name="v2">vertex position 2</param>
            <returns><see langword="true"/> if <paramref name="pt"/> is inside the triangle or is located on an edge or vertex.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.CircleContainsPoint(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2)">
            <summary>
            Checks if <paramref name="point"/> is inside a circle, including its circumference. Works for CW and CWW.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="point"></param>
            <returns><see langword="true"/> in point <paramref name="point"/> is inside the circle.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.CircleIntersectsCircle(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Circle-circle intersection test.
            </summary>
            <param name="a_origin"></param>
            <param name="a_radius"></param>
            <param name="b_origin"></param>
            <param name="b_radius"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.CircleIntersectsAABB(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Circle-AABB intersection test.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.CircleIntersectsTriangle(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Circle-triangle intersection test.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsAABB_SAT(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Line segment-AABB intersection test.
            </summary>
            <param name="p1">First point that defines the line segment in world space.</param>
            <param name="p2">Second point that defines the line segment in world space.</param>
            <param name="aabbCenter">The center of the AABB in world space.</param>
            <param name="aabbExtents">The distance between the AABB center and the max X and Y values in world space.</param>
            <returns><see langword="true"/> if the line segment intersects the AABB and <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsAABB_SAT(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Line segment-AABB intersection test in the LOCAL space of the AABB.
            </summary>
            <param name="p1">First point that defines the line segment, relative to the AABB center.</param>
            <param name="p2">Second point that defines the line segment, relative to the AABB center.</param>
            <param name="aabbExtents">The distance between the AABB center and the max X and Y values.</param>
            <returns><see langword="true"/> if the line segment intersects the AABB and <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsAABB2(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@,Photon.Deterministic.FPVector2@,Photon.Deterministic.FP@)">
            <summary>
            Line segment-AABB intersection test in world space with computation of intersection points, normal and penetration.
            If an intersection is detected, the test always returns two intersection points, which can be either intersections between the line
            segment and an edge of the AABB or a segment point itself, if inside the AABB.
            </summary>
            <param name="p1">First point that defines the line segment in world space.</param>
            <param name="p2">Second point that defines the line segment in world space.</param>
            <param name="normal">Normal along which the line segment <paramref name="penetration"/> will be computed.</param>
            <param name="aabbCenter">The center of the AABB in world space.</param>
            <param name="aabbExtents">The distance between the AABB center and the max X and Y values in world space.</param>
            <param name="i1">First intersection point.</param>
            <param name="i2">Second intersection point.</param>
            <param name="penetration">The penetration of the line segment along the <paramref name="normal"/>.</param>
            <returns><see langword="true"/> if the line segment intersects the AABB and <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsAABB2(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@,Photon.Deterministic.FPVector2@,Photon.Deterministic.FP@)">
            <summary>
            Line segment-AABB intersection test in the LOCAL space of the AABB with computation of intersection points, normal and penetration.
            If an intersection is detected, the test always returns two intersection points, which can be either intersections between the line
            segment and an edge of the AABB or a segment point itself, if inside the AABB.
            </summary>
            <param name="p1">First point that defines the line segment, relative to the AABB center.</param>
            <param name="p2">Second point that defines the line segment, relative to the AABB center.</param>
            <param name="normal">Normal along which the line segment <paramref name="penetration"/> will be computed.</param>
            <param name="aabbExtents">The distance between the AABB center and the max X and Y values in world space.</param>
            <param name="i1">First intersection point, relative to the AABB center.</param>
            <param name="i2">Second intersection point, relative to the AABB center.</param>
            <param name="penetration">The penetration of the line segment along the <paramref name="normal"/>.</param>
            <returns><see langword="true"/> if the line segment intersects the AABB and <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsAABB(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@,Photon.Deterministic.FPVector2@,Photon.Deterministic.FP@)">
            <summary>
            Line segment-AABB intersection test in world space with computation of intersection points and penetration.
            </summary>
            <param name="p1">First point that defines the line segment in world space.</param>
            <param name="p2">Second point that defines the line segment in world space.</param>
            <param name="aabbCenter">The center of the AABB in world space.</param>
            <param name="aabbExtents">The distance between the AABB center and the max X and Y values in world space.</param>
            <param name="i1">First intersection point in world space.</param>
            <param name="i2">Second intersection point in world space.</param>
            <param name="penetration">The penetration of the line segment along the closest AABB normal.</param>
            <returns>
            The number of intersections found between the line segment and the AABB edges.
            If less than 2, the respective intersection point will be default.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsAABB(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@,Photon.Deterministic.FPVector2@,Photon.Deterministic.FP@)">
            <summary>
            Line segment-AABB intersection test in the LOCAL space of the AABB with computation of intersection points and penetration.
            </summary>
            <param name="p1">First point that defines the line segment, relative to the AABB center.</param>
            <param name="p2">Second point that defines the line segment, relative to the AABB center.</param>
            <param name="aabbExtents">The distance between the AABB center and the max X and Y values in world space.</param>
            <param name="i1">First intersection point, relative to the AABB center.</param>
            <param name="i2">Second intersection point, relative to the AABB center.</param>
            <param name="penetration">The penetration of the line segment along the closest AABB normal.</param>
            <returns>
            The number of intersections found between the line segment and the AABB edges.
            If less than 2, the respective intersection point will be default.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsLine(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Line segment-line segment intersection test.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsLine(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@,Photon.Deterministic.FP@)">
            <summary>
            Line segment-line segment intersection test. 
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <param name="point">Point of collision</param>
            <param name="distance">Distance along p segment where the collision happens</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsLine(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@,Photon.Deterministic.FP@,Photon.Deterministic.FP@)">
            <summary>
            Determines if two lines intersect.
            </summary>
            <param name="p1">The starting point of the first line.</param>
            <param name="p2">The ending point of the first line.</param>
            <param name="q1">The starting point of the second line.</param>
            <param name="q2">The ending point of the second line.</param>
            <param name="point">The intersection point, if the lines intersect.</param>
            <param name="distance">The distance between the intersection point and point p1, if the lines intersect.</param>
            <param name="normalizedDist">The normalized distance between the intersection point and point p1, if the lines intersect.</param>
            <returns><see langword="true"/> if the lines intersect, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsLine(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@)">
            <summary>
            Line segment-line segment intersection test. 
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <param name="point">Point of collision</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsLineAlwaysHit(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2@)">
            <summary>
            Line segment-line segment intersection test. Assumes lines are not colinear nor parallel.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <param name="point"></param>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.InsideAABB(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP@)">
            <summary>
            Returns <see langword="true"/> if <paramref name="point"/> is inside centered AABB.
            </summary>
            <param name="point"></param>
            <param name="extents"></param>
            <param name="penetration"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsCircleManifold(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2@)">
            <summary>
            Line segment-circle intersection test.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="position"></param>
            <param name="radius"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsCircle(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,System.Boolean)">
            <summary>
            Line segment-circle intersection test.
            </summary>
            <param name="p1">Start point of the line segment.</param>
            <param name="p2">End point of the line segment.</param>
            <param name="position">Position of the center of the circle in world space.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="ignoreIfStartPointInside">If the intersection should be ignored if the start point of the line segment (<paramref name="p1"/>) is inside the circle.</param>
            <returns><see langword="true"/> if an intersection is detected. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsCircle(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2@,System.Boolean)">
            <summary>
            Line segment-circle intersection test.
            </summary>
            <param name="p1">Start point of the line segment.</param>
            <param name="p2">End point of the line segment.</param>
            <param name="position">Position of the center of the circle in world space.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="point">Intersection point, if intersecting. Default otherwise.</param>
            <param name="ignoreIfStartPointInside">If the intersection should be ignored if the start point of the line segment (<paramref name="p1"/>) is inside the circle.</param>
            <returns><see langword="true"/> if an intersection is detected. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.LineIntersectsCircle(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2@,Photon.Deterministic.FP@,System.Boolean)">
            <summary>
            Line segment-circle intersection test.
            </summary>
            <param name="p1">Start point of the line segment.</param>
            <param name="p2">End point of the line segment.</param>
            <param name="position">Position of the center of the circle in world space.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="point">Intersection point, if intersecting. Default otherwise.</param>
            <param name="normalizedDist">Normalize distance from <paramref name="p1"/> to <paramref name="p2"/> of the intersection point, if intersecting. Default otherwise.</param>
            <param name="ignoreIfStartPointInside">If the intersection should be ignored if the start point of the line segment (<paramref name="p1"/>) is inside the circle.</param>
            <returns><see langword="true"/> if an intersection is detected. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.CircleIntersectsPolygon(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FPVector2[],Photon.Deterministic.FPVector2[])">
            <summary>
            Circle-polygon intersection test.
            </summary>
            <param name="circleCenter"></param>
            <param name="circleRadius"></param>
            <param name="polygonPosition"></param>
            <param name="polygonRotationSinInverse"></param>
            <param name="polygonRotationCosInverse"></param>
            <param name="polygonVertices"></param>
            <param name="polygonNormals"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.CircleIntersectsPolygon(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2[],Photon.Deterministic.FPVector2[])">
            <summary>
            Circle-polygon intersection test.
            </summary>
            <param name="circleCenter"></param>
            <param name="circleRadius"></param>
            <param name="polygonPosition"></param>
            <param name="polygonRotation"></param>
            <param name="polygonVertices"></param>
            <param name="polygonNormals"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.BoxIntersectsBox(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Box-Box (2D) intersection test.
            </summary>
            <param name="aCenter"></param>
            <param name="aExtents"></param>
            <param name="aRotation"></param>
            <param name="bCenter"></param>
            <param name="bExtents"></param>
            <param name="bRotation"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestDistanceToTriangle(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3@,Photon.Deterministic.FPVector3@)">
            <summary>
            Uses barycentric coordinates to calculate the closest point on a triangle. In conjunction with Fixed Point math this can get quite inaccurate when the triangle become large (more than 100 units) or tiny (less then 0.01 units).
            </summary>
            <param name="p">Point</param>
            <param name="a">Vertex 0</param>
            <param name="b">Vertex 1</param>
            <param name="c">Vertex 2</param>
            <param name="closestPoint">Resulting point on the triangle</param>
            <param name="barycentricCoordinates">Barycentric coordinates of the point inside the triangle.</param>
            <returns>Squared distance to point on the triangle.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClampPointToLocalAABB(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3@)">
            <summary>
            Checks if a point is inside the extents of an AABB centered at the origin (local space) and clamp it otherwise.
            </summary>
            <param name="point">Point in the local space of the AABB.</param>
            <param name="aabbExtents">Extents of the AABB.</param>
            <param name="clampedPoint">Clamped point inside the AABB. Equals to <paramref name="point"/> if it is already inside the AABB.</param>
            <returns><see langword="true"/> if the point is already inside the AABB.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestPointInSegment(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Calculates the closest point on the line segment defined by two given points to a given point.
            </summary>
            <param name="point">The point to which the closest point on the segment is calculated.</param>
            <param name="a">The first point of the line segment.</param>
            <param name="b">The second point of the line segment.</param>
            <returns>The closest point on the line segment to the given point.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPCollision.ClosestPointBetweenSegments(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Computes the closes point in segment A to a segment B.
            </summary>
            <param name="segmentStartA">Start point of segment A.</param>
            <param name="segmentEndA">End point of segment A.</param>
            <param name="segmentStartB">Start point of segment A.</param>
            <param name="segmentEndB">End point of segment B.</param>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.FPHighPrecisionDivisor">
            <summary>
            Represents a high precision divisor for use with the Fixed Point math system.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.ExtraPrecision">
            <summary>
            The extra precision to shift.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.TotalPrecision">
            <summary>
            The total precision.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Pi">
            <summary>
            >Pi number.
            <para>Closest double: 3.14159265346825</para>
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPHighPrecisionDivisor.Raw">
            <summary>
            Holds <see cref="T:Photon.Deterministic.FPHighPrecisionDivisor"/> constants in raw (long) form.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Pi">
            <summary>
            >Pi number.
            <para>Closest double: 3.14159265346825</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.PiInv">
            <summary>
            1/Pi.
            <para>Closest double: 0.318309886148199</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.PiTimes2">
            <summary>
            2 * Pi.
            <para>Closest double: 6.28318530716933</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.PiOver2">
            <summary>
            Pi / 2.
            <para>Closest double: 1.57079632673413</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.PiOver2Inv">
            <summary>
            2 / Pi.
            <para>Closest double: 0.636619772296399</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.PiOver4">
            <summary>
            Pi / 4.
            <para>Closest double: 0.785398163367063</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Pi3Over4">
            <summary>
            3 * Pi / 4.
            <para>Closest double: 2.35619449010119</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Deg2Rad">
            <summary>
            Degrees-to-radians conversion constant.
            <para>Closest double: 0.0174532923847437</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Rad2Deg">
            <summary>
            Radians-to-degrees conversion constant.
            <para>Closest double: 57.2957795129623</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Rad_180">
            <summary>
            FP constant representing 180 degrees in radian.
            <para>Closest double: 3.14159265346825</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Rad_90">
            <summary>
            FP constant representing 90 degrees in radian.
            <para>Closest double: 1.57079632673413</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Rad_45">
            <summary>
            FP constant representing 45 degrees in radian.
            <para>Closest double: 0.785398163367063</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Rad_22_50">
            <summary>
            FP constant representing 22.5 degrees in radian.
            <para>Closest double: 0.392699081683531</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_01">
            <summary>
            FP constant representing the number 0.01.
            <para>Closest double: 0.00999999977648258</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_02">
            <summary>
            FP constant representing the number 0.02.
            <para>Closest double: 0.0199999997857958</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_03">
            <summary>
            FP constant representing the number 0.03.
            <para>Closest double: 0.029999999795109</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_04">
            <summary>
            FP constant representing the number 0.04.
            <para>Closest double: 0.0399999998044223</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_05">
            <summary>
            FP constant representing the number 0.05.
            <para>Closest double: 0.0499999998137355</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_10">
            <summary>
            FP constant representing the number 0.10.
            <para>Closest double: 0.0999999998603016</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_20">
            <summary>
            FP constant representing the number 0.20.
            <para>Closest double: 0.199999999953434</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_33">
            <summary>
            FP constant representing the number 0.33.
            <para>Closest double: 0.333333333255723</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._0_99">
            <summary>
            FP constant representing the number 0.99.
            <para>Closest double: 0.989999999990687</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_01">
            <summary>
            FP constant representing the number 1.01.
            <para>Closest double: 1.00999999977648</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_02">
            <summary>
            FP constant representing the number 1.02.
            <para>Closest double: 1.0199999997858</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_03">
            <summary>
            FP constant representing the number 1.03.
            <para>Closest double: 1.02999999979511</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_04">
            <summary>
            FP constant representing the number 1.04.
            <para>Closest double: 1.03999999980442</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_05">
            <summary>
            FP constant representing the number 1.05.
            <para>Closest double: 1.04999999981374</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_10">
            <summary>
            FP constant representing the number 1.10.
            <para>Closest double: 1.0999999998603</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_20">
            <summary>
            FP constant representing the number 1.20.
            <para>Closest double: 1.19999999995343</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_33">
            <summary>
            FP constant representing the number 1.33.
            <para>Closest double: 1.33333333325572</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw._1_99">
            <summary>
            FP constant representing the number 1.99.
            <para>Closest double: 1.98999999999069</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.EN1">
            <summary>
            FP constant representing the epsilon value EN1.
            <para>Closest double: 0.0999999998603016</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.EN2">
            <summary>
            FP constant representing the epsilon value EN2.
            <para>Closest double: 0.00999999977648258</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.EN3">
            <summary>
            FP constant representing the epsilon value EN3.
            <para>Closest double: 0.000999999931082129</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.EN4">
            <summary>
            FP constant representing the epsilon value EN4.
            <para>Closest double: 9.99998301267624E-05</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.EN5">
            <summary>
            FP constant representing the epsilon value EN5.
            <para>Closest double: 9.99984331429005E-06</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.E">
            <summary>
            FP constant representing the Euler Number constant.
            <para>Closest double: 2.71828182833269</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Log2_E">
            <summary>
            FP constant representing Log(E).
            <para>Closest double: 1.44269504072145</para>
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPHighPrecisionDivisor.Raw.Log2_10">
            <summary>
            FP constant representing Log(10).
            <para>Closest double: 3.32192809483968</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.PiInv">
            <summary>
            1/Pi.
            <para>Closest double: 0.318309886148199</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.PiTimes2">
            <summary>
            2 * Pi.
            <para>Closest double: 6.28318530716933</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.PiOver2">
            <summary>
            Pi / 2.
            <para>Closest double: 1.57079632673413</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.PiOver2Inv">
            <summary>
            2 / Pi.
            <para>Closest double: 0.636619772296399</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.PiOver4">
            <summary>
            Pi / 4.
            <para>Closest double: 0.785398163367063</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Pi3Over4">
            <summary>
            3 * Pi / 4.
            <para>Closest double: 2.35619449010119</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Deg2Rad">
            <summary>
            Degrees-to-radians conversion constant.
            <para>Closest double: 0.0174532923847437</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Rad2Deg">
            <summary>
            Radians-to-degrees conversion constant.
            <para>Closest double: 57.2957795129623</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Rad_180">
            <summary>
            FP constant representing 180 degrees in radian.
            <para>Closest double: 3.14159265346825</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Rad_90">
            <summary>
            FP constant representing 90 degrees in radian.
            <para>Closest double: 1.57079632673413</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Rad_45">
            <summary>
            FP constant representing 45 degrees in radian.
            <para>Closest double: 0.785398163367063</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Rad_22_50">
            <summary>
            FP constant representing 22.5 degrees in radian.
            <para>Closest double: 0.392699081683531</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_01">
            <summary>
            FP constant representing the number 0.01.
            <para>Closest double: 0.00999999977648258</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_02">
            <summary>
            FP constant representing the number 0.02.
            <para>Closest double: 0.0199999997857958</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_03">
            <summary>
            FP constant representing the number 0.03.
            <para>Closest double: 0.029999999795109</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_04">
            <summary>
            FP constant representing the number 0.04.
            <para>Closest double: 0.0399999998044223</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_05">
            <summary>
            FP constant representing the number 0.05.
            <para>Closest double: 0.0499999998137355</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_10">
            <summary>
            FP constant representing the number 0.10.
            <para>Closest double: 0.0999999998603016</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_20">
            <summary>
            FP constant representing the number 0.20.
            <para>Closest double: 0.199999999953434</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_33">
            <summary>
            FP constant representing the number 0.33.
            <para>Closest double: 0.333333333255723</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._0_99">
            <summary>
            FP constant representing the number 0.99.
            <para>Closest double: 0.989999999990687</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_01">
            <summary>
            FP constant representing the number 1.01.
            <para>Closest double: 1.00999999977648</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_02">
            <summary>
            FP constant representing the number 1.02.
            <para>Closest double: 1.0199999997858</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_03">
            <summary>
            FP constant representing the number 1.03.
            <para>Closest double: 1.02999999979511</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_04">
            <summary>
            FP constant representing the number 1.04.
            <para>Closest double: 1.03999999980442</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_05">
            <summary>
            FP constant representing the number 1.05.
            <para>Closest double: 1.04999999981374</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_10">
            <summary>
            FP constant representing the number 1.10.
            <para>Closest double: 1.0999999998603</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_20">
            <summary>
            FP constant representing the number 1.20.
            <para>Closest double: 1.19999999995343</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_33">
            <summary>
            FP constant representing the number 1.33.
            <para>Closest double: 1.33333333325572</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor._1_99">
            <summary>
            FP constant representing the number 1.99.
            <para>Closest double: 1.98999999999069</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.EN1">
            <summary>
            FP constant representing the epsilon value EN1.
            <para>Closest double: 0.0999999998603016</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.EN2">
            <summary>
            FP constant representing the epsilon value EN2.
            <para>Closest double: 0.00999999977648258</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.EN3">
            <summary>
            FP constant representing the epsilon value EN3.
            <para>Closest double: 0.000999999931082129</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.EN4">
            <summary>
            FP constant representing the epsilon value EN4.
            <para>Closest double: 9.99998301267624E-05</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.EN5">
            <summary>
            FP constant representing the epsilon value EN5.
            <para>Closest double: 9.99984331429005E-06</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.E">
            <summary>
            FP constant representing the Euler Number constant.
            <para>Closest double: 2.71828182833269</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Log2_E">
            <summary>
            FP constant representing Log(E).
            <para>Closest double: 1.44269504072145</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.Log2_10">
            <summary>
            FP constant representing Log(10).
            <para>Closest double: 3.32192809483968</para>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPHighPrecisionDivisor.AsFP">
            <summary>
            Returns the value of the divisor as a <see cref="T:Photon.Deterministic.FP"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.LutProvider">
            <summary>
            A delegate to provide LUT data.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPLut">
            <summary>
            The lookup table for the inverse cosine function.
            The table stores precalculated values of the inverse cosine function for specific angles.
            The values are in fixed-point format with a precision of 16 bits.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.PRECISION">
            <summary>
            The number of bits used for the fractional part of the fixed-point numbers.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.PI">
            <summary>
            The value of PI in fixed-point format.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.PITIMES2">
            <summary>
            The value of PI times 2 in fixed-point format.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.PIOVER2">
            <summary>
            The value of PI divided by 2 in fixed-point format.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.ONE">
            <summary>
            The value of one in fixed-point format.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.Log2APShiftForHPDivision">
            <summary>
            How much Log2 additional precision (AP) result needs to be shifted to allow for a safe FPHighPrecision division.
            There must be a way to calculate this, but I have a brain fog atm.
            6 is the safe choice here - max log2 is 48.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.sqrt_aprox_lut">
            <summary>
            Lookup table for approximate square root values.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.asin_lut">
            <summary>
            Lookup table for the arcsine function.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.acos_lut">
            <summary>
            A lookup table used for approximately calculating the inverse cosine (acos) function for fixed-point numbers.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.atan_lut">
            <summary>
            Lookup table for the Atan function in FPMath
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.sin_cos_lut">
            <summary>
            Lookup table for the sine and cosine functions.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.tan_lut">
            <summary>
            Lookup table for the tangent function.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.log2_approx_lut">
            <summary>
            Lookup table for the log2 function.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPLut.exp_integral_lut">
            <summary>
            Lookup table for the exp function.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPLut.IsLoaded">
            <summary>
            Returns <see langword="true"/> if the lookup tables have been loaded.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPLut.Init(System.String)">
            <summary>
            Initialize LUT from directory <paramref name="directoryPath"/>. The directory needs to have following files:
            * FPSin.bytes
            * FPCos.bytes
            * FPTan.bytes
            * FPAsin.bytes
            * FPAcos.bytes
            * FPAtan.bytes
            * FPSqrt.bytes
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:Photon.Deterministic.FPLut.Init(Photon.Deterministic.LutProvider)">
            <summary>
            Initialize LUT using <paramref name="lutProvider"/>. The provider needs to be able to load following paths:
            * FPSin
            * FPCos
            * FPTan
            * FPAsin
            * FPAcos
            * FPAtan
            * FPSqrt
            </summary>
            <param name="lutProvider"></param>
        </member>
        <member name="M:Photon.Deterministic.FPLut.GenerateTables(System.String)">
            <summary>
            Generate lookup tables in <paramref name="directoryPath"/>.
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="T:Photon.Deterministic.FPMath">
            <summary>
            A collection of common math functions.
            </summary>
            \ingroup MathAPI
        </member>
        <member name="M:Photon.Deterministic.FPMath.Sign(Photon.Deterministic.FP)">
            <summary>
            Returns the sign of <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns>1 when positive or zero, -1 when negative</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SignZero(Photon.Deterministic.FP)">
            <summary>
            Returns the sign of <paramref name="value"/> if it is non-zero.
            </summary>
            <param name="value"></param>
            <returns>1 when positive, 0 when zero, -1 when negative</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SignInt(Photon.Deterministic.FP)">
            <summary>
            Returns the sign of <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns>1 when positive or zero, -1 when negative</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SignZeroInt(Photon.Deterministic.FP)">
            <summary>
            Returns the sign of <paramref name="value"/> if it is non-zero.
            </summary>
            <param name="value"></param>
            <returns>1 when positive, 0 when zero, -1 when negative</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is equal to, or greater than, the argument.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Abs(Photon.Deterministic.FP)">
            <summary>
            Returns the absolute value of the argument.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Round(Photon.Deterministic.FP)">
            <summary>
            Returns <paramref name="value"/> rounded to the nearest integer.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.RoundToInt(Photon.Deterministic.FP)">
            <summary>
            Returns <paramref name="value"/> rounded to the nearest integer.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Floor(Photon.Deterministic.FP)">
            <summary>
            Returns the largest integer smaller than or equal to <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.FloorRaw(System.Int64)">
            <inheritdoc cref="M:Photon.Deterministic.FPMath.Floor(Photon.Deterministic.FP)"/>
        </member>
        <member name="M:Photon.Deterministic.FPMath.FloorToInt(Photon.Deterministic.FP)">
            <summary>
            Returns the largest integer smaller than or equal to <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Ceiling(Photon.Deterministic.FP)">
            <summary>
            Returns the smallest integer larger than or equal to <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.CeilToInt(Photon.Deterministic.FP)">
            <summary>
            Returns the smallest integer larger than or equal to <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Max(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Min(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Min(Photon.Deterministic.FP[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="numbers"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Min(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns the minimum of three values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Max(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns the maximum of three values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Max(Photon.Deterministic.FP[])">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="numbers"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.MinMax(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP@,Photon.Deterministic.FP@)">
             <summary>
            
             </summary>
             <param name="a"></param>
             <param name="b"></param>
             <param name="min"></param>
             <param name="max"></param>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Clamp(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Clamps the given value between the given minimum and maximum values.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Clamp01(Photon.Deterministic.FP)">
            <summary>
            Clamps the given value between 0 and 1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the given value between the given minimum and maximum values.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps the given value between the given minimum and maximum values.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.ClampUseable(Photon.Deterministic.FP)">
            <summary>
            Clamps the given value between <see cref="P:Photon.Deterministic.FP.UseableMin"/> and <see cref="P:Photon.Deterministic.FP.UseableMax"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Fraction(Photon.Deterministic.FP)">
            <summary>
            Returns the fractional part of the argument.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Repeat(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Loops the value <paramref name="t"/>, so that it is never larger than <paramref name="length"/> and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.LerpRadians(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Linearly interpolates between <paramref name="start"/> and <paramref name="end"/> by <paramref name="t"/>.
            <paramref name="t"/> is clamped to the range [0, 1]. The difference between <paramref name="start"/> and <paramref name="end"/>
            is converted to a [-Pi/2, Pi/2] range.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Lerp(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Linearly interpolates between <paramref name="start"/> and <paramref name="end"/> by <paramref name="t"/>.
            <paramref name="t"/> is clamped to the range [0, 1]
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.LerpUnclamped(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Linearly interpolates between <paramref name="start"/> and <paramref name="end"/> by <paramref name="t"/>.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.InverseLerp(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Calculates the linear parameter that produces the interpolant <paramref name="value"/> within the range [<paramref name="start"/>, <paramref name="end"/>].
            The result is clamped to the range [0, 1].
            <remarks>Returns 0 if <paramref name="start"/> and <paramref name="end"/> are equal.</remarks>
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.InverseLerpUnclamped(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Calculates the linear parameter that produces the interpolant <paramref name="value"/> within the range [<paramref name="start"/>, <paramref name="end"/>].
            <remarks>The resultant factor is NOT clamped to the range [0, 1].</remarks>
            <remarks>Returns 0 if <paramref name="start"/> and <paramref name="end"/> are equal.</remarks>
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SmoothStep(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Interpolates between <paramref name="start"/> and <paramref name="end"/> with smoothing at the limits.
            Equivalent of calling <see cref="M:Photon.Deterministic.FPMath.Hermite(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)"/> with tangents set to 0 and clamping <paramref name="t"/> between 0 and 1. 
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Sqrt(Photon.Deterministic.FP)">
            <summary>
            Returns square root of <paramref name="value"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="value"/> is less than 0</exception>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SqrtRaw(System.Int64)">
            <summary>
            Returns square root of <paramref name="x"/>.
            </summary>
            <param name="x">The value to square.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is not positive.</exception>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Barycentric(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Performs barycentric interpolation.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns> <paramref name="value1"/> + (<paramref name="value2"/> - <paramref name="value1"/>) * <paramref name="t1"/> + (<paramref name="value3"/> - <paramref name="value1"/>) * <paramref name="t2"/>
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.CatmullRom(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Performs Cotmull-Rom interpolation.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Hermite(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Performs cubic Hermite interpolation.
            </summary>
            <param name="value1"></param>
            <param name="tangent1"></param>
            <param name="value2"></param>
            <param name="tangent2"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.ModuloClamped(System.Int64,System.Int64)">
            <summary>
            Performs modulo operation without forcing the sign of the dividend: So that ModuloClamped(-9, 10) = 1.
            </summary>
            <param name="a">Dividend</param>
            <param name="n">Divisor</param>
            <returns>Remainder after division</returns>
            <exception cref="T:System.InvalidOperationException">When n > Int64.MaxValue >> 2 or n &lt; Int64.MinValue >> 2</exception>
            <exception cref="T:System.DivideByZeroException">When n == 0</exception>
        </member>
        <member name="M:Photon.Deterministic.FPMath.ModuloClamped(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Performs modulo operation without forcing the sign of the dividend: So that ModuloClamped(-9, 10) = 1.
            </summary>
            <param name="a">Dividend</param>
            <param name="n">Divisor</param>
            <returns>Remainder after division</returns>
            <exception cref="T:System.InvalidOperationException">When n > <see cref="P:Photon.Deterministic.FP.UseableMax"/> or n &lt; <see cref="P:Photon.Deterministic.FP.UseableMin"/></exception>
            <exception cref="T:System.DivideByZeroException">When n == 0</exception>
        </member>
        <member name="M:Photon.Deterministic.FPMath.AngleBetweenDegrees(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Calculates the smallest signed angle between any two angles. F.e. angle between -179 and 179 is -2. Rotation is ccw.
            </summary>
            <param name="source">Source angle in degrees</param>
            <param name="target">Target angle in degrees</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.AngleBetweenDegreesRaw(System.Int64,System.Int64)">
            <summary>
            Same as AngleBetweenDegrees using Raw optimization.
            </summary>
            <param name="source">Source angle in degrees (Raw)</param>
            <param name="target">Target angle in degrees (Raw)</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.AngleBetweenRadians(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Calculates the smallest signed angle between any two angles.
            </summary>
            <param name="source">Source angle in radians</param>
            <param name="target">Target angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.AngleBetweenRadiansRaw(System.Int64,System.Int64)">
            <summary>
            Same as AngleBetweenDegrees using Raw optimization.
            </summary>
            <param name="source">Source angle in radians (Raw)</param>
            <param name="target">Target angle in radians (Raw)</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Log2FloorToInt(Photon.Deterministic.FP)">
            <summary>
            Returns floor of the logarithm of <paramref name="value"/> in base 2. It is much
            faster than calling <see cref="M:Photon.Deterministic.FPMath.Log2(Photon.Deterministic.FP)"/> and then <see cref="M:Photon.Deterministic.FPMath.FloorToInt(Photon.Deterministic.FP)"/>
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Log2CeilingToInt(Photon.Deterministic.FP)">
            <summary>
            Returns celining of the logarithm of <paramref name="value"/> in base 2. It is much
            faster than calling <see cref="M:Photon.Deterministic.FPMath.Log2(Photon.Deterministic.FP)"/> and then <see cref="M:Photon.Deterministic.FPMath.CeilToInt(Photon.Deterministic.FP)"/>
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Log2(Photon.Deterministic.FP)">
            <summary>
            Returns logarithm of <paramref name="value"/> in base 2.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Ln(Photon.Deterministic.FP)">
            <summary>
            Returns natural logarithm of <paramref name="value"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Log10(Photon.Deterministic.FP)">
            <summary>
            Returns logarithm of <paramref name="value"/> in base 10.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Log(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns logarithm of <paramref name="value"/> in base <paramref name="logBase"/>.
            It is much more performant and precise to use Log2, Log10 and Ln if <paramref name="logBase"/> is 2, 10 or e.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <param name="logBase"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Exp(Photon.Deterministic.FP)">
            <summary>
            Returns e raised to the specified power. The max relative error is ~0.3% in the range of [-6, 32].
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Sin(Photon.Deterministic.FP)">
            <summary>
            Returns the sine of angle <paramref name="rad"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="rad">Angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SinHighPrecision(Photon.Deterministic.FP)">
            <summary>
            Returns the high precision sine of angle <paramref name="rad"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="rad">Angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Cos(Photon.Deterministic.FP)">
            <summary>
            Returns the cosine of angle <paramref name="rad"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="rad">Angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.CosHighPrecision(Photon.Deterministic.FP)">
            <summary>
            Returns the high precision cosine of angle <paramref name="rad"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="rad">Angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SinCos(Photon.Deterministic.FP,Photon.Deterministic.FP@,Photon.Deterministic.FP@)">
            <summary>
            Calculates sine and cosine of angle <paramref name="rad"/>. It is faster than 
            calling <see cref="M:Photon.Deterministic.FPMath.Sin(Photon.Deterministic.FP)"/>  and <see cref="M:Photon.Deterministic.FPMath.Cos(Photon.Deterministic.FP)"/> separately.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="rad">Angle in radians</param>
            <param name="sin"></param>
            <param name="cos"></param>
        </member>
        <member name="M:Photon.Deterministic.FPMath.SinCosHighPrecision(Photon.Deterministic.FP,Photon.Deterministic.FP@,Photon.Deterministic.FP@)">
            <summary>
            Calculates high precision sine and cosine of angle <paramref name="rad"/>. It is faster than 
            calling <see cref="M:Photon.Deterministic.FPMath.SinHighPrecision(Photon.Deterministic.FP)"/>  and <see cref="M:Photon.Deterministic.FPMath.CosHighPrecision(Photon.Deterministic.FP)"/> separately.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="rad">Angle in radians</param>
            <param name="sin"></param>
            <param name="cos"></param>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Tan(Photon.Deterministic.FP)">
            <summary>
            Returns the tangent of angle <paramref name="rad"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="rad">Angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Asin(Photon.Deterministic.FP)">
            <summary>
            Returns the arc-sine of <paramref name="value"/> - the angle in radians whose sine is <paramref name="value"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Acos(Photon.Deterministic.FP)">
            <summary>
            Returns the arc-cosine of <paramref name="value"/> - the angle in radians whose cosine is <paramref name="value"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Atan(Photon.Deterministic.FP)">
            <summary>
            Returns the arc-tangent of <paramref name="value"/> - the angle in radians whose tangent is <paramref name="value"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMath.Atan2(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns the angle in radians whose <see cref="M:Photon.Deterministic.FPMath.Tan(Photon.Deterministic.FP)"/> is <paramref name="y"/>/<paramref name="x"/>. This function returns correct angle even if x is zero.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.FPMatrix2x2">
            <summary>
            Represents 2x2 column major matrix, which can be used for 2D scaling and rotation.
            Each cell can be individually accessed as a field (M&lt;row&gt;&lt;column&gt;).
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.FPMatrix2x2.SIZE">
            <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix2x2.Zero">
            <summary>
            Matrix with 0s in every cell.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix2x2.Identity">
            <summary>
            Matrix with 1s in the main diagonal and 0s in all other cells.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix2x2.M00">
            <summary>
            The value of the element at the first row and first column of a 2x2 matrix.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix2x2.M10">
            <summary>
            The value of the element at the second row and second column of a 2x2 matrix.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix2x2.M01">
            <summary>
            The value of the element at the first row and second column of a 2x2 matrix.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix2x2.M11">
            <summary>
            The value of the element at the second row and first column of a 2x2 matrix.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.FromRows(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Create from columns - first two values set the first row, second two values - second row.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.FromRows(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Create from rows - first vector set the first row, second vector set the second row.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.FromColumns(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Create from columns - first two values set the first colunn, second two values - second column.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.FromColumns(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Create from columns - first vector set the first column, second vector set second column.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.Rotate(Photon.Deterministic.FP)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="rotation">Rotation in radians.</param>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix2x2.IsIdentity">
            <summary>
            Returns <see langword="true"/> if this matrix is equal to the <see cref="P:Photon.Deterministic.FPMatrix2x2.Identity"/> matrix
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix2x2.Item(System.Int32)">
            <summary>
            Gets or sets cell M&lt;index%4&gt;&lt;index/4&gt;
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.Scale(Photon.Deterministic.FPVector2)">
            <summary>
            Creates a scaling matrix.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.MultiplyVector(Photon.Deterministic.FPVector2)">
            <summary>
            Transforms a direction by this matrix.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes the FPMatrix2x2 instance into a byte stream using the specified serializer.
            </summary>
            <param name="ptr">A pointer to the FPMatrix2x2 instance.</param>
            <param name="serializer">The serializer used to write the data.</param>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.ToString">
            <summary>
            Returns a string representation of the current FPMatrix2x2 object.
            </summary>
            <returns>
            A string that represents the current FPMatrix2x2 object. The string is formatted as "(({0}, {1}), ({2}, {3}))" where {0} represents the value of M00, {1} represents the value of M01, {2} represents the value of M10, and {3} represents the value of M11. The values are formatted using the InvariantCulture.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.GetHashCode">
            <summary>
            Calculates the hash code for the FPMatrix2x2 object.
            </summary>
            <returns>The hash code value for the current instance.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.op_Addition(Photon.Deterministic.FPMatrix2x2,Photon.Deterministic.FPMatrix2x2)">
            <summary>
            Adds two matrices.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.op_Subtraction(Photon.Deterministic.FPMatrix2x2,Photon.Deterministic.FPMatrix2x2)">
            <summary>
            Subtracts two matrices.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.op_Multiply(Photon.Deterministic.FPMatrix2x2,Photon.Deterministic.FPMatrix2x2)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.op_Multiply(Photon.Deterministic.FPMatrix2x2,Photon.Deterministic.FPVector2)">
            <summary>
            Multiplies a vector by a matrix.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix2x2.op_Multiply(Photon.Deterministic.FP,Photon.Deterministic.FPMatrix2x2)">
            <summary>
            Multiplies a matrix by a factor.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix2x2.LossyScale">
            <summary>
            Attempts to get a scale value from the matrix. 
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix2x2.Inverted">
            <summary>
            Creates inverted matrix. Matrix with determinant 0 can not be inverted and result with <see cref="P:Photon.Deterministic.FPMatrix2x2.Zero"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix2x2.Determinant">
            <summary>
            Calculates determinant of this matrix.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPMatrix3x3">
            <summary>
            Represents 3x3 column major matrix.
            Each cell can be individually accessed as a field (M&lt;row&gt;&lt;column&gt;), with indexing
            indexing property[row, column] or with indexing property[index].
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.SIZE">
            <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Zero">
            <summary>
            Matrix with 0s in every cell.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Identity">
            <summary>
            Matrix with 1s in the main diagonal and 0s in all other cells.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M00">
            <summary>First row, first column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M10">
            <summary>Second row, first column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M20">
            <summary>Third row, first column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M01">
            <summary>First row, second column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M11">
            <summary>Second row, second column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M21">
            <summary>Third row, second column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M02">
            <summary>First row, third column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M12">
            <summary>Second row, third column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix3x3.M22">
            <summary>Third row, third column</summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.FromRows(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Create from rows - first three values set the first row, second three values - second row etc.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.FromRows(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Create from rows - the first vector set the first row, second vector - second row etc.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.FromColumns(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Create from columns - first three values set the first column, second three values - second column etc.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.FromColumns(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Create from columns - the first vector set the first column, second vector - second column etc.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets cell M&lt;row&gt;&lt;column&gt;.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Item(System.Int32)">
            <summary>
            Gets or sets cell M&lt;index%4&gt;&lt;index/4&gt;
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Transposed">
            <summary>
            Creates transposed matrix.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.IsIdentity">
            <summary>
            Returns <see langword="true"/> if this matrix is equal to the <see cref="P:Photon.Deterministic.FPMatrix3x3.Identity"/> matrix
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.Scale(Photon.Deterministic.FPVector3)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes an instance of FPMatrix3x3 using the given IDeterministicFrameSerializer.
            </summary>
            <param name="ptr">A pointer to the instance of FPMatrix3x3 to be serialized.</param>
            <param name="serializer">The IDeterministicFrameSerializer used for serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.ToString">
            <summary>
            Converts the FPMatrix3x3 to a string representation.
            The returned string has the format "(({0}, {1}, {2}), ({3}, {4}, {5}), ({6}, {7}, {8}))",
            where {0} to {8} are the formatted string representations of the matrix elements.
            </summary>
            <returns>A string representation of the FPMatrix3x3.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.GetHashCode">
            <summary>
            Calculates the hash code for the current FPMatrix3x3 instance.
            </summary>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.op_Addition(Photon.Deterministic.FPMatrix3x3,Photon.Deterministic.FPMatrix3x3)">
            <summary>
            Adds two matrices.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.op_Subtraction(Photon.Deterministic.FPMatrix3x3,Photon.Deterministic.FPMatrix3x3)">
            <summary>
            Subtracts two matrices.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.op_Multiply(Photon.Deterministic.FPMatrix3x3,Photon.Deterministic.FPMatrix3x3)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.op_Multiply(Photon.Deterministic.FPMatrix3x3,Photon.Deterministic.FPVector3)">
            <summary>
            Multiplies a vector by a matrix.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.op_Multiply(Photon.Deterministic.FP,Photon.Deterministic.FPMatrix3x3)">
            <summary>
            Multiplies a matrix by a factor.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.LossyScale">
            <summary>
            Attempts to get a scale value from the matrix. 
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Inverted">
            <summary>
            Creates inverted matrix. Matrix with determinant 0 can not be inverted and result with <see cref="P:Photon.Deterministic.FPMatrix3x3.Zero"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Determinant">
            <summary>
            Calculates determinant of this matrix.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix3x3.Rotation">
            <summary>
            Attempts to get a rotation quaternion from this matrix.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.Rotate(Photon.Deterministic.FPQuaternion)">
            <summary>
            Creates a rotation matrix. Rotation is expected to be normalized.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.RotateScale(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPVector3)">
            <summary>
            Creates a rotation and scaling matrix.
            Rotation is expected to be normalized.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix3x3.InverseRotateScale(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPVector3)">
            <summary>
            Creates an inverse rotation and scaling matrix. This is significantly faster than inverting a RotateScale matrix. 
            Rotation is expected to be normalized.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPMatrix4x4">
            <summary>
            Represents 4x4 column major matrix.
            Each cell can be individually accessed as a field (M&lt;row&gt;&lt;column&gt;), with indexing
            indexxing property[row, column] or with indexing property[index].
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.SIZE">
            <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Zero">
            <summary>
            Matrix with 0s in every cell.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Identity">
            <summary>
            Matrix with 1s in the main diagonal and 0s in all other cells.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M00">
            <summary>First row, first column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M10">
            <summary>Second row, first column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M20">
            <summary>Third row, first column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M30">
            <summary>Fourth row, first column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M01">
            <summary>First row, second column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M11">
            <summary>Second row, second column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M21">
            <summary>Third row, second column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M31">
            <summary>Fourth row, second column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M02">
            <summary>First row, third column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M12">
            <summary>Second row, third column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M22">
            <summary>Third row, third column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M32">
            <summary>Fourth row, third column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M03">
            <summary>First row, fourth column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M13">
            <summary>Second row, fourth column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M23">
            <summary>Third row, fourth column</summary>
        </member>
        <member name="F:Photon.Deterministic.FPMatrix4x4.M33">
            <summary>Fourth row, fourth column</summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.FromRows(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Create from rows - first four values set the first row, second four values - second row etc.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.FromColumns(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Create from columns - first four values set the first colunn, second four values - second column etc.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets cell M&lt;row&gt;&lt;column&gt;.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Item(System.Int32)">
            <summary>
            Gets or sets cell M&lt;index%4&gt;&lt;index/4&gt;
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Transposed">
            <summary>
            Creates transposed matrix.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.IsIdentity">
            <summary>
            Returns <see langword="true"/> if this matrix is equal to the <see cref="P:Photon.Deterministic.FPMatrix4x4.Identity"/> matrix
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.InverseLookAt(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Creates inverse of look-at matrix, i.e. observer to world transformation. Equivalent to Unity's Matrix4x4.LookAt.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.LookAt(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Creates look-at matrix, i.e. world to observer transformation. Unity's Matrix4x4.LookAt does the opposite - creates observer to world transformation. To get same behaviour use <see cref="M:Photon.Deterministic.FPMatrix4x4.InverseLookAt(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)"/>
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.Scale(Photon.Deterministic.FPVector3)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.Translate(Photon.Deterministic.FPVector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="translation"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes a FPMatrix4x4 object using a given IDeterministicFrameSerializer.
            </summary>
            <param name="ptr">A pointer to the FPMatrix4x4 object to be serialized.</param>
            <param name="serializer">The IDeterministicFrameSerializer used for serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.ToString">
            <summary>
            Returns a string representation of the FPMatrix4x4 object.
            The string representation consists of the values of the matrix elements formatted
            as a 4x4 matrix.
            </summary>
            <returns>A string representation of the FPMatrix4x4 object.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.GetHashCode">
            <summary>
            Computes the hash code for the current instance.
            </summary>
            <returns>
            The hash code for the current instance.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.op_Multiply(Photon.Deterministic.FPMatrix4x4,Photon.Deterministic.FPMatrix4x4)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.LossyScale">
            <summary>
            Attempts to get a scale value from the matrix. 
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Inverted">
            <summary>
            Creates inverted matrix. Matrix with determinant 0 can not be inverted and result with <see cref="P:Photon.Deterministic.FPMatrix4x4.Zero"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Determinant">
            <summary>
            Calculates determinant of this matrix.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Determinant3x3">
            <summary>
            Calculates determinant, taking only rotation and scale parts of this matrix into account.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPMatrix4x4.Rotation">
            <summary>
            Attempts to get a rotation quaternion from this matrix.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.MultiplyPoint(Photon.Deterministic.FPVector3)">
            <summary>
            Transforms a position by this matrix. Works with regulard 3D transformations and with projective transformations.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.MultiplyPoint3x4(Photon.Deterministic.FPVector3)">
            <summary>
            Transforms a position by this matrix. Faster than <see cref="M:Photon.Deterministic.FPMatrix4x4.MultiplyPoint(Photon.Deterministic.FPVector3)"/>, but works only with regulard 3D transformations.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.MultiplyVector(Photon.Deterministic.FPVector3)">
            <summary>
            Transforms a direction by this matrix. Only rotation and scale part of the matrix is taken into account.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.TRS(Photon.Deterministic.FPVector3,Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPVector3)">
            <summary>
            Creates a translation, rotation and scaling matrix.
            Can be used to create local-to-world transformations.
            Rotation is expected to be normalized.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.InverseTRS(Photon.Deterministic.FPVector3,Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPVector3)">
            <summary>
            Creates an inversion translation, rotation and scaling matrix. This is significantly faster
            than inverting TRS matrix. 
            Can be used to create world-to-local transformations.
            Rotation is expected to be normalized.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPMatrix4x4.Rotate(Photon.Deterministic.FPQuaternion)">
            <summary>
            Creates a rotation matrix. Rotation is expected to be normalized.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPQuaternion">
            <summary>
            A Quaternion representing an orientation.
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.FPQuaternion.SIZE">
            <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPQuaternion.Identity">
            <summary>
            Quaternion corresponding to "no rotation".
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes the given instance of FPQuaternion using the provided serializer.
            </summary>
            <param name="ptr">Pointer to the instance of FPQuaternion.</param>
            <param name="serializer">The serializer to use.</param>
        </member>
        <member name="F:Photon.Deterministic.FPQuaternion.X">
            <summary>The X component of the quaternion.</summary>
        </member>
        <member name="F:Photon.Deterministic.FPQuaternion.Y">
            <summary>The Y component of the quaternion.</summary>
        </member>
        <member name="F:Photon.Deterministic.FPQuaternion.Z">
            <summary>The Z component of the quaternion.</summary>
        </member>
        <member name="F:Photon.Deterministic.FPQuaternion.W">
            <summary>The W component of the quaternion.</summary>
        </member>
        <member name="P:Photon.Deterministic.FPQuaternion.Normalized">
            <summary>
            Returns this quaternion with magnitude of 1. Most API functions expect and return normalized quaternions,
            so unless components get set manually, there should not be a need to normalize quaternions
            </summary>
            <seealso cref="M:Photon.Deterministic.FPQuaternion.Normalize(Photon.Deterministic.FPQuaternion)"/>
        </member>
        <member name="P:Photon.Deterministic.FPQuaternion.Inverted">
            <summary>
            Creates this quaternion's inverse. If this quaternion is normalized, use <see cref="P:Photon.Deterministic.FPQuaternion.Conjugated"/> instead.
            </summary>
            <seealso cref="M:Photon.Deterministic.FPQuaternion.Inverse(Photon.Deterministic.FPQuaternion)"/>
        </member>
        <member name="P:Photon.Deterministic.FPQuaternion.Conjugated">
            <summary>
            Creates this quaternion's conjugate. For normalized quaternions this property represents inverse rotation
            and should be used instead of <see cref="P:Photon.Deterministic.FPQuaternion.Inverted"/>
            </summary>
            <seealso cref="M:Photon.Deterministic.FPQuaternion.Conjugate(Photon.Deterministic.FPQuaternion)"/>
        </member>
        <member name="P:Photon.Deterministic.FPQuaternion.MagnitudeSqr">
            <summary>
            Returns square of this quaternion's magnitude.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPQuaternion.Magnitude">
            <summary>
            Return this quaternion's magnitude.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPQuaternion.AsEuler">
            <summary>
            Returns one of possible Euler angles representation, where rotations are performed around the Z axis, the X axis, and the Y axis, in that order. 
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.#ctor(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Creates a new instance of FPQuaternion
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
            <param name="w">W component.</param>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.ToString">
            <summary>
            Returns a string representation of the FPQuaternion in the format (X, Y, Z, W).
            </summary>
            <returns>A string representation of the FPQuaternion.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.GetHashCode">
            <summary>
            Returns a hash code for the current FPQuaternion object.
            </summary>
            <returns>A hash code for the current FPQuaternion object.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Product(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)">
            <summary>
            Creates product of two quaternions. Can be used to combine two rotations. Just like
            in the case of <see cref="T:Photon.Deterministic.FPMatrix4x4"/> the righmost operand gets applied first.
            This method computes the equivalent to the following pseduo-code:
            <code>
            FPQuaternion result;
            result.x = (left.w * right.x) + (left.x * right.w) + (left.y * right.z) - (left.z * right.y);
            result.y = (left.w * right.y) - (left.x * right.z) + (left.y * right.w) + (left.z * right.x);
            result.z = (left.w * right.z) + (left.x * right.y) - (left.y * right.x) + (left.z * right.w);
            result.w = (left.w * right.w) - (left.x * right.x) - (left.y * right.y) - (left.z * right.z);
            return result;
            </code>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Conjugate(Photon.Deterministic.FPQuaternion)">
            <summary>
            Returns conjugate quaternion. This method computes the equivalent to the following pseduo-code:
            <code>
            return new FPQuaternion(-value.X, -value.Y, -value.Z, value.W);
            </code>
            Conjugate can be used instead of an inverse quaterion if <paramref name="value"/> is normalized.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.IsIdentity(Photon.Deterministic.FPQuaternion)">
            <summary>
            Checks if the quaternion is the identity quaternion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.IsZero(Photon.Deterministic.FPQuaternion)">
            <summary>
            Checks if the quaternion is the invalid zero quaternion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Dot(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)">
            <summary>
            Returns the dot product between two rotations. This method computes the equivalent to the following pseduo-code:
            <code>
            return a.X * b.X + a.Y * b.Y + a.Z * b.Z + a.W * b.W;
            </code>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.FromToRotation(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Creates a quaternion which rotates from <paramref name="fromVector"/> to <paramref name="toVector"/> (normalized internally).
            If these vectors are known to be normalized or have magnitude close to 1, <see cref="M:Photon.Deterministic.FPQuaternion.FromToRotationSkipNormalize(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)"/> can be used for better performance.
            </summary>
            <param name="fromVector"></param>
            <param name="toVector"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.FromToRotationSkipNormalize(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Creates a quaternion which rotates from <paramref name="fromVector"/> to <paramref name="toVector"/> (not normalized internally).
            If these vectors are known to be normalized or have magnitude close to 1, use <see cref="M:Photon.Deterministic.FPQuaternion.FromToRotation(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)"/> instead.
            </summary>
            <param name="fromVector"></param>
            <param name="toVector"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Lerp(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion,Photon.Deterministic.FP)">
            <summary>
            Interpolates between <paramref name="a"/> and <paramref name="b"/> by <paramref name="t"/> and normalizes the result afterwards. The parameter <paramref name="t"/> is clamped to the range [0, 1].
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.LerpUnclamped(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion,Photon.Deterministic.FP)">
            <summary>
            Interpolates between <paramref name="a"/> and <paramref name="b"/> by <paramref name="t"/> and normalizes the result afterwards.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.CreateFromYawPitchRoll(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns a rotation that rotates <paramref name="roll"/> radians around the z axis, <paramref name="pitch"/> radians around the x axis, and <paramref name="yaw"/> radians around the y axis.
            </summary>
            <param name="yaw">Yaw in radians</param>
            <param name="pitch">Pitch in radians</param>
            <param name="roll">Roll in radians</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Angle(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)">
            <summary>
            Returns the angle in degrees between two rotations <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.AngleRadians(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)">
            <summary>
            Returns the angle in radians between two rotations <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.LookRotation(Photon.Deterministic.FPVector3,System.Boolean)">
            <summary>
            Obsolete. Use one of the overloads that receive either only a forward direction (uses FPVector3.Up as up direction, not ortho-normalized)
            OR forward and up directions, which can be optionally ortho-normalized.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.LookRotation(Photon.Deterministic.FPVector3)">
            <summary>
            Creates a rotation with the specified <paramref name="forward"/> direction and <see cref="P:Photon.Deterministic.FPVector3.Up"/>.
            </summary>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.LookRotation(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,System.Boolean)">
            <summary>
            Creates a rotation with the specified <paramref name="forward"/> and <paramref name="up"/> directions.
            </summary>
            <param name="forward"></param>
            <param name="up"></param>
            <param name="orthoNormalize"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Slerp(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion,Photon.Deterministic.FP)">
            <summary>
            Spherically interpolates between <paramref name="from"/> and <paramref name="to"/> by <paramref name="t"/> and normalizes the result afterwards. <paramref name="t"/> is clamped to the range [0, 1].
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.SlerpUnclamped(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion,Photon.Deterministic.FP)">
            <summary>
            Spherically interpolates between <paramref name="from"/> and <paramref name="to"/> by <paramref name="t"/> and normalizes the result afterwards.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.RotateTowards(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion,Photon.Deterministic.FP)">
            <summary>
            Rotates a rotation <paramref name="from"/> towards <paramref name="to"/> by an angular step of <paramref name="maxDegreesDelta"/>.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="maxDegreesDelta"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Euler(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns a rotation that rotates <paramref name="z"/> degrees around the z axis, <paramref name="x"/> degrees around the x axis, and <paramref name="y"/> degrees around the y axis.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Euler(Photon.Deterministic.FPVector3)">
            <summary>
            Returns a rotation that rotates <paramref name="eulerAngles"/>.z degrees around the z axis, <paramref name="eulerAngles"/>.x degrees around the x axis, and <paramref name="eulerAngles"/>.y degrees around the y axis.
            </summary>
            <param name="eulerAngles"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.AngleAxis(Photon.Deterministic.FP,Photon.Deterministic.FPVector3)">
            <summary>
            Creates a rotation which rotates <paramref name="angle"/> degrees around <paramref name="axis"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="angle"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.RadianAxis(Photon.Deterministic.FP,Photon.Deterministic.FPVector3)">
            <summary>
            Creates a rotation which rotates <paramref name="radians"/> radians around <paramref name="axis"/>.
            </summary>
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            <param name="radians"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Inverse(Photon.Deterministic.FPQuaternion)">
            <summary>
            Returns the Inverse of rotation <paramref name="value"/>. If <paramref name="value"/> is normalized it
            will be faster to call <see cref="M:Photon.Deterministic.FPQuaternion.Conjugate(Photon.Deterministic.FPQuaternion)"/>. If <paramref name="value"/>
            has a magnitude close to 0, <paramref name="value"/> will be returned.
            <remarks><see cref="T:Photon.Deterministic.FPLut"/> needs to be initialised.</remarks>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.Normalize(Photon.Deterministic.FPQuaternion)">
            <summary>
            Converts this quaternion <paramref name="value"/> to one with the same orientation but with a magnitude of 1. If <paramref name="value"/>
            has a magnitude close to 0, <see cref="P:Photon.Deterministic.FPQuaternion.Identity"/> is returned.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.op_Multiply(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)">
            <summary>
            Computes product of two quaternions. Fully equivalent to Unity's Quaternion multiplication.
            See <see cref="M:Photon.Deterministic.FPQuaternion.Product(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)"/> for details.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.op_Multiply(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FP)">
            <summary>
            Scales quaternion <paramref name="left"/> with <paramref name="right"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.op_Multiply(Photon.Deterministic.FP,Photon.Deterministic.FPQuaternion)">
            <summary>
            Scales quaternion <paramref name="right"/> with <paramref name="left"/>.
            </summary>
            <param name="right"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.op_Addition(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)">
            <summary>
            Adds each component of <paramref name="right"/> to <paramref name="left"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.op_Subtraction(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPQuaternion)">
            <summary>
            Subtracts each component of <paramref name="right"/> from <paramref name="left"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPQuaternion.op_Multiply(Photon.Deterministic.FPQuaternion,Photon.Deterministic.FPVector3)">
            <summary>
            Rotates the point <paramref name="point"/> with rotation <paramref name="quat"/>.
            </summary>
            <param name="quat"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.FPVector2">
            <summary>
            Represents a 2D Vector
            </summary>
            \ingroup MathAPI
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Normalize(Photon.Deterministic.FPVector2)">
            <summary>
            Normalizes the given vector. If the vector is too short to normalize, <see cref="P:Photon.Deterministic.FPVector2.Zero"/> will be returned.
            </summary>
            <param name="value">The vector which should be normalized.</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Normalize(Photon.Deterministic.FPVector2,Photon.Deterministic.FP@)">
            <summary>
            Normalizes the given vector. If the vector is too short to normalize, <see cref="P:Photon.Deterministic.FPVector2.Zero"/> will be returned.
            </summary>
            <param name="value">The vector which should be normalized.</param>
            <param name="magnitude">The original vector's magnitude.</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="F:Photon.Deterministic.FPVector2.SIZE">
            <summary>
            The size of the component (or struct/type) in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPVector2.EqualityComparer">
            <summary>
            Represents an equality comparer for FPVector2 objects.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPVector2.EqualityComparer.Instance">
            <summary>
            The global FPVector2 equality comparer instance.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.Zero">
            <summary>
            A vector with components (0,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.One">
            <summary>
            A vector with components (1,1);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.Right">
            <summary>
            A vector with components (1,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.Left">
            <summary>
            A vector with components (-1,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.Up">
            <summary>
            A vector with components (0,1);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.Down">
            <summary>
            A vector with components (0,-1);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.MinValue">
            <summary>
            A vector with components 
            (FP.MinValue,FP.MinValue);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.MaxValue">
            <summary>
            A vector with components 
            (FP.MaxValue,FP.MaxValue);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.UseableMin">
            <summary>
            A vector with components 
            (FP.UseableMin,FP.UseableMin);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.UseableMax">
            <summary>
            A vector with components 
            (FP.UseableMax,FP.UseableMax);
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes a FPVector2 instance.
            </summary>
            <param name="ptr">A pointer to the FPVector2 instance</param>
            <param name="serializer">An instance of IDeterministicFrameSerializer used for serialization.</param>
        </member>
        <member name="F:Photon.Deterministic.FPVector2.X">
            <summary>The X component of the vector.</summary>
        </member>
        <member name="F:Photon.Deterministic.FPVector2.Y">
            <summary>The Y component of the vector.</summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.Magnitude">
            <summary>
            Gets the length of the vector.
            </summary>
            <returns>Returns the length of the vector.</returns>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.SqrMagnitude">
            <summary>
            Gets the squared length of the vector.
            </summary>
            <returns>Returns the squared length of the vector.</returns>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.Normalized">
            <summary>
            Gets a normalized version of the vector.
            </summary>
            <returns>Returns a normalized version of the vector.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the FPVector2 struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.#ctor(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Creates a new FPVector2 instance.
            </summary>
            <param name="x">X component</param>
            <param name="y">Y component</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.#ctor(Photon.Deterministic.FP)">
            <summary>
            Creates a new FPVector2 instance.
            </summary>
            <param name="value">A value to be assigned to both components</param>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XOY">
            <summary>
            Returns vector (X, 0, Y).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XYO">
            <summary>
            Returns vector (X, Y, 0).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.OXY">
            <summary>
            Returns vector (0, X, Y).
            </summary>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Equals(System.Object)">
            <summary>
            Determines whether the current FPVector2 instance is equal to another object.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> if the specified object is equal to the current FPVector2 instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Equals(Photon.Deterministic.FPVector2)">
            <summary>
            Determines whether an FPVector2 instance is equal to another FPVector2 instance.
            </summary>
            <param name="other">The other FPVector2 instance to compare to.</param>
            <returns><see langword="true"/> if the two instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.GetHashCode">
            <summary>
            Computes the hash code for the current FPVector2 object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.ToString">
            <summary>
            Returns a string that represents the current FPVector2 instance.
            </summary>
            <returns>A string representation of the current FPVector2 instance.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Distance(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Calculates the distance between two vectors
            </summary>
            <param name="a">First vector</param>
            <param name="b">Second vector</param>
            <returns>The distance between the vectors</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.DistanceSquared(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Calculates the squared distance between two vectors
            </summary>
            <param name="a">First vector</param>
            <param name="b">Second vector</param>
            <returns>The squared distance between the vectors</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Dot(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>Returns the dot product of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.ClampMagnitude(Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Clamps the magnitude of a vector
            </summary>
            <param name="vector">Vector to clamp</param>
            <param name="maxLength">Max length of the supplied vector</param>
            <returns>The resulting (potentially clamped) vector</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Rotate(Photon.Deterministic.FPVector2[],Photon.Deterministic.FP)">
            <summary>
            Rotates each vector of <paramref name="vectors"/> by <paramref name="radians"/> radians.
            </summary>
            Rotation is counterclockwise.
            <param name="vectors"></param>
            <param name="radians"></param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Rotate(Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Rotates <paramref name="vector"/> by <paramref name="radians"/> radians.
            </summary>
            Rotation is counterclockwise.
            <param name="vector"></param>
            <param name="radians"></param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Rotate(Photon.Deterministic.FPVector2[],Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Rotates each vector of <paramref name="vectors"/> by an angle <paramref name="sin"/> is the sine of and <paramref name="cos"/> is the cosine of.
            </summary>
            Rotation is performed counterclockwise.
            <param name="vectors"></param>
            <param name="sin"></param>
            <param name="cos"></param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Rotate(Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Rotates <paramref name="vector"/> by an angle <paramref name="sin"/> is the sine of and <paramref name="cos"/> is the cosine of.
            </summary>
            Rotation is performed counterclockwise.
            <param name="vector"></param>
            <param name="sin"></param>
            <param name="cos"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Cross(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            The perp-dot product (a 2D equivalent of the 3D cross product) of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The cross product of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Reflect(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Reflects a vector off the line defined by a normal.
            </summary>
            <param name="vector">Vector to be reflected.</param>
            <param name="normal">Normal along which the vector is reflected. Expected to be normalized.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Clamp(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Clamps each component of <paramref name="value"/> to the range [<paramref name="min"/>, <paramref name="max"/>]
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Lerp(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Linearly interpolates between <paramref name="start"/> and <paramref name="end"/> by <paramref name="t"/>.
            <paramref name="t"/> is clamped to the range [0, 1]
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.LerpUnclamped(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Linearly interpolates between <paramref name="start"/> and <paramref name="end"/> by <paramref name="t"/>.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Max(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Gets a vector with the maximum x and y values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A vector with the maximum x and y values of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Max(Photon.Deterministic.FPVector2[])">
            <summary>
            Gets a vector with the maximum x and y values of all the vectors. If
            <paramref name="vectors"/> is <see langword="null"/> or empty, return <see cref="P:Photon.Deterministic.FPVector2.Zero"/>.
            </summary>
            <param name="vectors"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Min(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Gets a vector with the minimum x and y values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A vector with the minimum x and y values of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Min(Photon.Deterministic.FPVector2[])">
            <summary>
            Gets a vector with the min x and y values of all the vectors. If
            <paramref name="vectors"/> is <see langword="null"/> or empty, return <see cref="P:Photon.Deterministic.FPVector2.Zero"/>.
            </summary>
            <param name="vectors"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Scale(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Multiplies each component of the vector by the same components of the provided vector.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Angle(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns the angle in degrees between <paramref name="a"/> and <paramref name="b"/>.
            <remarks>
            See also: <see cref="M:Photon.Deterministic.FPVector2.Radians(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)"/>, <seealso cref="M:Photon.Deterministic.FPVector2.RadiansSigned(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)"/>, <seealso cref="M:Photon.Deterministic.FPVector2.RadiansSkipNormalize(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)"/>, <seealso cref="M:Photon.Deterministic.FPVector2.RadiansSignedSkipNormalize(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)"/>,
            </remarks>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculateRight(Photon.Deterministic.FPVector2)">
            <summary>
            Returns vector rotated by 90 degrees clockwise.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculateLeft(Photon.Deterministic.FPVector2)">
            <summary>
            Returns vector rotated by 90 degrees counterclockwise.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.IsRightOf(Photon.Deterministic.FPVector2)">
            <summary>
            Returns <see langword="true"/> if this vector is on the right side of <paramref name="vector"/>
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.IsLeftOf(Photon.Deterministic.FPVector2)">
            <summary>
            Returns <see langword="true"/> if this vector is on the left side of <paramref name="vector"/>
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Determinant(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns determinant of two 2d vectors which is handy to check the angle between them (method is identical to FPVector2.Cross).
            Determinant == 0 -> Vector1 and Vector2 are collinear 
            Determinant less than 0 -> Vector1 is left of Vector2
            Determinant greater than 0 -> Vector1 is right of Vector2
            </summary>
            <param name="v1">Vector1</param>
            <param name="v2">Vector2</param>
            <returns>Determinant</returns>    
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Radians(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns radians between two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.RadiansSkipNormalize(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns radians between two vectors. Vectors are assumed to be normalized.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.RadiansSigned(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns radians between two vectors. The result will be a negative number if 
            <paramref name="b"/> is on the right side of <paramref name="a"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.RadiansSignedSkipNormalize(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns radians between two vectors. The result will be a negative number if 
            <paramref name="b"/> is on the right side of <paramref name="a"/>. Vectors are assumed to be normalized.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.SmoothStep(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Interpolates between <paramref name="start"/> and <paramref name="end"/> with smoothing at the limits.
            Equivalent of calling <see cref="M:Photon.Deterministic.FPMath.SmoothStep(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)"/> for each component pair. 
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Hermite(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Equivalent of calling<see cref="M:Photon.Deterministic.FPMath.Hermite(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)"/> for each component.
            </summary>
            <param name="value1"></param>
            <param name="tangent1"></param>
            <param name="value2"></param>
            <param name="tangent2"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.Barycentric(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Equivalent of calling <see cref="M:Photon.Deterministic.FPMath.Barycentric(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)"/> for each component.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CatmullRom(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Equivalent of calling <see cref="M:Photon.Deterministic.FPMath.CatmullRom(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)"/> for each component.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.IsPolygonConvex(Photon.Deterministic.FPVector2[])">
            <summary>
            Returns <see langword="true"/> if the polygon defined by <paramref name="vertices"/> is convex.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.IsClockWise(Photon.Deterministic.FPVector2[])">
            <summary>
            Checks if the vertices of a polygon are clock-wise
            </summary>
            <param name="vertices">The vertices of the polygon</param>
            <returns><see langword="true"/> if the vertices are clock-wise aligned.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.IsCounterClockWise(Photon.Deterministic.FPVector2[])">
            <summary>
            Checks if the vertices of a polygon are counter clock-wise.
            </summary>
            <param name="vertices">The vertices of the polygon</param>
            <returns><see langword="true"/> if the vertices are counter clock-wise aligned.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.MakeCounterClockWise(Photon.Deterministic.FPVector2[])">
            <summary>
            Checks if the vertices of a polygon are clock-wise if not makes them counter clock-wise.
            </summary>
            <param name="vertices">The vertices of the polygon</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.MakeClockWise(Photon.Deterministic.FPVector2[])">
            <summary>
            Flips the winding order of the vertices if they are in counter clock-wise order. This ensures that the vertices are in clock-wise order.
            </summary>
            <param name="vertices">The array of vertices</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.FlipWindingOrder(Photon.Deterministic.FPVector2[])">
            <summary>
            Reverses the order of vertices in an array, effectively flipping the winding order of a polygon.
            </summary>
            <param name="vertices">The array of vertices representing the polygon</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculatePolygonNormals(Photon.Deterministic.FPVector2[])">
            <summary>
            Calculates a normal for each edge of a polygon defined by <paramref name="vertices"/>.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.PolygonNormalsAreValid(Photon.Deterministic.FPVector2[])">
            <summary>
            Returns <see langword="true"/> if all normals of a polygon defined by <paramref name="vertices"/> are non-zeroed.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.RecenterPolygon(Photon.Deterministic.FPVector2[])">
            <summary>
            Shifts polygon defined by <paramref name="vertices"/> so that (0,0) becomes its center.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculatePolygonArea(Photon.Deterministic.FPVector2[])">
            <summary>
            Retruns an area of a polygon defined by <paramref name="vertices"/>.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculatePolygonCentroid(Photon.Deterministic.FPVector2[])">
            <summary>
            Returns a centroid of a polygon defined by <paramref name="vertices"/>.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculatePolygonInertiaFactor(Photon.Deterministic.FPVector2[])">
            <summary>
            Calculates the mass moment of inertia factor of a polygon defined by <paramref name="vertices"/>.
            </summary>
            <remarks>To compute a body mass moment of inertia, multiply the factor by the body mass.</remarks>
            <param name="vertices">The 2D vertices that define the polygon.</param>
            <returns>The mass moment of inertia factor of the polygon.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculatePolygonLocalSupport(Photon.Deterministic.FPVector2[],Photon.Deterministic.FPVector2@)">
            <summary>
            Calculates the support point in a direction <paramref name="localDir"/> of a polygon defined by <paramref name="vertices"/>.
            <remarks>A support point is the furthest point of a shape in a given direction.</remarks>
            <remarks>Both support point and direction are expressed in the local space of the polygon.</remarks>
            <remarks>The polygon vertices are expected to be counterclockwise.</remarks>
            </summary>
            <param name="vertices">The 2D vertices that define the polygon.</param>
            <param name="localDir">The direction, in local space, in which the support point will be calculated.</param>
            <returns>The support point, in local space.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculatePolygonLocalSupport(Photon.Deterministic.FPVector2*,System.Int32,Photon.Deterministic.FPVector2@)">
            <summary>
            Calculates the local support point of a polygon in a given direction.
            </summary>
            <param name="vertices">An array of vertices that make up the polygon.</param>
            <param name="verticesCount">The number of vertices in the polygon.</param>
            <param name="localDir">The direction for which to find the local support point.</param>
            <returns>The local support point of the polygon in the given direction.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.CalculatePolygonRadius(Photon.Deterministic.FPVector2[])">
            <summary>
            Returns a radius of a centered polygon defined by <paramref name="vertices"/>.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.MoveTowards(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Calculate a position between the points specified by <paramref name="from"/> and <paramref name="to"/>, moving no farther than the distance specified by <paramref name="maxDelta"/>.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="maxDelta"></param>
            <returns></returns>s
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Equality(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns <see langword="true"/> if two vectors are exactly equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Inequality(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Returns <see langword="true"/> if two vectors are not exactly equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_UnaryNegation(Photon.Deterministic.FPVector2)">
            <summary>
            Negates each component of <paramref name="v"/> vector.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Addition(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Subtraction(Photon.Deterministic.FPVector2,Photon.Deterministic.FPVector2)">
            <summary>
            Subtracts <paramref name="b"/> from <paramref name="a"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Multiply(Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Multiplies each component of <paramref name="v"/> times <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Multiply(Photon.Deterministic.FP,Photon.Deterministic.FPVector2)">
            <summary>
            Multiplies each component of <paramref name="v"/> times <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Multiply(Photon.Deterministic.FPVector2,System.Int32)">
            <summary>
            Multiplies each component of <paramref name="v"/> times <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Multiply(System.Int32,Photon.Deterministic.FPVector2)">
            <summary>
            Multiplies each component of <paramref name="v"/> times <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Division(Photon.Deterministic.FPVector2,Photon.Deterministic.FP)">
            <summary>
            Divides each component of <paramref name="v"/> by <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector2.op_Division(Photon.Deterministic.FPVector2,System.Int32)">
            <summary>
            Divides each component of <paramref name="v"/> by <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XXX">
            <summary>
            Returns a new FPVector3 using the X, X and X components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XXY">
            <summary>
            Returns a new FPVector3 using the X, X and Y components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XYX">
            <summary>
            Returns a new FPVector3 using the X, Y and X components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XYY">
            <summary>
            Returns a new FPVector3 using the X, Y and Y components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XX">
            <summary>
            Returns a new FPVector2 using the X and X components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.XY">
            <summary>
            Returns a new FPVector2 using the X and Y components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.YYY">
            <summary>
            Returns a new FPVector3 using the Y, Y and Y components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.YYX">
            <summary>
            Returns a new FPVector3 using the Y, Y and X components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.YXY">
            <summary>
            Returns a new FPVector3 using the Y, X and Y components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.YXX">
            <summary>
            Returns a new FPVector3 using the Y, X and X components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.YY">
            <summary>
            Returns a new FPVector2 using the Y and Y components of this vector.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector2.YX">
            <summary>
            Returns a new FPVector2 using the Y and X components of this vector.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPVector3">
            <summary>
            Represents a 3D Vector
            </summary>
            \ingroup MathAPI
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Normalize(Photon.Deterministic.FPVector3)">
            <summary>
            Normalizes the given vector. If the vector is too short to normalize, <see cref="P:Photon.Deterministic.FPVector3.Zero"/> will be returned.
            </summary>
            <param name="value">The vector which should be normalized.</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Normalize(Photon.Deterministic.FPVector3,Photon.Deterministic.FP@)">
            <summary>
            Normalizes the given vector. If the vector is too short to normalize, <see cref="P:Photon.Deterministic.FPVector3.Zero"/> will be returned.
            </summary>
            <param name="value">The vector which should be normalized.</param>
            <param name="magnitude">The original vector's magnitude.</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="F:Photon.Deterministic.FPVector3.SIZE">
            <summary>
            The size of the vector (3 FP values).
            </summary>
        </member>
        <member name="T:Photon.Deterministic.FPVector3.EqualityComparer">
            <summary>
            Represents an equality comparer for FPVector3 objects.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.FPVector3.X">
            <summary>The X component of the vector.</summary>
        </member>
        <member name="F:Photon.Deterministic.FPVector3.Y">
            <summary>The Y component of the vector.</summary>
        </member>
        <member name="F:Photon.Deterministic.FPVector3.Z">
            <summary>The Z component of the vector.</summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Zero">
            <summary>
            A vector with components (0,0,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Left">
            <summary>
            A vector with components (-1,0,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Right">
            <summary>
            A vector with components (1,0,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Up">
            <summary>
            A vector with components (0,1,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Down">
            <summary>
            A vector with components (0,-1,0);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Back">
            <summary>
            A vector with components (0,0,-1);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Forward">
            <summary>
            A vector with components (0,0,1);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.One">
            <summary>
            A vector with components (1,1,1);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.MinValue">
            <summary>
            A vector with components 
            (FP.MinValue,FP.MinValue,FP.MinValue);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.MaxValue">
            <summary>
            A vector with components 
            (FP.MaxValue,FP.MaxValue,FP.MaxValue);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.UseableMin">
            <summary>
            A vector with components 
            (FP.UseableMin,FP.UseableMin,FP.UseableMin);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.UseableMax">
            <summary>
            A vector with components 
            (FP.UseableMax,FP.UseableMax,FP.UseableMax);
            </summary>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.SqrMagnitude">
            <summary>
            Gets the squared length of the vector.
            </summary>
            <returns>Returns the squared length of the vector.</returns>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Magnitude">
            <summary>
            Gets the length of the vector.
            </summary>
            <returns>Returns the length of the vector.</returns>
        </member>
        <member name="P:Photon.Deterministic.FPVector3.Normalized">
            <summary>
            Gets a normalized version of the vector.
            </summary>
            <returns>Returns a normalized version of the vector.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor initializing a new instance of the structure
            </summary>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
            <param name="z">The Z component of the vector.</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor initializing a new instance of the structure
            </summary>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.#ctor(Photon.Deterministic.FP,Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Constructor initializing a new instance of the structure
            </summary>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
            <param name="z">The Z component of the vector.</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.#ctor(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Constructor initializing a new instance of the structure
            </summary>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.ToString">
            <summary>
            Builds a string from the FPVector3.
            </summary>
            <returns>A string containing all three components.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Equals(System.Object)">
            <summary>
            Tests if an object is equal to this vector.
            </summary>
            <param name="obj">The object to test.</param>
            <returns>Returns <see langword="true"/> if they are euqal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Equals(Photon.Deterministic.FPVector3)">
            <summary>
            Determines whether the current instance is equal to the specified FPVector3.
            </summary>
            <param name="other">The FPVector3 to compare with the current instance.</param>
            <returns>
            <see langword="true"/> if the current instance is equal to the specified FPVector3; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.GetHashCode">
            <summary>
            Gets the hashcode of the vector.
            </summary>
            <returns>Returns the hashcode of the vector.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Abs(Photon.Deterministic.FPVector3)">
            <summary>
            Returns a vector where each component is the absolute value of same component in <paramref name="value"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Lerp(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Linearly interpolates between <paramref name="start"/> and <paramref name="end"/> by <paramref name="t"/>.
            <paramref name="t"/> is clamped to the range [0, 1]
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.LerpUnclamped(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Linearly interpolates between <paramref name="start"/> and <paramref name="end"/> by <paramref name="t"/>.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Slerp(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Spherically interpolates between <paramref name="from"/> and <paramref name="to"/> by <paramref name="t"/>,
            which is clamped to the range [0, 1].
            </summary>
            <remarks>Input vectors are normalized and treated as directions.
            The resultant vector has direction spherically interpolated using the angle and magnitude linearly interpolated between the magnitudes of <paramref name="to"/> and <paramref name="from"/>.</remarks>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.SlerpUnclamped(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Spherically interpolates between <paramref name="from"/> and <paramref name="to"/> by <paramref name="t"/>.
            </summary>
            <remarks>Input vectors are normalized and treated as directions.
            The resultant vector has direction spherically interpolated using the angle and magnitude linearly interpolated between the magnitudes of <paramref name="to"/> and <paramref name="from"/>.</remarks>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Scale(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Multiplies each component of the vector by the same components of the provided vector.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.ClampMagnitude(Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Clamps the magnitude of a vector
            </summary>
            <param name="vector">Vector to clamp</param>
            <param name="maxLength">Max length of the supplied vector</param>
            <returns>The resulting (potentially clamped) vector</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Min(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Gets a vector with the minimum x,y and z values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A vector with the minimum x,y and z values of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Max(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Gets a vector with the maximum x,y and z values of both vectors.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A vector with the maximum x,y and z values of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Distance(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Calculates the distance between two vectors
            </summary>
            <param name="a">First vector</param>
            <param name="b">Second vector</param>
            <returns>The distance between the vectors</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.DistanceSquared(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Calculates the squared distance between two vectors
            </summary>
            <param name="a">First vector</param>
            <param name="b">Second vector</param>
            <returns>The squared distance between the vectors</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Cross(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            The cross product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The cross product of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Dot(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>Returns the dot product of both vectors.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.SignedAngle(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Returns the signed angle in degrees between <paramref name="a"/> and <paramref name="b"/> when rotated around an <paramref name="axis"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Angle(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Returns the angle in degrees between <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.MoveTowards(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Calculate a position between the points specified by <paramref name="from"/> and <paramref name="to"/>, moving no farther than the distance specified by <paramref name="maxDelta"/>.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="maxDelta"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Project(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Projects a vector onto another vector.
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.ProjectOnPlane(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Projects a vector onto a plane defined by a normal orthogonal to the plane.
            </summary>
            <param name="vector"></param>
            <param name="planeNormal"></param>
            <returns>The location of the vector on the plane. </returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Reflect(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Reflects a vector off the plane defined by a normal.
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.Barycentric(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FP@,Photon.Deterministic.FP@,Photon.Deterministic.FP@)">
            <summary>
            Creates barycentric coordinates for a point inside a triangle. This method has precision issues due to multiple dot product in row this marked internal..
            </summary>
            <param name="p">Point of interest in triangle</param>
            <param name="p0">Vertex 1</param>
            <param name="p1">Vertex 2</param>
            <param name="p2">Vertex 3</param>
            <param name="u">Barycentric variable for p0</param>
            <param name="v">Barycentric variable for p1</param>
            <param name="w">Barycentric variable for p2</param>
            <returns><see langword="true"/>, if point is inside the triangle. Out parameter are not set if the point is outside the triangle.</returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Equality(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Returns <see langword="true"/> if two vectors are exactly equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Inequality(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Returns <see langword="true"/> if two vectors are not exactly equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_UnaryNegation(Photon.Deterministic.FPVector3)">
            <summary>
            Negates each component of <paramref name="v"/> vector.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Multiply(Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Multiplies each component of <paramref name="v"/> times <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Multiply(Photon.Deterministic.FP,Photon.Deterministic.FPVector3)">
            <summary>
            Multiplies each component of <paramref name="v"/> times <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Division(Photon.Deterministic.FPVector3,Photon.Deterministic.FP)">
            <summary>
            Divides each component of <paramref name="v"/> by <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Division(Photon.Deterministic.FPVector3,System.Int32)">
            <summary>
            Divides each component of <paramref name="v"/> by <paramref name="s"/>.
            </summary>
            <param name="v"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Subtraction(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Subtracts <paramref name="b"/> from <paramref name="a"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.FPVector3.op_Addition(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.Plane">
            <summary>
            Represents a plane in three-dimensional space.
            </summary>
            <remarks>
            A plane is defined by an origin point and a normal vector, which is perpendicular to the plane.
            The equation of the plane is represented as a mathematical equation: Ax + By + Cz + D = 0,
            where A, B, C, and D are coefficients that define the plane.
            </remarks>
        </member>
        <member name="F:Photon.Deterministic.Plane.equation0">
            <summary>
            Represents the coefficient for a plane.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Plane.equation1">
            <summary>
            Represents the coefficient for a plane.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Plane.equation2">
            <summary>
            Represents the coefficient for a plane.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Plane.equation3">
            <summary>
            Represents the equation coefficient for a plane.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Plane.origin">
            <summary>
            Represents the origin point of a plane in three-dimensional space.
            </summary>
            <remarks>
            The origin point is the starting point or reference point for the plane. It is used to define the position of the plane in space.
            </remarks>
        </member>
        <member name="F:Photon.Deterministic.Plane.normal">
            <summary>
            Represents a normal vector in three-dimensional space.
            </summary>
            <remarks>
            A normal vector is a vector that is perpendicular to a plane.
            In the context of the Plane struct, the normal vector represents the direction that the plane faces.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.Plane.#ctor(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Represents a plane in three-dimensional space defined by an origin point and a normal vector.
            </summary>
            <remarks>
            A plane is typically defined by a point on the plane and a normal vector perpendicular to the plane.
            The equation of the plane is given by: equation0 * x + equation1 * y + equation2 * z + equation3 = 0
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.Plane.#ctor(Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3,Photon.Deterministic.FPVector3)">
            <summary>
            Creates a plane in three-dimensional space.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Plane.IsFrontFacingTo(Photon.Deterministic.FPVector3)">
            <summary>
            Determines whether the plane is front-facing to a given direction.
            </summary>
            <param name="direction">The direction to compare the plane's normal vector to.</param>
            <returns><see langword="true"/> if the plane is front-facing to the direction, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.Plane.SignedDistanceTo(Photon.Deterministic.FPVector3)">
            <summary>
            Returns the signed distance from a point to the plane.
            </summary>
            <param name="point">The point from which to calculate the distance.</param>
            <returns>The signed distance from the point to the plane.</returns>
        </member>
        <member name="T:Photon.Deterministic.NullableFP">
            <summary>
            A serializable equivalent of Nullable&lt;FP&gt;.
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.NullableFP.SIZE">
            <summary>
            Size of the struct in bytes.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.NullableFP._hasValue">
            <summary>
            If 1, then <see cref="F:Photon.Deterministic.NullableFP._value"/> is valid.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.NullableFP._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableFP.HasValue">
            <summary>
            Returns <see langword="true"/> if this nullable has a value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableFP.Value">
            <summary>
            Returns current value.
            </summary>
            <exception cref="T:System.NullReferenceException">If <see cref="P:Photon.Deterministic.NullableFP.HasValue"/> is <see langword="false"/></exception>
        </member>
        <member name="M:Photon.Deterministic.NullableFP.ValueOrDefault(Photon.Deterministic.FP)">
            <summary>
            If <see cref="P:Photon.Deterministic.NullableFP.HasValue"/> is <see langword="true"/>, returns <see cref="P:Photon.Deterministic.NullableFP.Value"/>. Otherwise returns <paramref name="v"/>.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.NullableFP.op_Implicit(Photon.Deterministic.FP)~Photon.Deterministic.NullableFP">
            <summary>
            Converts <paramref name="v"/> to NullableFP.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.NullableFP.Serialize(Photon.Deterministic.NullableFP*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes a NullableFP object using the given serializer.
            </summary>
            <param name="ptr">A pointer to the NullableFP object to be serialized.</param>
            <param name="serializer">The serializer object used for serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.NullableFP.GetHashCode">
            <summary>
            Computes the hash code for the current instance of the NullableFP struct.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="T:Photon.Deterministic.NullableFPVector2">
            <summary>
            A serializable equivalent of Nullable&lt;FPVector2&gt;.
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.NullableFPVector2.SIZE">
            <summary>
            Size of the struct in bytes.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.NullableFPVector2._hasValue">
            <summary>
            If 1, then <see cref="F:Photon.Deterministic.NullableFPVector2._value"/> is valid.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.NullableFPVector2._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableFPVector2.HasValue">
            <summary>
            Returns <see langword="true"/> if this nullable has a value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableFPVector2.Value">
            <summary>
            Returns current value.
            </summary>
            <exception cref="T:System.NullReferenceException">If <see cref="P:Photon.Deterministic.NullableFPVector2.HasValue"/> is <see langword="false"/></exception>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector2.ValueOrDefault(Photon.Deterministic.FPVector2)">
            <summary>
            If <see cref="P:Photon.Deterministic.NullableFPVector2.HasValue"/> is <see langword="true"/>, returns <see cref="P:Photon.Deterministic.NullableFPVector2.Value"/>. Otherwise returns <paramref name="v"/>.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector2.op_Implicit(Photon.Deterministic.FPVector2)~Photon.Deterministic.NullableFPVector2">
            <summary>
            Implicitly converts <paramref name="v"/> to NullableFPVector2.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector2.Serialize(Photon.Deterministic.NullableFPVector2*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes a NullableFPVector2 object using the given IDeterministicFrameSerializer.
            </summary>
            <param name="ptr">A pointer to the NullableFPVector2 object.</param>
            <param name="serializer">The IDeterministicFrameSerializer used for serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector2.GetHashCode">
            <summary>
            Computes the hash code for the current NullableFPVector2 object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="T:Photon.Deterministic.NullableFPVector3">
            <summary>
            A serializable equivalent of Nullable&lt;FPVector3&gt;.
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.NullableFPVector3.SIZE">
            <summary>
            Size of the struct in bytes.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.NullableFPVector3._hasValue">
            <summary>
            If 1, then <see cref="F:Photon.Deterministic.NullableFPVector3._value"/> is valid.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.NullableFPVector3._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableFPVector3.HasValue">
            <summary>
            Returns <see langword="true"/> if this nullable has a value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableFPVector3.Value">
            <summary>
            Returns current value.
            </summary>
            <exception cref="T:System.NullReferenceException">If <see cref="P:Photon.Deterministic.NullableFPVector3.HasValue"/> is <see langword="false"/></exception>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector3.ValueOrDefault(Photon.Deterministic.FPVector3)">
            <summary>
            If <see cref="P:Photon.Deterministic.NullableFPVector3.HasValue"/> is <see langword="true"/>, returns <see cref="P:Photon.Deterministic.NullableFPVector3.Value"/>. Otherwise returns <paramref name="v"/>.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector3.op_Implicit(Photon.Deterministic.FPVector3)~Photon.Deterministic.NullableFPVector3">
            <summary>
            Implicitly converts an FPVector3 to a NullableFPVector3.
            </summary>
            <param name="v">The FPVector3 to convert.</param>
            <returns>A NullableFPVector3 instance with the converted value.</returns>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector3.Serialize(Photon.Deterministic.NullableFPVector3*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serialize the data of a NullableFPVector3 object using the provided serializer.
            </summary>
            <param name="ptr">A pointer to the NullableFPVector3 object to be serialized.</param>
            <param name="serializer">The serializer object used to perform the serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.NullableFPVector3.GetHashCode">
            <summary>
            Gets the hash code of the NullableFPVector3 instance.
            </summary>
            <returns>The hash code of the NullableFPVector3.</returns>
            <remarks>
            If <see cref="P:Photon.Deterministic.NullableFPVector3.HasValue"/> is <see langword="false"/>, the hash code is always 0.
            If <see cref="P:Photon.Deterministic.NullableFPVector3.HasValue"/> is <see langword="true"/>, the hash code is calculated based on the value of <see cref="P:Photon.Deterministic.NullableFPVector3.Value"/>.
            </remarks>
        </member>
        <member name="T:Photon.Deterministic.NullableNonNegativeFP">
            <summary>
            A serializable equivalent of Nullable&lt;FP&gt;.
            </summary>
            \ingroup MathAPI
        </member>
        <member name="F:Photon.Deterministic.NullableNonNegativeFP.SIZE">
            <summary>
            Size of the struct in bytes.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.NullableNonNegativeFP._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableNonNegativeFP.HasValue">
            <summary>
            Returns <see langword="true"/> if this nullable has a value.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.NullableNonNegativeFP.Value">
            <summary>
            Returns current value.
            </summary>
            <exception cref="T:System.NullReferenceException">If <see cref="P:Photon.Deterministic.NullableNonNegativeFP.HasValue"/> is <see langword="false"/></exception>
        </member>
        <member name="M:Photon.Deterministic.NullableNonNegativeFP.ValueOrDefault">
            <summary>
            If <see cref="P:Photon.Deterministic.NullableNonNegativeFP.HasValue"/> is <see langword="true"/>, returns <see cref="P:Photon.Deterministic.NullableNonNegativeFP.Value"/>. Otherwise returns zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.NullableNonNegativeFP.op_Implicit(Photon.Deterministic.FP)~Photon.Deterministic.NullableNonNegativeFP">
            <summary>
            Implicitly converts the specified value of type FP to NullableNonNegativeFP.
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>A NullableNonNegativeFP representing the converted value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the value is less than zero.</exception>
        </member>
        <member name="M:Photon.Deterministic.NullableNonNegativeFP.Serialize(Photon.Deterministic.NullableNonNegativeFP*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serialize a NullableNonNegativeFP pointer using the provided IDeterministicFrameSerializer.
            </summary>
            <param name="ptr">The NullableNonNegativeFP pointer to serialize.</param>
            <param name="serializer">The IDeterministicFrameSerializer used for serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.NullableNonNegativeFP.ToString">
            <summary>
            Returns a string representation of the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.NullableNonNegativeFP.GetHashCode">
            <summary>
            Computes the hash code for the current instance of the FP struct.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Photon.Deterministic.Native">
            <summary>
            Native is a collections of tools that interact with the platform's native code directly
            like memory allocation, copy operations, etc.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Native.Allocator">
            <summary>
            Represents native memory allocations and is used in many places across the engine.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.Dispose">
            <summary>
            Disposes the allocator and logs memory leaks in debug mode.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)">
            <summary>
            Frees memory previously allocated by this allocator.
            </summary>
            <param name="ptr">Pointer to memory allocated with Alloc.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.Alloc(System.Int32)">
            <summary>
            Allocates memory from the unmanaged memory of the process.
            </summary>
            <param name="count">The required number of bytes in memory.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.Alloc(System.Int32,System.Int32)">
            <summary>
            Allocates memory from the unmanaged memory of the process with a desired alignment.
            </summary>
            <param name="count">The required number of bytes in memory.</param>
            <param name="alignment">The byte alignment.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.Clear(System.Void*,System.Int32)">
            <summary>
            Writes the desired number zeroed bytes to the specified memory location.
            </summary>
            <param name="dest">The destination memory.</param>
            <param name="count">The byte count.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.AllocAndClear(System.Int32)">
            <summary>
            Allocate and clear native memory.
            </summary>
            <param name="count">The required number of bytes in memory.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.AllocAndClear(System.Int32,System.Int32)">
            <summary>
            Allocate and clear native memory.
            </summary>
            <param name="count">The required number of bytes in memory.</param>
            <param name="alignment">The byte alignment.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.AllocAndClear``1">
            <summary>
            Allocate and clear native memory for a specific type.
            </summary>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.Alloc``1">
            <summary>
            Allocate native memory for a specific type.
            </summary>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.Expand(System.Void*,System.Int32,System.Int32)">
            <summary>
            Expands the allocated memory to a new size by copying the old contents and freeing the old memory.
            </summary>
            <param name="buffer">The allocated memory.</param>
            <param name="currentSize">The current size.</param>
            <param name="newSize">The new size.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.ExpandArray``1(``0*,System.Int32,System.Int32)">
            <summary>
            Expands the allocated memory of the array of the type to a new size by copying the old contents and freeing the old memory.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="buffer">The allocated memory.</param>
            <param name="currentSize">The current size.</param>
            <param name="newSize">The new size.</param>
            <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Allocator.GetManagedVTable">
            <summary>
            Create a allocation operation table to be passed into native parts of the engine.
            </summary>
            <returns>Allocator table.</returns>
        </member>
        <member name="T:Photon.Deterministic.Native.Utility">
            <summary>
            Represents a collection of memory utility functions that interact with the platform's native code directly.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.Copy(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copies count bytes from the object pointed to by src to the object pointed to by dest.
            </summary>
            <param name="dest">Pointer to the memory location to copy to.</param>
            <param name="src">Pointer to the memory location to copy from.</param>
            <param name="count">Number of bytes to copy.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.Clear(System.Void*,System.Int32)">
            <summary>
            Writes the desired number zeroed bytes to the specified memory location.
            </summary>
            <param name="dest">Pointer to the object to fill.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.Move(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copies count characters from the object pointed to by src to the object pointed to by dest.
            </summary>
            <param name="dest">Pointer to the memory location to copy to.</param>
            <param name="src">Pointer to the memory location to copy from.</param>
            <param name="count">Number of bytes to copy.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.Set(System.Void*,System.Byte,System.Int32)">
            <summary>
            Copies the value into each of the first count characters of the object pointed to by dest.
            </summary>
            <param name="dest">Pinter to the object to fill.</param>
            <param name="value">The byte to write.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.Compare(System.Void*,System.Void*,System.Int32)">
            <summary>
            Compares the first count bytes of these arrays. The comparison is done lexicographically. 
            </summary>
            <param name="ptr1">Pointers to the left hand side memory buffers to compare.</param>
            <param name="ptr2"> Pointers to the right hand side memory buffers to compare.</param>
            <param name="count">Number of bytes to examine.</param>
            <returns>Negative value if the first differing byte in <paramref name="ptr1"/> is less than the corresponding byte in <paramref name="ptr2"/>. 
            0​ if all count bytes of <paramref name="ptr1"/> and <paramref name="ptr2"/> are equal.
            Positive value if the first differing byte in <paramref name="ptr1"/> is greater than the corresponding byte in <paramref name="ptr2"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.CopyArrayWithStride(System.Void*,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies count bytes from the array pointed to by src to the array pointed to by dest.
            <para>Requires the stride of the copy which represents the size of the array type.</para>
            </summary>
            <param name="source">Pointer to the memory location to copy from.</param>
            <param name="sourceIndex">The offset to the source as in number <paramref name="stride"/>.</param>
            <param name="destination">Pointer to the memory location to copy to.</param>
            <param name="destinationIndex">The offset to the destination as in number of <paramref name="stride"/>.</param>
            <param name="count">Number of times to copy <paramref name="stride"/> bytes.</param>
            <param name="stride">The size of the type inside the array in bytes.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.CopyArray``1(``0*,System.Int32,``0*,System.Int32,System.Int32)">
            <summary>
            Copies count bytes from the array pointed to by src to the array pointed to by dest.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="source">Pointer to the memory location to copy from.</param>
            <param name="sourceIndex">The source array offset.</param>
            <param name="destination">Pointer to the memory location to copy to.</param>
            <param name="destinationIndex">The destination array offset.</param>
            <param name="count">The number of array elements to copy.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.ClearFast(System.Void*,System.Int32)">
            <inheritdoc cref="M:Photon.Deterministic.Native.Utility.Clear(System.Void*,System.Int32)"/>
        </member>
        <member name="M:Photon.Deterministic.Native.Utility.CopyFast(System.Void*,System.Void*,System.Int32)">
            <inheritdoc cref="M:Photon.Deterministic.Native.Utility.Copy(System.Void*,System.Void*,System.Int32)"/>
        </member>
        <member name="F:Photon.Deterministic.Native.Utils">
            <summary>
            A static fields that is expected to be set before the engine is initialized.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.RoundUpToAlignment(System.Int32,System.Int32)">
            <summary>
            Rounds the size up to the nearest multiple of the alignment.
            <para>Supports up to alignment 64.</para>
            </summary>
            <param name="size">The size to round.</param>
            <param name="alignment">The alignment to use.</param>
            <returns>The rounded size.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when the alignment is not supported.</exception>
        </member>
        <member name="M:Photon.Deterministic.Native.GetAlignmentForArrayElement(System.Int32)">
            <summary>
            Calculates the alignment for arrays.
            </summary>
            <param name="elementSize">The array element count.</param>
            <returns>8 is the count is larger than 0 and a multiple of 8, otherwise 4.</returns>
        </member>
        <member name="T:Photon.Deterministic.Native.AllocateDelegate">
            <summary>
            An memory delegate used by <see cref="T:Photon.Deterministic.Native.AllocatorVTableManaged"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Native.FreeDelegate">
            <summary>
            An memory delegate used by <see cref="T:Photon.Deterministic.Native.AllocatorVTableManaged"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Native.CopyDelegate">
            <summary>
            An memory delegate used by <see cref="T:Photon.Deterministic.Native.AllocatorVTableManaged"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Native.MoveDelegate">
            <summary>
            An memory delegate used by <see cref="T:Photon.Deterministic.Native.AllocatorVTableManaged"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Native.SetDelegate">
            <summary>
            An memory delegate used by <see cref="T:Photon.Deterministic.Native.AllocatorVTableManaged"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Native.CompareDelegate">
            <summary>
            An memory delegate used by <see cref="T:Photon.Deterministic.Native.AllocatorVTableManaged"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Native.AllocatorVTableManaged">
            <summary>
            A class that wraps memory allocation methods to be used in native code parts of the engine.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Native.AllocatorVTableManaged.Allocate">
            <summary>
            Returns the <see cref="M:Photon.Deterministic.Native.Allocator.Alloc(System.Int32)"/> method.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Native.AllocatorVTableManaged.Free">
            <summary>
            Returns the <see cref="M:Photon.Deterministic.Native.Allocator.Free(System.Void*)"/> method.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Native.AllocatorVTableManaged.Copy">
            <summary>
            Returns the <see cref="M:Photon.Deterministic.Native.Utility.Copy(System.Void*,System.Void*,System.Int32)"/> method.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Native.AllocatorVTableManaged.Move">
            <summary>
            Returns the <see cref="M:Photon.Deterministic.Native.Utility.Move(System.Void*,System.Void*,System.Int32)"/> method.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Native.AllocatorVTableManaged.Set">
            <summary>
            Returns the <see cref="M:Photon.Deterministic.Native.Utility.Set(System.Void*,System.Byte,System.Int32)"/> method.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Native.AllocatorVTableManaged.Compare">
            <summary>
            Returns the <see cref="M:Photon.Deterministic.Native.Utility.Compare(System.Void*,System.Void*,System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.AllocatorVTableManaged.#ctor(Photon.Deterministic.Native.Allocator,Photon.Deterministic.Native.Utility)">
            <summary>
            Create am allocator operations table.
            </summary>
            <param name="alloc">The allocator to use.</param>
            <param name="util">The util methods to use.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.AllocatorVTableManaged.#ctor(Photon.Deterministic.Native.AllocateDelegate,Photon.Deterministic.Native.FreeDelegate,Photon.Deterministic.Native.CopyDelegate,Photon.Deterministic.Native.MoveDelegate,Photon.Deterministic.Native.SetDelegate,Photon.Deterministic.Native.CompareDelegate)">
            <summary>
            Create an allocator operations table.
            </summary>
            <param name="malloc">The explicit Allocate method.</param>
            <param name="free">The explicit Free method.</param>
            <param name="memcpy">The explicit Copy method</param>
            <param name="memmove">The explicit Move method.</param>
            <param name="memset">The explicit Set method.</param>
            <param name="memcmp">The explicit Compare method.</param>
        </member>
        <member name="M:Photon.Deterministic.Native.AllocatorVTableManaged.Marshal">
            <summary>
            Wrap the allocator operations table into a struct to be marshaled to native code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.Native.AllocatorVTable">
            <summary>
            Equal to the <see cref="T:Photon.Deterministic.Native.AllocatorVTableManaged"/> but with marshaled function pointers.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.AllocatorVTable.#ctor(Photon.Deterministic.Native.AllocatorVTableManaged)">
            <summary>
            Create a marshaled allocator operations table.
            </summary>
            <param name="vtable">The source allocation methods.</param>
        </member>
        <member name="T:Photon.Deterministic.Native.LIBCAllocator">
            <summary>
            The libc native allocator implementation.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.LIBCAllocator.Clear(System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.LIBCAllocator.GetManagedVTable">
            <inheritdoc/>
        </member>
        <member name="T:Photon.Deterministic.Native.LIBCUtility">
            <summary>
            The libc native memory utility implementation.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.LIBCUtility.Clear(System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.LIBCUtility.Copy(System.Void*,System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.LIBCUtility.Move(System.Void*,System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.LIBCUtility.Set(System.Void*,System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.LIBCUtility.Compare(System.Void*,System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Photon.Deterministic.Native.MSVCRTAllocator">
            <summary>
            The MSVCRT native allocator implementation.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.MSVCRTAllocator.Clear(System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.MSVCRTAllocator.GetManagedVTable">
            <inheritdoc/>
        </member>
        <member name="T:Photon.Deterministic.Native.MSVCRTUtility">
            <summary>
            The MSVCRT native memory utility implementation.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.MSVCRTUtility.Clear(System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.MSVCRTUtility.Copy(System.Void*,System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.MSVCRTUtility.Move(System.Void*,System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.MSVCRTUtility.Set(System.Void*,System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.MSVCRTUtility.Compare(System.Void*,System.Void*,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Photon.Deterministic.Native.PInvokeAllocator">
            <summary>
            A specific allocator that tracks allocations in Debug mode.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Native.PInvokeAllocator.Alloc(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.PInvokeAllocator.Alloc(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Photon.Deterministic.Native.PInvokeAllocator.Free(System.Void*)">
            <inheritdoc/>
        </member>
        <member name="T:Photon.Deterministic.ChannelTypes">
            <summary>
            The Photon message channels used for different Quantum protocols from server to client.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.ChannelTypes.PROTOCOL">
            <summary>
            Protocol channel.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.ChannelTypes.INPUT">
            <summary>
            Input channel.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.OnEventReceived">
            <summary>
            Delegate for event received notifications.
            </summary>
            <param name="eventCode">Photon message event code</param>
            <param name="data">Message data</param>
            <param name="dataLength">Message length</param>
            <param name="dataContainer">The container of the data to recycle objects, see <see cref="M:Photon.Deterministic.ICommunicator.DisposeEventObject(System.Object)"/></param>
        </member>
        <member name="T:Photon.Deterministic.ICommunicator">
            <summary>
            This interface bridges the Quantum networking layer with the Photon Realtime network libraries.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.ICommunicator.RoundTripTime">
            <summary>
            Returns the round trip time in milliseconds.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.ICommunicator.ActorNumber">
            <summary>
            The Photon Actor number that was assigned to the client.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.ICommunicator.IsConnected">
            <summary>
            A simple indication if the client is connected to the server.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.ICommunicator.Service">
            <summary>
            Service updates the network layer and has to be called frequently to process incoming and outgoing messages.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.ICommunicator.OnDestroy">
            <summary>
            Is called when the Quantum shuts down and the communicator should clean up.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.ICommunicator.OnDestroyAsync">
            <summary>
            Is called the Quantum shuts down asynchronously and the communicator should clean up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.ICommunicator.DisposeEventObject(System.Object)">
            <summary>
            Recycles the event object.
            </summary>
            <param name="obj">dataContainer of <see cref="T:Photon.Deterministic.OnEventReceived"/></param>
        </member>
        <member name="M:Photon.Deterministic.ICommunicator.RaiseEvent(System.Byte,System.Byte[],System.Int32,System.Boolean,System.Int32[])">
            <summary>
            Sends a Quantum message to the server.
            </summary>
            <param name="eventCode">Photon event code</param>
            <param name="message">The message as byte array</param>
            <param name="messageLength">The message length</param>
            <param name="reliable"><see langword="true"/> if the message should be send reliable</param>
            <param name="toPlayers">The recipients of the message, usually [0] for the server.</param>
        </member>
        <member name="M:Photon.Deterministic.ICommunicator.AddEventListener(Photon.Deterministic.OnEventReceived)">
            <summary>
            Quantum network layers require this event listener to be added to receive messages.
            </summary>
            <param name="onEventReceived">The incoming message callback to be called</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicSessionRunnerInitArguments">
            <summary>
            The arguments to initialize a deterministic session runner.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionRunnerInitArguments.LutPath">
            <summary>
            The path to folder that contains the look up tables.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionRunnerInitArguments.AssetDBPath">
            <summary>
            The path to the asset database to load.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionRunnerInitArguments.EmbeddedAssetDBName">
            <summary>
            The name of the embedded asset database to load.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionRunnerInitArguments.AssetSerializer">
            <summary>
            The asset serializer object (IAssetSerializer).
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicSessionRunnerStartArguments">
            <summary>
            The arguments to start a deterministic session runner.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionRunnerStartArguments.InputProvider">
            <summary>
            The input provider used to feed the simulation with player input.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionRunnerStartArguments.SessionConfig">
            <summary>
            The Quantum session config.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionRunnerStartArguments.RuntimeConfig">
            <summary>
            The custom RuntimeConfig used.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicSessionRunner">
            <summary>
            When using server simulation, this interface is used by the Quantum plugin to start and run a simulation.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicSessionRunner.EventDispatcher">
            <summary>
            The event dispatcher that the simulation started with. The type is only known outside of Quantum.Deterministic.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicSessionRunner.CallbackDispatcher">
            <summary>
            The callback dispatcher that the simulation started with. The type is only known outside of Quantum.Deterministic.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicSessionRunner.OnGameResult">
            <summary>
            The callback is called when the simulation emits the GameResult event.
            It is automatically picked up by the server and triggers a webhook.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicSessionRunner.Init(Photon.Deterministic.DeterministicSessionRunnerInitArguments)">
            <summary>
            Init the simulation.
            </summary>
            <param name="args">Initialization arguments</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicSessionRunner.Shutdown">
            <summary>
            Shutdown the simulation.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicSessionRunner.Start(Photon.Deterministic.DeterministicSessionRunnerStartArguments)">
            <summary>
            Start the simulation.
            </summary>
            <param name="args">Start arguments</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicSessionRunner.Service(System.Double)">
            <summary>
            Update the simulation.
            </summary>
            <param name="gameTime">The current game time in seconds</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicSessionRunner.TryCreateSnapshot(System.Int32@,System.Byte[]@)">
            <summary>
            The simulation can return a snapshot for late-joining clients.
            </summary>
            <param name="tick">The tick of the snapshot</param>
            <param name="data">The snapshot data</param>
            <returns><see langword="true"/> if a snapshot was successfully created</returns>
        </member>
        <member name="T:Photon.Deterministic.MessageTypes">
            <summary>
            The Quantum message types.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.MessageTypes.PROTOCOL">
            <summary>
            Protocol message.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.MessageTypes.SIMULATION">
            <summary>
            Simulation message.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.MessageTypes.INPUT">
            <summary>
            Input message.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.MessageTypes.INPUT_DELTA">
            <summary>
            Input delta message.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.RoomProperties">
            <summary>
            Definition of Photon room properties with additional functionality.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.RoomProperties.Start">
            <summary>
            This room property can be controlled through Photon dashboard settings.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Protocol.AddPlayer">
            <summary>
            This messages is send from the client to reserve a player slot.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.AddPlayer.PlayerSlot">
            <summary>
            The player slot (0 when only one local player).
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.AddPlayer.Data">
            <summary>
            Serialized runtime player data.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.AddPlayer.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.AddPlayer.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.AddPlayerFailed">
            <summary>
            This message is sent from the server when the <see cref="T:Photon.Deterministic.Protocol.AddPlayer"/> request failed.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.AddPlayerFailed.PlayerSlot">
            <summary>
            The player slot that was failed to be reserved.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.AddPlayerFailed.Message">
            <summary>
            The debug message.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.AddPlayerFailed.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.AddPlayerFailed.ToString">
            <summary>
            Debug string of the message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.TickChecksum">
            <summary>
            This message contains the client game state checksum for a specific tick.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksum.Tick">
            <summary>
            The tick the checksum was recorded.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksum.Checksum">
            <summary>
            The checksum.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksum.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksum.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.TickChecksumError">
            <summary>
            The message is sent from the server to the client when a checksum error is detected.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksumError.Error">
            <summary>
            The error details.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksumError.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksumError.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump">
            <summary>
            The message is sent from the client to the server to distribute the game state to compare on other clients.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.Frame">
            <summary>
            The tick of the frame dump.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.Block">
            <summary>
            The block number of the encoded snapshot data.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.BlockCount">
            <summary>
            The total chunk count.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.ActorId">
            <summary>
            The actor id of the origin.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.Data">
            <summary>
            The encoded snapshot data.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.Encode(System.Int32,System.Byte[])">
            <summary>
            Encode a snapshot into multiple <see cref="T:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump"/>messages.
            </summary>
            <param name="tick">The tick of the snapshot.</param>
            <param name="dump">The snapshot</param>
            <returns>The resulting message fragments to be send</returns>
        </member>
        <member name="M:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump.Decode(System.Collections.Generic.IEnumerable{Photon.Deterministic.Protocol.TickChecksumErrorFrameDump})">
            <summary>
            Decode multiple <see cref="T:Photon.Deterministic.Protocol.TickChecksumErrorFrameDump"/> messages into a single snapshot.
            </summary>
            <param name="blocks">The messages</param>
            <returns><see langword="true"/> and the assembled snapshot or <see langword="false"/></returns>
            <exception cref="T:System.InvalidOperationException">Is raised when the input messages are incomplete</exception>
        </member>
        <member name="T:Photon.Deterministic.Protocol.ClockCorrect">
            <summary>
            Obsolete protocol message.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Protocol.Command">
            <summary>
            Creates a Quantum command.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.Command.PlayerSlot">
            <summary>
            Index of the local player slot this command is for.
            If this is a sever command it will represent the player.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.Command.PredictedTick">
            <summary>
            The tick candidate to match the local command prediction.
            The actual command can happen later.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.Command.Data">
            <summary>
            Command data.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Command.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Command.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.Disconnect">
            <summary>
            Is sent from the server to gracefully disconnect a client.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.Disconnect.Reason">
            <summary>
            Disconnect reason debug string.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Disconnect.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Disconnect.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.FrameSnapshotRequest">
            <summary>
            The server request a frame snapshot from the client.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.FrameSnapshotRequest.ReferenceTick">
            <summary>
            The tick the snapshot is requested for.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.FrameSnapshotRequest.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.FrameSnapshotRequest.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.FrameSnapshot">
            <summary>
            The client sends a snapshot of the game state to the server.
            The message is send multiple times if the snapshot is too large.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.FrameSnapshot.MaxChunkSize">
            <summary>
            Maximum chunk size.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.FrameSnapshot.Tick">
            <summary>
            The tick of the snapshot.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.FrameSnapshot.TotalSize">
            <summary>
            The total size of the snapshot.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.FrameSnapshot.Last">
            <summary>
            If this message is the last chunk of the snapshot.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.FrameSnapshot.Data">
            <summary>
            The snapshot data chunk.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.FrameSnapshot.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.FrameSnapshot.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="M:Photon.Deterministic.Protocol.FrameSnapshot.Encode(System.Int32,System.Byte[])">
            <summary>
            Encode a snapshot into multiple <see cref="T:Photon.Deterministic.Protocol.FrameSnapshot"/> messages.
            </summary>
            <param name="tick">The tick of the snapshot.</param>
            <param name="data">The snapshot data</param>
            <returns>The messages to send.</returns>
        </member>
        <member name="M:Photon.Deterministic.Protocol.FrameSnapshot.Decode(Photon.Deterministic.Protocol.FrameSnapshot[],System.Byte[]@,System.Int32@)">
            <summary>
            Decode multiple messages into a snapshot.
            </summary>
            <param name="snapshots">The snapshot messages</param>
            <param name="data">The resulting snapshot data</param>
            <param name="tick">The tick of the snapshot</param>
        </member>
        <member name="T:Photon.Deterministic.Protocol.GameResult">
            <summary>
            The client sends this message to report the game result.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.GameResult.MaxSize">
            <summary>
            The maximum size of the game result object.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.GameResult.Data">
            <summary>
            Game result data 
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.GameResult.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="T:Photon.Deterministic.Protocol.Message">
            <summary>
            The base class for Quantum network messages.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Message.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="T:Photon.Deterministic.Protocol.RemovePlayer">
            <summary>
            The client requests to remove a player from the simulation.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.RemovePlayer.PlayerSlot">
            <summary>
            Local player or -1 = All
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.RemovePlayer.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.RemovePlayer.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.RemovePlayerFailed">
            <summary>
            The server reponds to <see cref="T:Photon.Deterministic.Protocol.RemovePlayer"/> with this message if the player could not be removed.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.RemovePlayerFailed.PlayerSlot">
            <summary>
            Player slot failed to remove.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.RemovePlayerFailed.Message">
            <summary>
            Debug message.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.RemovePlayerFailed.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.RemovePlayerFailed.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.RttUpdate">
            <summary>
            This message is sent frequently from the client to the server to synchronize the distributed systems.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.RttUpdate.Rtt">
            <summary>
            The rtt in milliseconds.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.RttUpdate.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.RttUpdate.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.Serializer">
            <summary>
            The Quantum online protocol serializer.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.Serializer.ProtocolVersion">
            <summary>
            The protocol version set internally.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Serializer.#ctor">
            <summary>
            Serializer constructor, registers all messages.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Serializer.ReadNext(Photon.Deterministic.BitStream,Photon.Deterministic.Protocol.Message@)">
            <summary>
            Dispatching of messages.
            </summary>
            <param name="s">Bitstream to read from.</param>
            <param name="msg">Messages being read from the stream</param>
            <returns><see langword="true"/> if all messages have been dispatched</returns>
        </member>
        <member name="M:Photon.Deterministic.Protocol.Serializer.PackMessages(Photon.Deterministic.BitStream,System.Collections.Generic.Queue{Photon.Deterministic.Protocol.Message})">
            <summary>
            Pack messages into a bitstream.
            </summary>
            <param name="stream">Bitstream to write messages to.</param>
            <param name="queue">Queue of messages to process</param>
            <returns><see langword="true"/> when queue is empty</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when the batch message size limit was exceeded</exception>
        </member>
        <member name="T:Photon.Deterministic.Protocol.SimulationStart">
            <summary>
            The server sends the start signal.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.SimulationStart.Reconnect">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.SimulationStart.ServerTime">
            <summary>
            The server time in seconds.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.SimulationStart.WaitingForSnapshot">
            <summary>
            The client is flagged for waiting for a snapshot.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.SimulationStart.RuntimeConfig">
            <summary>
            The runtime config to use.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.SimulationStart.SessionConfig">
            <summary>
            The session config to use.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.SimulationStart.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.SimulationStart.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.SimulationStop">
            <summary>
            The simulation stopped message. Is not used yet.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.SimulationStop.FinalFrame">
            <summary>
            Last tick of the simulation.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.SimulationStop.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.SimulationStop.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.Protocol.StartRequest">
            <summary>
            The client request to start a online simulation session.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.StartRequest.Id">
            <summary>
            The client id.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.StartRequest.ProtocolVersion">
            <summary>
            The Quantum protocol version of the client.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.StartRequest.InitialTick">
            <summary>
            The initial tick to start from. Only used when having a local snapshot ready.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.StartRequest.SessionConfig">
            <summary>
            The clients session config.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.Protocol.StartRequest.RuntimeConfig">
            <summary>
            The clients runtime config.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Protocol.StartRequest.HasLocalSnapshot">
            <summary>
            Returns <see langword="true"/> if the <see cref="F:Photon.Deterministic.Protocol.StartRequest.InitialTick"/> is different from 0.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Protocol.StartRequest.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            The message serialization (writing and reading).
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">The bitstream to write to or read from</param>
        </member>
        <member name="M:Photon.Deterministic.Protocol.StartRequest.ToString">
            <summary>
            Debug string with message content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.ChecksumErrorFrameDump">
            <summary>
            A class that accumulates frame dumps from other clients during a checksum desync.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.ChecksumErrorFrameDump.Frame">
            <summary>
            Gets or sets the frame number.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.ChecksumErrorFrameDump.Blocks">
            <summary>
            Gets or sets the list of tick checksum error frame dumps.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicCommand">
            <summary>
            The base class for deterministic commands.
            Always override  <see cref="M:Photon.Deterministic.DeterministicCommand.Serialize(Photon.Deterministic.BitStream)"/> to add additional data.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicCommand.Pool">
            <summary>
            The command pool that the object is returned to during <see cref="M:Photon.Deterministic.DeterministicCommand.Dispose"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommand.#ctor">
            <summary>
            Empty contructor.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommand.Serialize(Photon.Deterministic.BitStream,Photon.Deterministic.DeterministicCommandSerializer)">
            <summary>
            Serialized the command to and from the bitstream.
            Use the <see cref="M:Photon.Deterministic.DeterministicCommand.Serialize(Photon.Deterministic.BitStream)"/> method to add custom data.
            </summary>
            <param name="stream">Stream</param>
            <param name="cmdSerializer">Serializer</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommand.Serialize(Photon.Deterministic.BitStream)">
            <summary>
            Override this method to add additional data to the command.
            </summary>
            <param name="stream">Stream to write and read from</param>
        </member>
        <member name="P:Photon.Deterministic.DeterministicCommand.CommandType">
            <summary>
            Returns the type of the concrete command class.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommand.GetCommandInstance">
            <summary>
            The object can be used as a <see cref="T:Photon.Deterministic.IDeterministicCommandFactory"/> and it 
            will try to creates an instance of the command using the pool, otherwise it will use reflection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommand.Dispose">
            <summary>
            Disposes the command object and returns it to the pool.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicCommandPool`1">
            <summary>
            Create a deterministic command pool for a specific command type.
            Make sure to reset all command data when reusing the objects.
            </summary>
            <typeparam name="T">Command type</typeparam>
        </member>
        <member name="P:Photon.Deterministic.DeterministicCommandPool`1.CommandType">
            <summary>
            The type of the command that the pool is managing.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandPool`1.GetCommandInstance">
            <summary>
            Creates a new instance of the command and calls <see cref="M:Photon.Deterministic.DeterministicCommandPool`1.Acquire"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandPool`1.Acquire">
            <summary>
            Creates a new command or retrieves one from the pool.
            </summary>
            <returns>Command object</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandPool`1.Release(Photon.Deterministic.DeterministicCommand)">
            <summary>
            Release a command and return it to the pool.
            </summary>
            <param name="cmd">Command instance</param>
            <returns><see langword="true"/> if successfully returned to the pool</returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicCommandSerializer">
            <summary>
            The DeterministicCommandSerializer is used to serialize and de-serialize DeterministicCommands.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicCommandSerializer.CommandSerializerStreamRead">
            <summary>
            The reusable read stream.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicCommandSerializer.CommandSerializerStreamWrite">
            <summary>
            The reuseable write stream.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandSerializer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandSerializer.RegisterFactory(Photon.Deterministic.IDeterministicCommandFactory)">
            <summary>
            Register one command factory.
            </summary>
            <param name="factory">Factory instance</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandSerializer.RegisterFactories(Photon.Deterministic.IDeterministicCommandFactory[])">
            <summary>
            Register a list of command factories.
            </summary>
            <param name="factories">Factory params</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandSerializer.PackNext(Photon.Deterministic.BitStream,Photon.Deterministic.DeterministicCommand)">
            <summary>
            Packing a command into a bitstream.
            </summary>
            <param name="s">Stream</param>
            <param name="cmd">Command object</param>
            <returns><see langword="true"/> if successfully written the command into the stream</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicCommandSerializer.ReadNext(Photon.Deterministic.BitStream,Photon.Deterministic.DeterministicCommand@)">
            <summary>
            Read commands from the bitstream.
            </summary>
            <param name="s">Stream</param>
            <param name="cmd">Command that was read from the stream.</param>
            <returns><see langword="true"/> when a command has successfully been read form the stream.</returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicFrame">
            <summary>
            The base class for the simulation frame. Also referred as rollback-able game state.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrame.DumpFlag_NoHeap">
            <summary>
            This flag controls if the heap data is dumped when calling <see cref="M:Photon.Deterministic.DeterministicFrame.DumpFrame(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrame.RawInputs">
            <summary>
            The raw inputs for the delta compressed input.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrame.Number">
            <summary>
            The frame(/tick) number.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicFrame.IsVerified">
            <summary>
            The frame is verified (all input has been validated by the server).
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.SetRawInputs(System.Int32[],System.Int32)">
            <summary>
            Set the raw inputs for the delta compression.
            </summary>
            <param name="inputs">Inputs data</param>
            <param name="length">Input data length</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.GetRawInputs">
            <summary>
            Get the raw inputs for delta compression.
            </summary>
            <returns>Raw inputs</returns>
        </member>
        <member name="P:Photon.Deterministic.DeterministicFrame.IsPredicted">
            <summary>
            The frame is predicted (input may be incorrect and rolled-back by the server).
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.Init(System.Int32,System.Int32,Photon.Deterministic.Native.Allocator,System.Boolean)">
            <summary>
            Initialize the frame.
            </summary>
            <param name="playerCount">Simulation player count</param>
            <param name="inputSize">Input fixed size</param>
            <param name="allocator">Native allocator</param>
            <param name="resetRawInputs">Restarting a replay requires the raw input to be not reset</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.GetRawRpc(Quantum.PlayerRef)">
            <summary>
            Get the raw RPC data for the player.
            </summary>
            <param name="player">Player</param>
            <returns>Raw RPC data</returns>
        </member>
        <member name="P:Photon.Deterministic.DeterministicFrame.RawInputSize">
            <summary>
            The raw input size.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.GetRawInput(Quantum.PlayerRef)">
            <summary>
            Get the raw input for a player. Result can be casted to simulation specific Input pointer.
            </summary>
            <param name="player">Player</param>
            <returns>Pointer to input memory block</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.GetPlayerInputFlags(Quantum.PlayerRef)">
            <summary>
            Get the player input flags <see cref="T:Photon.Deterministic.DeterministicInputFlags"/>.
            </summary>
            <param name="player">Player</param>
            <returns>Input flags.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.GetPlayerCommand(Quantum.PlayerRef)">
            <summary>
            Get the player command for this frame.
            </summary>
            <param name="player">Player</param>
            <returns>A command if one is available.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.DumpFrame(System.Int32)">
            <summary>
            Dumps the frame with the specified dump flags.
            </summary>
            <param name="dumpFlags">The dump flags.</param>
            <returns>The dumped frame as a string.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.CalculateChecksum">
            <summary>
            Calculates the checksum of the frame.
            </summary>
            <returns>The calculated checksum.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.Free">
            <summary>
            Frees the resources used by the frame.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.Serialize(Photon.Deterministic.DeterministicFrameSerializeMode)">
            <summary>
            Save all frame data.
            </summary>
            <param name="mode">The serialization mode.</param>
            <returns>The serialized frame.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.Deserialize(System.Byte[])">
            <summary>
            Load all frame data from the serialized frame.
            </summary>
            <param name="data">Serialized frame.</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.Copy(Photon.Deterministic.DeterministicFrame)">
            <summary>
            Copy the internal frame data. Is called from <see cref="M:Photon.Deterministic.DeterministicFrame.CopyFrom(Photon.Deterministic.DeterministicFrame)"/>.
            </summary>
            <param name="frame">Frame to copy</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.CopyFrom(Photon.Deterministic.DeterministicFrame)">
            <summary>
            Copies the data from the specified frame to this frame.
            </summary>
            <param name="frame">The frame to copy from.</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.OnPlayerAdded(Photon.Deterministic.DeterministicFrame,Photon.Deterministic.DeterministicSession,System.Int32,System.Int32,Quantum.PlayerRef)">
            <summary>
            Handles the event when a player is added to the session.
            </summary>
            <param name="frame">The frame.</param>
            <param name="session">The session.</param>
            <param name="playerSlot">The player slot.</param>
            <param name="actorNumber">The actor number.</param>
            <param name="player">The player reference.</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrame.OnPlayerRemoved(Photon.Deterministic.DeterministicFrame,Photon.Deterministic.DeterministicSession,Quantum.PlayerRef)">
            <summary>
            Handles the event when a player is removed from the session.
            </summary>
            <param name="frame">The frame.</param>
            <param name="session">The session.</param>
            <param name="player">The player reference.</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicFrameInputTemp">
            <summary>
            A struct that saves input data for a player duplicating internal input data that is not save to use because of recycling.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameInputTemp.Frame">
            <summary>
            The tick of the frame this input belongs to.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameInputTemp.Player">
            <summary>
            The Player that the input belongs to.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameInputTemp.Rpc">
            <summary>
            The RPC data.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameInputTemp.Data">
            <summary>
            The input data.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameInputTemp.DataLength">
            <summary>
            The Data length.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameInputTemp.IsVerified">
            <summary>
            A flag indicating if the data is verified by the server.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameInputTemp.Flags">
            <summary>
            The input flags.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameInputTemp.CloneData">
            <summary>
            Copies the <see cref="F:Photon.Deterministic.DeterministicFrameInputTemp.Data"/> into a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameInputTemp.Verified(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32,Photon.Deterministic.DeterministicInputFlags)">
            <summary>
            Creates a verified input object.
            </summary>
            <param name="frame">Tick of the frame</param>
            <param name="player">The Quantum player this input is for.</param>
            <param name="rpc">The rpc data</param>
            <param name="data">The input data</param>
            <param name="dataLength">The input data length</param>
            <param name="flags">The input flags</param>
            <returns>An instance of DeterministicFrameInputTemp with the Verified toggle enabled.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameInputTemp.Predicted(System.Byte[],System.Int32,Photon.Deterministic.DeterministicInputFlags)">
            <summary>
            Creates a predicted input object for tick 0 and player 0 without rpc data.
            </summary>
            <param name="data">The input data</param>
            <param name="dataLength">The input length</param>
            <param name="flags">The input flags</param>
            <returns>An instance of DeterministicFrameInputTemp with the Verified toggle disabled.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameInputTemp.Predicted(System.Int32,System.Byte[],System.Int32,Photon.Deterministic.DeterministicInputFlags)">
            <summary>
            Creates a predicted input object for tick 0 without rpc data.
            </summary>
            <param name="player">The Quantum player</param>
            <param name="data">The input data</param>
            <param name="dataLength">The input data length</param>
            <param name="flags">The input flags</param>
            <returns>An instance of DeterministicFrameInputTemp with the Verified toggle disabled.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameInputTemp.Predicted(System.Int32,System.Int32,System.Byte[],System.Int32,Photon.Deterministic.DeterministicInputFlags)">
            <summary>
            Creates a predicted input object without rpc data.
            </summary>
            <param name="frame">Tick</param>
            <param name="player">The Quantum player</param>
            <param name="data">The input data</param>
            <param name="dataLength">The input data length</param>
            <param name="flags">The input flags</param>
            <returns>An instance of DeterministicFrameInputTemp with the Verified toggle disabled.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameInputTemp.Predicted(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32,Photon.Deterministic.DeterministicInputFlags)">
            <summary>
            Creates a predicted input object.
            </summary>
            <param name="frame">Tick of the frame</param>
            <param name="player">The Quantum player this input is for.</param>
            <param name="rpc">The rpc data</param>
            <param name="data">The input data</param>
            <param name="dataLength">The input data length</param>
            <param name="flags">The input flags</param>
            <returns>An instance of DeterministicFrameInputTemp with the Verified toggle disabled.</returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicFrameSnapshotBufferFindMode">
            <summary>
            The mode to find a frame in the <see cref="T:Photon.Deterministic.DeterministicFrameRingBuffer"/> to best approximate the desired frame.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameSnapshotBufferFindMode.Equal">
            <summary>
            Will only return the frame if the frame number is exactly the same otherwise null.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameSnapshotBufferFindMode.ClosestLessThanOrEqual">
            <summary>
            Will return a frame that is equal to the desired frame or less.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicFrameSnapshotBufferFindMode.Closest">
            <summary>
            Will return the frame that is closest to the desired frame.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicFrameRingBuffer">
            <summary>
            The frame ring buffer is a utility collection class that stores a fixed number of latest frames in a ring buffer, usually in a certain time interval.
            A use-case for example are instant replays which allow to create a new simulation in the past time of the main simulation.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.#ctor(System.Int32)">
            <summary>
            Create the frame ring buffer with a fixed capacity.
            </summary>
            <param name="capacity">Ring buffer size</param>
            <exception cref="T:System.ArgumentException">Is raised when the capacity is smaller than 1</exception>
        </member>
        <member name="P:Photon.Deterministic.DeterministicFrameRingBuffer.Capacity">
            <summary>
            Returns the capacity of the ring buffer.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicFrameRingBuffer.Count">
            <summary>
            Returns the current count of frames in the ring buffer.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicFrameRingBuffer.Data">
            <summary>
            Returns the internal data array.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicFrameRingBuffer.Item(System.Int32)">
            <summary>
            Access a frame by index. 
            The index is relative to the head of the ring buffer, so index 0 is always the older frame stored.
            </summary>
            <param name="index">Index of the current saves frames.</param>
            <returns>Frame object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when the desired index value is less than 0 or out of bounds <see cref="P:Photon.Deterministic.DeterministicFrameRingBuffer.Count"/></exception>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.Clear">
            <summary>
            Clear all frames in the ring buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.System#IDisposable#Dispose">
            <summary>
            Dispose the collection.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.Find(System.Int32,Photon.Deterministic.DeterministicFrameSnapshotBufferFindMode)">
            <summary>
            Find a frame that matches the desired frame number.
            </summary>
            <param name="frameNumber">The desired frame number</param>
            <param name="findMode">The find mode</param>
            <returns>The best frame relative to the desired frame number or null</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.PushBack(Photon.Deterministic.DeterministicFrame,Photon.Deterministic.IDeterministicGame,System.IDisposable)">
            <summary>
            Add a frame to the collection, the frame object is copied.
            If the collection is full the oldest frame will be overwritten.
            </summary>
            <param name="frame">The frame to save</param>
            <param name="game">Game object</param>
            <param name="context">Context object</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.PushBack(Photon.Deterministic.DeterministicFrame,System.Func{Photon.Deterministic.DeterministicFrame})">
            <summary>
            Add a frame to the collection, the frame object is copied.
            If the collection is full the oldest frame will be overwritten.
            </summary>
            <param name="frame">The frame to save</param>
            <param name="createFrame">A callback to create a copy of the frame</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.PeekBack(System.Int32)">
            <summary>
            Return the frame at the head of the ring buffer.
            </summary>
            <param name="offset">The offset relative to the head</param>
            <returns>Frame object at the position</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when the collection is empty</exception>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when the offset is invalid or out of bounds</exception>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.TryGetCommonSamplingPattern(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
             This method checks if there is a common sampling pattern between two windows of frames by comparing their sampling rates and window sizes.
             If a common pattern is found, it returns <see langword="true"/> and provides the common window size and sampling rate through the output parameters. 
             Otherwise, it returns <see langword="false"/> and sets the output parameters to 0.
            </summary>
            <param name="windowA">Time window a in ticks</param>
            <param name="samplingA">Sampling interval a</param>
            <param name="windowB">Time window b in ticks</param>
            <param name="samplingB">Sampling interval b</param>
            <param name="commonWindow">Common time window</param>
            <param name="commonSampling">Common sample rate</param>
            <returns><see langword="true"/> if a common pattern was found</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicFrameRingBuffer.GetSize(System.Int32,System.Int32)">
            <summary>
            Calculate the required size based for the ring buffer on the time window and sampling rate.
            </summary>
            <param name="window">Time window in ticks</param>
            <param name="samplingRate">Sampling interval</param>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicFrameSerializer">
            <summary>
            The interface of the serializer object used to serialize and deserialize components.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicFrameSerializer.Writing">
            <summary>
            Returns <see langword="true"/> if the serializer is writing.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicFrameSerializer.Reading">
            <summary>
            Returns <see langword="true"/> if the serializer is reading.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicFrameSerializer.Stream">
            <summary>
            The stream used by the serializer.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicPlatformTaskRunner">
            <summary>
            The interface for the task runner used in the Quantum task system.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicPlatformTaskRunner.Schedule(System.Action[])">
            <summary>
            Schedules actions to be executed by the task runner.
            </summary>
            <param name="delegates">Array of actions</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicPlatformTaskRunner.WaitForComplete">
            <summary>
            Wait for the task runner to complete all scheduled actions.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicPlatformTaskRunner.PollForComplete">
            <summary>
            Poll the task runner for completion.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicPlatformInfo">
            <summary>
            Essential platform dependent information and implementations.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicPlatformInfo.Architectures">
            <summary>
            Processor architectures.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Architectures.ARMv7">
            <summary>
            Apple ARMv7 family.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Architectures.ARM64">
            <summary>
            Apple ARM64 family.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Architectures.x86">
            <summary>
            Intel and AMD x86 family.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicPlatformInfo.Runtimes">
            <summary>
            Runtime information.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Runtimes.NetFramework">
            <summary>
            .Net Framework
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Runtimes.NetCore">
            <summary>
            .Net Core
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Runtimes.Mono">
            <summary>
            Unity Mono
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Runtimes.IL2CPP">
            <summary>
            Unity IL2CPP
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicPlatformInfo.RuntimeHosts">
            <summary>
            Runtime host information.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.RuntimeHosts.Unity">
            <summary>
            Unity build
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.RuntimeHosts.UnityEditor">
            <summary>
            Unity Editor
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.RuntimeHosts.PhotonServer">
            <summary>
            PhotonServer
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.RuntimeHosts.NetApplication">
            <summary>
            .Net application
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicPlatformInfo.Platforms">
            <summary>
            Platform information
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.OSX">
            <summary>
            Mac
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.Linux">
            <summary>
            Linux
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.IOS">
            <summary>
            iOS
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.XboxOne">
            <summary>
            Xbox
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.PlayStation4">
            <summary>
            PlayStation
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.Switch">
            <summary>
            Nintendo Switch
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.TVOS">
            <summary>
            Apple T
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platforms.WebGL">
            <summary>
            WebGL
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Architecture">
            <summary>
            The processor architecture.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Platform">
            <summary>
            The OS platform.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.RuntimeHost">
            <summary>
            The runtime host the simulation is started from.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Runtime">
            <summary>
            The runtime information.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.Allocator">
            <summary>
            The native memory allocator.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.CoreCount">
            <summary>
            The number of cores to use.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlatformInfo.TaskRunner">
            <summary>
            The platform dependend Quantum task runner.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlatformInfo.ToString">
            <summary>
            Create a debug string of the content.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicPlayerMap">
            <summary>
            A utility class to collect a list of players and player slots.
            A client can maintain multiple players with individual player slots.
            The player always refers to a global player index that is the same on all clients.
            The player slot is a zero based index counting the number of players that one client controls.
            E.g. a client has two players: PlayerRef 5 and PlayerRef 2, the player slots are 0 and 1.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlayerMap.Players">
            <summary>
            List of all players.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlayerMap.PlayerSlots">
            <summary>
            List of all player slots to iterate over.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlayerMap.PlayerSlotToPlayer">
            <summary>
            Maps each slot to a player to iterate over.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicPlayerMap.PlayerToPlayerSlot">
            <summary>
            Maps each player to a slot.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.#ctor(System.Int32)">
            <summary>
            Create a player map for a given maximum number of players.
            </summary>
            <param name="max">Max players this collection or a client can have.</param>
        </member>
        <member name="P:Photon.Deterministic.DeterministicPlayerMap.Count">
            <summary>
            The number of players in this collection.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicPlayerMap.Available">
            <summary>
            The number of player that can be added to this collection.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicPlayerMap.MaxCount">
            <summary>
            Set or get the max count.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.Has(System.Int32)">
            <summary>
            Check if the given player slot is assigned.
            </summary>
            <param name="slot">Player slot</param>
            <returns><see langword="true"/> if the player slot has been added</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.Has(Quantum.PlayerRef)">
            <summary>
            Check is the given player is assigned.
            </summary>
            <param name="player">Player ref</param>
            <returns><see langword="true"/> if the player has been added</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.SearchSlot(Quantum.PlayerRef)">
            <summary>
            Return the player slot that a player ref was assigned to.
            </summary>
            <param name="player">Player ref</param>
            <returns>The player slot for the player or -1</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.SearchPlayer(System.Int32)">
            <summary>
            Return the player that a player slot was assigned to.
            </summary>
            <param name="slot">Player slot</param>
            <returns>The player or -1</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.Add(System.Int32,Quantum.PlayerRef)">
            <summary>
            Add a player and player slot to the collection.
            Will check if the local player slot is already assigned.
            Will check if max capacity is reached.
            </summary>
            <param name="local">Player slot</param>
            <param name="global">Player ref</param>
            <returns><see langword="true"/> when the player was added</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.Remove(System.Int32)">
            <summary>
            Remove a player slot and its player from the collection.
            </summary>
            <param name="slot">Player slot</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicPlayerMap.Remove(Quantum.PlayerRef)">
            <summary>
            Remove a player ref and its player slot from the collection.
            </summary>
            <param name="player">Player ref</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicProtocolVersions">
            <summary>
            The Quantum protocol versions.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V1_2_0_0">
            <summary>
            1.2.0
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V1_2_1_0">
            <summary>
            1.2.1
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V1_2_2_0">
            <summary>
            1.2.2
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V1_2_3_0">
            <summary>
            1.2.3RC1
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V1_2_3_1">
            <summary>
            1.2.3RC2, 1.2.4B1
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V2_0_0_0">
            <summary>
            1.2.3F3+, 1.2.4B2+ 
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V2_1_0_0">
            <summary>
            2.0.0 Beta+
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V2_2_0_0">
            <summary>
            2.1.0 Alpha+
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersions.V3_0_0_0">
            <summary>
            3.0.0
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicProtocolVersionAttribute">
            <summary>
            The assembly attribute to specify the deterministic protocol version.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicProtocolVersionAttribute.LATEST">
            <summary>
            The latest Quantum protocol version.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicProtocolVersionAttribute.Version">
            <summary>
            Get the assigned version.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicProtocolVersionAttribute.Compatible">
            <summary>
            Return a list of the compatible versions.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicProtocolVersionAttribute.#ctor(System.String,System.String[])">
            <summary>
            Create the attribute with the given version and compatible versions.
            </summary>
            <param name="version">Current version</param>
            <param name="compatible">Backwards compatible versions</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicProtocolVersionAttribute.Get(System.Reflection.Assembly)">
            <summary>
            A helper method to get the attribute from an assembly.
            </summary>
            <param name="asm">Assembly to search for the attribute</param>
            <returns>An instance of the protocol version attribute if found.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicProtocolVersionAttribute.GetEnum(System.String)">
            <summary>
            Convert a string to the protocol version enum.
            </summary>
            <param name="version">Version as string, default format is 1.0.0.0</param>
            <returns></returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicGameMode">
            <summary>
            The Quantum game mode makes a distinction between multiplayer, local, and replay modes.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicGameMode.Multiplayer">
            <summary>
            Multiplayer mode
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicGameMode.Local">
            <summary>
            Offline mode, only running a local simulation.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicGameMode.Replay">
            <summary>
            The replay mode is cost efficient that is used when all inputs are already known. 
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicGameMode.Spectating">
            <summary>
            Obsolete mode
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicSession">
            <summary>
            Represents a Quantum runtime match, holding the references to Game, its Frames (game state) and Simulator, and implements (together with Simulator) the predict/rollback logic, time control and input management.
            Single use, so whenever a Session is shutdown (or disconnected), it can't be reused anymore and a new one must be instantiated.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.MaxVerifiedTicksPerUpdate">
            <summary>
            Limit the maximum number of verified ticks computed per update. Default is int.MaxValue.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.SpectatingOffsetSec">
            <summary>
            Specify the offset in sec that the simulation will run behind in Spectator mode. Value must be negative or 0. Default is -1 sec. 
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.RuntimeConfig">
            <summary>
            Serialized local copy of the game/session custom RuntimeConfig instance (received from the photon server). Since this has been received from server, it's the same in all instances.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.Stats">
            <summary>
            Copy of local runtime stats (stores the last Update values for simulation time, number of frames simulated, etc).
            Used by the QuantumStatsUI to show these in runtime on Unity.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.Game">
            <summary>
            The matching game instance, which holds the Frames (game state) and other accessory logic entry points for a predict/rollback match.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.FramePredicted">
            <summary>
            Quick accessor to the latest locally predicted copy of the game state.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.FramePredictedPrevious">
            <summary>
            Quick accessor to the second latest locally predicted copy of the game state. Used for accurate visual interpolation of transforms (or any other data) between this and the Predicted frame.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.FrameVerified">
            <summary>
            Quick accessor to the forward-only verified data (simulated with confirmed inputs from server in online games). Can be used as source of truth, as this does not include predicted data.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.PreviousUpdateFramePredicted">
            <summary>
            Quick accessor to the latest simulated copy of the Frame that was last-Predicted during the previous main session update. Used to calculate transform view error for smoothed correction.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.SessionConfig">
            <summary>
            Local copy of the server-provided main set of settings, controlling update rate, input adjustment and other important control values. Since this has been received from server, it's the same set of values in all instances.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.AccumulatedTime">
            <summary>
            Remaining accumulated time after all frames forward (both verified and predicted) have been simulated. Usually less than a full delta-time (defined by update rate), and used to compute the interpolation alpha.
            Can be above delta-time if the current session is temporarily lagging behind and can not simulate forward the full prediction (depending on settings).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.InitialTick">
            <summary>
            Normally zero (0) for most game clients. Can be set to a specific value if a local copy for initial frame snapshot data is provided (normally used occasionally in case of quick rejoinining a room).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IntitialFrameData">
            <summary>
            Serialized local copy for initial frame snapshot data, if provided when starting a new session (normally used occasionally in case of quick rejoinining a room).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.TimeScale">
            <summary>
            Current time-dilation delta-time scale. Tf time-dilation settings allow it, server will reduce this to slow down games when some clients have very high ping (reducing the number of predictions). 
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.LocalPlayers">
            <summary>
            The collection of PlayerRefs the local client has control of (sends input for).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.LocalPlayerSlots">
            <summary>
            The collection of local-indexed (0-n) players the local client has control of (sends input for).
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.IsPlayerLocal(Quantum.PlayerRef)">
            <summary>
            Tests whereas this PlayerRef is controlled by this local client/session.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.TryGetLocalPlayer(System.Int32,Quantum.PlayerRef@)">
            <summary>
            Returns <see langword="true"/> and fills in the corresponding global PlayerRef if playerSlot is a valid local slot, for which the session can send input.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.IsPlayerSlotLocal(System.Int32)">
            <summary>
            Checks if this local player slot is currently in use (local slots can be added/removed dynamically).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.PlayerCount">
            <summary>
            Total/max number of PlayerRefs this particular session instance comprises of. This is not the number of connected players, but rather the total number.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.SimulationRate">
            <summary>
            Fixed rate at which the game is simulated (verified frames). Can be set at DeterministicConfig.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.RollbackWindow">
            <summary>
            Max number of frames/ticks the session is allowed to predict. Can be set at DeterministicConfig.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.LocalInputOffset">
            <summary>
            Current value for the dynamically-adjusted input delay (independent for each client). Starts at the initial offset on DeterministicConfig (defaults to 0), and grows with RTT.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.PredictedFrames">
            <summary>
            Stats: Number of predicted frames simulated during the last call to Update().
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.SimulationTimeElasped">
            <summary>
            Stats: Precise time in seconds used by the last call to Update(). Includes all session internal input handling, rollbacks, verified and predicted frames simulation.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.DeltaTime">
            <summary>
            Fixed-point delta-time as defined by DeterministicConfig's UpdateFPS (1/UpdateFPS).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.DeltaTimeDouble">
            <summary>
            Double version of delta-time as defined by DeterministicConfig's UpdateFPS (1/UpdateFPS).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.GameMode">
            <summary>
            Possible modes are online/multiplayer, local or replay.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsLocal">
            <summary>
            <see langword="true"/> for replays and local games (single player or split screen/couch-local). <see langword="false"/> for online games.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsOnline">
            <summary>
            <see langword="true"/> for online games. <see langword="false"/> for replays and local games (single player or split screen/couch-local).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsSpectating">
            <summary>
            Always <see langword="true"/> once session is started. <see langword="false"/> if at least one player is controlled by the local session.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsStalling">
            <summary>
            <see langword="true"/> if simulation is being clamped at max prediction (rollback window). Happens normally when input confirmations from server are disrupted (network loss or very high ping times).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsPaused">
            <summary>
            Temporarily <see langword="true"/> only for a session that has just been started (Start message arrived from server) while waiting for a snapshot to arrive.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsLockstep">
            <summary>
            Legacy mode in which frames are only simulated forward with input delay, and no prediction is ever performed.
            In the past this was the default approach for classic RTS games.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsPredicted">
            <summary>
            <see langword="true"/> when not using legacy lockstep mode. Means frames will be predicted and rolled back.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsReplay">
            <summary>
            <see langword="true"/> when GameMode is Replay (input comes from replay provider).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsInterpolatable">
            <summary>
            If the session provides previous states for interpolation.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsReplayFinished">
            <summary>
            <see langword="true"/> when the final input in the replay stream has been consumed to simulate forward a verified frame.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.IsRunning">
            <summary>
            <see langword="true"/> if local session is started and active.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.ReplayProvider">
            <summary>
            When running replays, input comes from the provider/container.
            Replay input streams can com from file, memory, or a network stream (custom).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.PlatformInfo">
            <summary>
            Cached info about the local device platform (some OS and hardware available specs).
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.CommandSerializer">
            <summary>
            Local instance of specialized serializer that can pack/unpack DeterministicCommands to/from byte[]s.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.Runner">
            <summary>
            Runner is the wrapper for session/game that can be attached to Unity, a .Net console app, or a Quantum Custom Server Plugin. 
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.InputPool">
            <summary>
            Accessor to the pool of input objects.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSession.AllPlayers">
            <summary>
            Create lazily a list of all possible player slots. Used for polling in Replay and Local mode.
            
            Caveat: During DeterministicSession constructor in Local mode PlayerCount is not set, yet.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.#ctor(Photon.Deterministic.DeterministicSessionArgs)">
            <summary>
            Validates a few conditions to assert the session object has coherent settings.
            After construction, session is ready to Join/Start a game.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.GetLocalConfigs(Photon.Deterministic.DeterministicSessionConfig@,System.Byte[]@)">
            <summary>
            Retrieves the local copies of the main configs.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.IsFrameVerified(System.Int32)">
            <summary>
            <see langword="true"/> if the latest confirmed/verified frame is equals or larger then this.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.IsLocalPlayer(Quantum.PlayerRef)">
            <summary>
            <see langword="true"/> if this global PlayerRef is controlled by the local session.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.SendCommand(System.Int32,Photon.Deterministic.DeterministicCommand)">
            <summary>
            Includes command for local prediction, and sends to server (in online games) for confirmation. Fails if this slot is not in use by the local session/client.
            Server protects against all forms of spoofing in online games.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.SetPlayerData(System.Int32,System.Byte[])">
            <summary>
            Previously could be called multiple times to send custom data relative to a player. AddPlayer replaces it, and can only be called once for a specific slot.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.AddPlayer(System.Int32,System.Byte[])">
            <summary>
            Attempts to add a local player slot to have input controlled by the session. Fails is local slot is already used, or if the server/plugin does not have an available PlayerRef.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.RemovePlayer(System.Int32)">
            <summary>
            Attempts to remove a local player slot from the session. Fails is local slot is not currently in use.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.SendGameResult(System.Byte[])">
            <summary>
            Supports sending one game result during one session per client.
            Send this based on timing and simulation data of a verified frame to make results be comparable. 
            Data can be any format but the size must be below <see cref="F:Photon.Deterministic.Protocol.GameResult.MaxSize"/>.
            Zip compress Json for example to reduce the size.
            </summary>
            <param name="data">Serialized game result</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.Join(System.String)">
            <summary>
            Sends the Join protocol message to server/plugin. If successful, a start protocol message (and optionally a snapshot) will be received and the session will start to be updated.
            Sessions are always joined as spectators (starting on Quantum 3.0), and adding local players that can have input polled for is a dynamic operation done after session start.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.ApplyTimeOffset(System.Double)">
            <summary>
            Legacy method to manually add time to the internal Simulator. Not used anymore by the standard SDK, but available to legacy projects.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.Destroy">
            <summary>
            Terminates the game/session, Disposing all buffers and objects.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.Update(System.Nullable{System.Double})">
            <summary>
            Called to move the simulation forward (poll local input, decode confirmed, simulate verified and predicted frames). When passing a delta time, the internal Stopwatch is ignored.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.ResetReplay(Photon.Deterministic.DeterministicFrame)">
            <summary>
            Resets the session to the specified frame for replay purposes.
            </summary>
            <param name="frame">The frame to reset the session to.</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.Resync(Photon.Deterministic.DeterministicFrame)">
            <summary>
            Resynchronizes the session to the specified frame.
            </summary>
            <param name="frame">The frame to reset to.</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSession.Resync(System.Byte[],System.Int32)">
            <summary>
            Resynchronizes the session based on the provided frame data and frame number.
            </summary>
            <param name="frameData">The frame data to use for resynchronization.</param>
            <param name="frameNumber">The frame number to resynchronize with.</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicCommandSendResult">
            <summary>
            The result of sending a deterministic command.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicCommandSendResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicCommandSendResult.FailedIsSpectating">
            <summary>
            Can't send commands when running in spectating mode.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicCommandSendResult.FailedTooBig">
            <summary>
            Command message is too big
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicCommandSendResult.FailedSimulationNotRunning">
            <summary>
            Simulation is not running
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicSessionArgs">
            <summary>
            Represents the starting arguments for a deterministic constructor.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.Mode">
            <summary>
            Gets or sets the game mode.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.SessionConfig">
            <summary>
            Gets or sets the session config.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.Game">
            <summary>
            Gets or sets the deterministic game interface.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.Communicator">
            <summary>
            Gets or sets the communicator interface.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.Replay">
            <summary>
            Gets or sets the input provider.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.PlatformInfo">
            <summary>
            Gets or sets the platform information.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.InitialTick">
            <summary>
            Gets or sets the initial tick.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.DisableInterpolatableStates">
            <summary>
            Gets or sets a value indicating whether to disable interpolated states.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.FrameData">
            <summary>
            Gets or sets the frame data.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionArgs.RuntimeConfig">
            <summary>
            Gets or sets the runtime configuration.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicFrameSerializeMode">
            <summary>
            The serialization mode used for serializing a DeterministicFrame.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicSessionConfig">
            <summary> 
            Parameterize internals of the Deterministic simulation and plugin (the Quantum server component). 
            </summary>
            <para>
            This config file will be synchronized between all clients of one session. Though each player starts its own simulation locally with his own version of the DeterministicConfig the server will distribute the config file instance of the first player that joined the plugin.
            </para>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.PlayerCount">
            <summary> Player count the simulation is initialized for. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.ChecksumCrossPlatformDeterminism">
            <summary> This allows Quantum frame checksumming to be deterministic across different runtime platforms, however it comes with quite a cost and should only be used during debugging. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.LockstepSimulation">
            <summary>
            Legacy feature that forces the Quantum simulation to run in strict lockstep mode, where no rollbacks are performed.
            Most games suitable for lockstep are better off using a soft lockstep instead by introducing enough Min Input Offset
            (recommended at least 10 ticks), while still being able to perform predictions if and when necessary.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputDeltaCompression">
            <summary> If the server should delta-compress inputs against previous tick-input-set (new/experimental). </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.UpdateFPS">
            <summary> How many ticks per second Quantum should execute. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.ChecksumInterval">
            <summary> How often we should send checksums of the frame state to the server for verification (useful during development, set to zero for release). Defined in frames. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.RollbackWindow">
            <summary> How many frames are kept in the local ring buffer on each client. Controls how much Quantum can predict into the future. Not used in lockstep mode. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputHardTolerance">
            <summary> How many frames the server will wait until it expires a frame and replaces all non-received inputs with repeated inputs or <see langword="null"/>'s and sends it out to all players. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputRedundancy">
            <summary> How much staggering the Quantum client should apply to redundant input resends. 1 = Wait one frame, 2 = Wait two frames, etc. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputRepeatMaxDistance">
            <summary> How many frames Quantum will scan for repeatable inputs. 5 = Scan five frames forward and backwards, 10 = Scan ten frames, etc. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.SessionStartTimeout">
            <summary> How long the server will wait to commence the start request that was requested by the first client. This is supposed to give other clients a bit breathing room to join the room. Usually set to 0 or 1. Defined in seconds. Default is 1.</summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.TimeCorrectionRate">
            <summary> How many times per second the server will send out time correction packages to make sure every clients time is synchronized. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.MinTimeCorrectionFrames">
            <summary> How much the local client time must differ with the server time when a time correction package is received for the client to adjust it's local clock. Defined in frames. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.MinOffsetCorrectionDiff">
            <summary> How many frames the current local input delay must diff to the current requested offset for Quantum to update the local input offset. Defined in frames. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.TimeScaleMin">
            <summary> The smallest timescale that can be applied by the server. Defined in percent. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.TimeScalePingMin">
            <summary> The ping value that the server will start lowering the time scale towards 'Time Scale Minimum'. Defined in milliseconds. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.TimeScalePingMax">
            <summary> The ping value that the server will reach the 'Time Scale Minimum' value at, i.e. be at its slowest setting. Defined in milliseconds. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputDelayMin">
            <summary> The minimum input offset a player can have. Defined in ticks.</summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputDelayMax">
            <summary> The maximum input offset a player can have. Defined in ticks.</summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputDelayPingStart">
            <summary> At what ping value that Quantum starts applying input offset. Defined in milliseconds. </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionConfig.InputFixedSize">
            <summary> Fixed input size. </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSessionConfig.ToByteArray(Photon.Deterministic.DeterministicSessionConfig)">
            <summary>
            Converts a DeterministicSessionConfig instance to a byte array.
            </summary>
            <param name="instance">The DeterministicSessionConfig instance to convert.</param>
            <returns>A byte array representing the serialized DeterministicSessionConfig instance.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSessionConfig.FromByteArray(System.Byte[])">
            <summary>
            Converts a byte array to a DeterministicSessionConfig instance.
            </summary>
            <param name="data">The byte array to convert.</param>
            <returns>The deserialized DeterministicSessionConfig instance.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicSessionConfig.Serialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,Photon.Deterministic.DeterministicSessionConfig@)">
            <summary>
            Serializes a DeterministicSessionConfig instance to a BitStream.
            </summary>
            <param name="serializer">The serializer instance to use for serialization.</param>
            <param name="stream">The BitStream to write the serialized data to.</param>
            <param name="config">The DeterministicSessionConfig instance to serialize.</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicSessionState">
            <summary>
            Represents the state of a deterministic session.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionState.Idle">
            <summary>
            Represents the idle state of a deterministic session.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionState.Joined">
            <summary>
            The session is joined.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionState.Running">
            <summary>
            The session is running.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionState.Shutdown">
            <summary>
            The session is shut down.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicSessionState.Destroyed">
            <summary>
            The session is destroyed.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSimulator.FramePredicted">
            <summary>
            Latest locally predicted copy of the game state.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSimulator.FramePredictedPrevious">
            <summary>
            Second latest locally predicted copy of the game state. Used for accurate visual interpolation of transforms (or any other data) between this and the Predicted frame.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicSimulator.FramePreviousUpdatePredicted">
            <summary>
            Latest simulated copy of the Frame that was last-Predicted during the previous main session update. Used to calculate transform view error for smoothed correction.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicChecksumResult">
            <summary>
            The data checksum is used to verify the integrity of the simulation.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicChecksumResult.Client">
            <summary>
            The Photon Actor Id of the client that performed the checksum.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicChecksumResult.Checksum">
            <summary>
            The checksum result.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickChecksumError">
            <summary>
            A collection of checksums when an error was recognized.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickChecksumError.Tick">
            <summary>
            The tick the error was detected.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickChecksumError.Checksums">
            <summary>
            The checksums details for all clients.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickChecksum">
            <summary>
            An object that contains a tick and a checksum.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickChecksum.Tick">
            <summary>
            The tick the checksum was recorded.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickChecksum.Checksum">
            <summary>
            The checksum.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicInputFlags">
            <summary>
            The DeterministicInputFlags are used by Quantum to:
            - detect whether a player is present , i.e.connected, to the simulation;
            - decide how to predict the next tick's input for a given player; and,
            - know whether the input on a verified frame was provided by a client or was replaced by the server.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicInputFlags.Repeatable">
            <summary>
            Tells both the server and other clients to copy this input data into the next tick 
            (on server when replacing input due to timeout, and on other clients for the local prediction algorithm). 
            This can be set by the developer from Unity when injecting player input and should be used on direct-control-like input such as movement. 
            It is not meant for command-like input (e.g. buy item).
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicInputFlags.PlayerNotPresent">
            <summary>
            No client connected for this player index.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicInputFlags.ReplacedByServer">
            <summary>
            The player index is controlled by a client, but the client did not send the input in
            time which resulted in the server repeating or replacing/zeroing out the input.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicInputFlags.Command">
            <summary>
            This input has an additional deterministic command.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickInputSet">
            <summary>
            The complete input set of all players for a single tick.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInputSet.Tick">
            <summary>
            The input set is valid for this tick.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInputSet.Inputs">
            <summary>
            On <see cref="T:Photon.Deterministic.DeterministicTickInput"/> per player.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.InputSetMask">
            <summary>
            The input mask is a utility struct to keep track of which players are included in a set of inputs.
            Max player count supported is 128.
            Internally the mask is split into two ulongs.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.AllPlayersMask">
            <summary>
            Create a mask that includes all players.
            </summary>
            <returns>Resulting mask</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.#ctor(System.Int32)">
            <summary>
            Constructor using a single player index.
            </summary>
            <param name="index">Player index</param>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.#ctor">
            <summary>
            Create an empty mask.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Contains(System.Int32)">
            <summary>
            Check if a player is included in the mask.
            </summary>
            <param name="index">Player index</param>
            <returns><see langword="true"/> if the player is included</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Combine(Photon.Deterministic.InputSetMask)">
            <summary>
            Combine two masks. An enabled player flag takes precedence.
            </summary>
            <param name="other">Other mask</param>
            <returns>A new mask all players flagged.</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Intersects(Photon.Deterministic.InputSetMask)">
            <summary>
            Intersect two masks and return a new mask with the players that are included in both masks.
            </summary>
            <param name="other">Other mask</param>
            <returns>A new mask with players included in both mask</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Inverse">
            <summary>
            Inverse a mask.
            </summary>
            <returns>A new mask with inverted player flags</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Add(System.Int32)">
            <summary>
            Add a player index to the mask.
            </summary>
            <param name="index">Player index</param>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Remove(System.Int32)">
            <summary>
            Remove a player index from the mask.
            </summary>
            <param name="index">Player index</param>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Serialize(Photon.Deterministic.BitStream,System.Int32)">
            <summary>
            Serialize the mask to a bitstream.
            </summary>
            <param name="stream">Stream to write or read from</param>
            <param name="playerLength">The player length to optimize the amount of memory used.</param>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.op_Equality(Photon.Deterministic.InputSetMask,Photon.Deterministic.InputSetMask)">
            <summary>
            Equals operator.
            </summary>
            <param name="mask1">Mask 1</param>
            <param name="mask2">Mask 2</param>
            <returns><see langword="true"/> if both mask are equal</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.op_Inequality(Photon.Deterministic.InputSetMask,Photon.Deterministic.InputSetMask)">
            <summary>
            Un-equals operator.
            </summary>
            <param name="mask1">Mask 1</param>
            <param name="mask2">Mask 2</param>
            <returns><see langword="true"/> if the masks are different</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.Equals(System.Object)">
            <summary>
            Equals method.
            </summary>
            <param name="other">Other mask</param>
            <returns><see langword="true"/> if both masks are equal</returns>
        </member>
        <member name="M:Photon.Deterministic.InputSetMask.GetHashCode">
            <summary>
            Returns a unique hashcode for the mask.
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickInputEncodeHeader">
            <summary>
            Input header information.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInputEncodeHeader.MaxPing">
            <summary>
            The max ping that the server recorded for this client.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInputEncodeHeader.PlayerCount">
            <summary>
            The max player count of the simulation.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInputEncodeHeader.InputFixedSize">
            <summary>
            The input fixed size.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInputEncodeHeader.ServerTime">
            <summary>
            The server time in seconds.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInputEncodeHeader.ServerTimeScale">
            <summary>
            The server time scaling.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInputEncodeHeader.Legacy_Serialize(Photon.Deterministic.BitStream)">
            <summary>
            Legacy serialization method.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInputEncodeHeader.Serialize(Photon.Deterministic.BitStream)">
            <summary>
            Serialize the input header to a bitstream.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickInput">
            <summary>
            The internal input structure for one player and one tick.
            </summary>
            <summary>
            Represents input at a specific tick.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickInput.Pool">
            <summary>
            The input objects are pooled.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.Pool.Acquire">
            <summary>
            Create a new input object from the pool.
            </summary>
            <returns>DeterministicTickInput instance</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.Pool.Release(Photon.Deterministic.DeterministicTickInput)">
            <summary>
            Return the input object to the pool.
            Will reset the object before.
            </summary>
            <param name="input">Input object to be pooled</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickInput.CorruptedException">
            <summary>
            The corrupted exception is thrown when error during the deserialization are detected.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.CorruptedException.#ctor">
            <summary>
            Create a new corrupted exception.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.CorruptedException.#ctor(System.String)">
            <summary>
            Create a new corrupted exception with a message.
            </summary>
            <param name="message">Debug message</param>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.Sent">
            <summary>
            Has this input been sent to the client.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.Tick">
            <summary>
            The tick of this input.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.PlayerIndex">
            <summary>
            This represents the player index when sent from the server.
            Is the player slot on input upstream.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.Rpc">
            <summary>
            Rpc data.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.DataArray">
            <summary>
            Input data.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.DataLength">
            <summary>
            Input data length.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.ReferenceTick">
            <summary>
            Not serialized (for delta decompression only)
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicTickInput.Flags">
            <summary>
            The input flags assigned by the server.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.CopyToDataArray(System.Byte[],System.Int32)">
            <summary>
            Copy the array into the <see cref="F:Photon.Deterministic.DeterministicTickInput.DataArray"/>.
            </summary>
            <param name="array">Source input data array</param>
            <param name="length">Source input data array size</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.SerializeForDecoder(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,Photon.Deterministic.DeterministicTickInputEncodeHeader)">
            <summary>
            Internal method to serialize the input data.
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">Bitstream</param>
            <param name="header">Header to write</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.SerializeForDecoderRPC(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,Photon.Deterministic.DeterministicTickInputEncodeHeader)">
            <summary>
            Read and write rpc data from the input stream.
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">Bitstream</param>
            <param name="header">Header</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.SimpleSerialize(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Internal method to serialize the input data.
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">Bitstream</param>
            <param name="size">Input size</param>
            <param name="ignoreRpc">Ignore rpc</param>
            <param name="includeHeader">Include a header</param>
            <exception cref="T:Photon.Deterministic.DeterministicTickInput.CorruptedException"></exception>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.SimpleDeserializeMultiple(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,System.Collections.Generic.List{Photon.Deterministic.DeterministicTickInput},System.Collections.Generic.Stack{Photon.Deterministic.DeterministicTickInput},System.Int32,System.Boolean)">
            <summary>
            Internal method to deserialized multiple inputs from a bitstream.
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">Bitstream</param>
            <param name="result">Resulting list of inputs</param>
            <param name="pool">Input object pool to use</param>
            <param name="expectedDataLength">Expected input data length to validate, 0 to disable</param>
            <param name="ignoreRpc">Ignore the rpc data</param>
            <exception cref="T:Photon.Deterministic.DeterministicTickInput.CorruptedException">Is raised when the input length mismatches</exception>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.DeserializeMultiple(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,System.Collections.Generic.List{Photon.Deterministic.DeterministicTickInput},System.Collections.Generic.Stack{Photon.Deterministic.DeterministicTickInput},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Internal method to deserialized multiple inputs from a bitstream.
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="stream">Bitstream</param>
            <param name="result">Resulting list of inputs</param>
            <param name="pool">Input object pool to use</param>
            <param name="expectedDataLength">Expected input data length to validate, 0 to disable</param>
            <param name="ignoreRpc">Ignore the rpc data</param>
            <param name="delta">Is input delta compressed</param>
            <exception cref="T:Photon.Deterministic.DeterministicTickInput.CorruptedException">Is raised when the input length mismatches</exception>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>A new cloned instance.</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.ToString">
            <summary>
            Override ToString method to debug output readable class members.
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.Legacy_Serialize_Packed(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,Photon.Deterministic.DeterministicTickInputEncodeHeader)">
            <summary>
            Legacy serialization.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.Legacy_Serialize_Simple(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream)">
            <summary>
            Legacy serialization.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.Legacy_DecodeMultiple_Simple(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,System.Collections.Generic.List{Photon.Deterministic.DeterministicTickInput})">
            <summary>
            Legacy serialization.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInput.Legacy_DecodeMultiple_Packed(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.BitStream,System.Collections.Generic.List{Photon.Deterministic.DeterministicTickInput})">
            <summary>
            Legacy serialization.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.DeterministicTickInputDecoder">
            <summary>
            The decoder helps to deserialize the input from the server.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicTickInputDecoder.FinishedTick">
            <summary>
            The finished tick, everything before is 100% done and cleared.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInputDecoder.#ctor(Photon.Deterministic.Protocol.Serializer,Photon.Deterministic.DeterministicSession,System.Int32)">
            <summary>
            Creates a input decoder.
            </summary>
            <param name="serializer">Quantum protocol serializer</param>
            <param name="session">Deterministic session</param>
            <param name="finishedTick">Finished tick</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInputDecoder.ResetInputState(System.Int32)">
            <summary>
            Sets the finished tick.
            </summary>
            <param name="tick">Finished tick</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicTickInputDecoder.Decode(Photon.Deterministic.BitStream,System.Collections.Generic.List{Photon.Deterministic.DeterministicTickInput})">
            <summary>
            Decodes input from the stream.
            </summary>
            <param name="stream">Bitstream</param>
            <param name="result">Resulting input objects</param>
            <returns>Decoded input header</returns>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicCommandFactory">
            <summary>
            The command factor interface.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicCommandFactory.CommandType">
            <summary>
            The type of commands to create.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicCommandFactory.GetCommandInstance">
            <summary>
            Returns a new instance of the command, may be pooled.
            </summary>
            <returns>Deterministic command of type <see cref="P:Photon.Deterministic.IDeterministicCommandFactory.CommandType"/></returns>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicCommandPool">
            <summary>
            Command pool interface.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicCommandPool.CommandType">
            <summary>
            The type of commands pooled.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicCommandPool.Acquire">
            <summary>
            Get from pool or create a new instance of the <see cref="P:Photon.Deterministic.IDeterministicCommandPool.CommandType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicCommandPool.Release(Photon.Deterministic.DeterministicCommand)">
            <summary>
            Return a command to the pool.
            </summary>
            <param name="cmd">Command to return to the pool.</param>
            <returns><see langword="true"/> if command has been returned to the pool</returns>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicGame">
            <summary>
            The deterministic game interface is the main hub that holds information about the simulation on the Quantum.Deterministic level.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicGame.Session">
            <summary>
            Get the deterministic session.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.GetInputSerializedFixedSize">
            <summary>
            Returns the serialized input size.
            </summary>
            <returns>Serialized input size</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.GetInputInMemorySize">
            <summary>
            Return the in memory input size.
            </summary>
            <returns>Input object size</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.DeserializeInputInto(System.Int32,System.Byte[],System.Byte*,System.Boolean)">
            <summary>
            Asks the game to de-serialize input into the buffers, because it's game specific it cannot be done from here.
            </summary>
            <param name="player">The player the input is for</param>
            <param name="data">The input data</param>
            <param name="buffer">The destination buffer</param>
            <param name="verified">Is the input verified</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnLocalInput(System.Int32,System.Int32)">
            <summary>
            Polls the game for local input.
            </summary>
            <param name="frame">The frame that the input is for</param>
            <param name="playerSlot">The player slot that is polling</param>
            <returns>The polled input</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnSerializedInput(System.Byte*,System.Array)">
            <summary>
            Asks the game to serialize the input, because it's game specific it cannot be done from here.
            </summary>
            <param name="encoded"></param>
            <param name="dst"></param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.CreateFrameContext">
            <summary>
            Creates a frame context in the beginning of the simulation.
            </summary>
            <returns>Frame context.</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.CreateFrame(System.IDisposable)">
            <summary>
            Creates a new frame object using the context.
            </summary>
            <param name="context">Frame context</param>
            <returns>Frame object</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.CreateFrame(System.IDisposable,System.Byte[])">
            <summary>
            Creates a new frame object using the context and external frame data.
            </summary>
            <param name="context">Frame context</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.GetVerifiedFrame(System.Int32)">
            <summary>
            Try to get the verified frame for a given tick from the snapshot buffer.
            </summary>
            <param name="tick">Requested tick</param>
            <returns>The frame object or <see langword="null"/></returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.GetExtraErrorFrameDumpData(Photon.Deterministic.DeterministicFrame)">
            <summary>
            Creates information send to the server when detecting a checksum error.
            </summary>
            <param name="frame">Frame</param>
            <returns>Serialized frame dump context</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnDestroy">
            <summary>
            The callback is called when the simulation is destroyed.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.AssignSession(Photon.Deterministic.DeterministicSession)">
            <summary>
            The <see cref="T:Photon.Deterministic.DeterministicSession"/> creates this reference during its initialization.
            </summary>
            <param name="session">Deterministic session that this game uses</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnGameStart(Photon.Deterministic.DeterministicFrame)">
            <summary>
            The callback is called when the actual simulation starts after the online protocol start sequence was successful.
            </summary>
            <param name="state">Intitial deterministic frame</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnGameResync">
            <summary>
            The callback is called when the game is starting from a snapshot after the snapshot has been received.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnGameEnded">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnSimulate(Photon.Deterministic.DeterministicFrame)">
            <summary>
            The callback is called when any simulation step was executed.
            </summary>
            <param name="state">Frame that was simulated</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnSimulateFinished(Photon.Deterministic.DeterministicFrame)">
            <summary>
            The callback is called after any simulation step was executed and after the <see cref="M:Photon.Deterministic.IDeterministicGame.OnSimulate(Photon.Deterministic.DeterministicFrame)"/> callback.
            </summary>
            <param name="state">Frame that was simulated</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnUpdateDone">
            <summary>
            The callback is called when when the session completed its <see cref="M:Photon.Deterministic.DeterministicSession.Update(System.Nullable{System.Double})"/> loop.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnChecksumError(Photon.Deterministic.DeterministicTickChecksumError,Photon.Deterministic.DeterministicFrame[])">
            <summary>
            The callback is called when a checksum error was detected.
            </summary>
            <param name="error">Checksum error information</param>
            <param name="frames">Contains the verified frame that was failed to validate</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnChecksumErrorFrameDump(System.Int32,System.Int32,Photon.Deterministic.DeterministicSessionConfig,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            The callback is called when the clients receives a frame dump of another client from the server.
            </summary>
            <param name="actorId">The Photon actor id that the dump belongs to</param>
            <param name="frameNumber">The frame number of the dump</param>
            <param name="sessionConfig">The session config</param>
            <param name="runtimeConfig">The runtime config</param>
            <param name="frameData">The frame data</param>
            <param name="extraData">Extra dump meta information</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnInputConfirmed(Photon.Deterministic.DeterministicFrameInputTemp)">
            <summary>
            The callback is called when an input object was confirmed by the server.
            </summary>
            <param name="input">Input object</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnInputSetConfirmed(System.Int32,System.Int32,System.Byte[])">
            <summary>
            The callback is called when an input set (all clients) was confirmed by the server.
            </summary>
            <param name="tick">Tick</param>
            <param name="length">Length of input object array</param>
            <param name="data">Input objects</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnChecksumComputed(System.Int32,System.UInt64)">
            <summary>
            The callback is called when the local checksum was computed.
            </summary>
            <param name="frame">The frame the checksum belongs to</param>
            <param name="checksum">The checksum that will be send to the server</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnSimulationBegin">
            <summary>
            The callback is called before the session computes multiple simulation steps (frames).
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnSimulationEnd">
            <summary>
            The callback is called when multiple simulation steps (frames) were executed.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnPluginDisconnect(System.String)">
            <summary>
            The callback is called when the server plugin disconnected the client.
            </summary>
            <param name="reason">Debug string</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnLocalPlayerAddConfirmed(Photon.Deterministic.DeterministicFrame,System.Int32,Quantum.PlayerRef)">
            <summary>
            The callback is called when the server confirmed the addition of a (local) player.
            </summary>
            <param name="frame">The frame the player has been added</param>
            <param name="playerSlot">The player slot that was used to assign the player</param>
            <param name="player">The player</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnLocalPlayerRemoveConfirmed(Photon.Deterministic.DeterministicFrame,System.Int32,Quantum.PlayerRef)">
            <summary>
            The callback is called when the server confirmed the removal of a (local) player.
            </summary>
            <param name="frame">The frame when the request was confirmed</param>
            <param name="playerSlot">The player slot of the removed player</param>
            <param name="player">The player that was removed</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnLocalPlayerAddFailed(System.Int32,System.String)">
            <summary>
            The callback is called when the server failed to process the add player request.
            </summary>
            <param name="playerSlot">The player slot that was requested</param>
            <param name="message">Debug message</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicGame.OnLocalPlayerRemoveFailed(System.Int32,System.String)">
            <summary>
            The callback is called when the server failed to process the remove player request.
            </summary>
            <param name="playerSlot">The player slot that was tried to remove</param>
            <param name="message">Debug message</param>
        </member>
        <member name="T:Photon.Deterministic.DeterministicInput">
            <summary>
            Obsolete type.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicInput.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="F:Photon.Deterministic.DeterministicInput.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="M:Photon.Deterministic.DeterministicInput.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Photon.Deterministic.DeterministicInput.#ctor(System.Byte[],Photon.Deterministic.DeterministicInputFlags)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicRpcProvider">
            <summary>
            The interface encapsulates managing the Quantum RPCs.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicRpcProvider.GetRpc(System.Int32,System.Int32)">
            <summary>
            Gets the RPC data for the given frame and player.
            </summary>
            <param name="frame">Frame number</param>
            <param name="player">Player</param>
            <returns>The RPC data and a bool representing if the RPC is a command.</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicRpcProvider.AddRpc(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Adds an RPC to the simulation.
            </summary>
            <param name="playerSlot">The local player slot</param>
            <param name="data">The RPC data</param>
            <param name="command">Is the RPC a deterministic command</param>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicInputProvider">
            <summary>
            The interface encapsulates managing the Quantum input.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicInputProvider.CanSimulate(System.Int32)">
            <summary>
            Is all input for this frame available.
            </summary>
            <param name="frame">Frame number</param>
            <returns><see langword="true"/> if all input is available and the simulation can progress</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicInputProvider.GetInput(System.Int32,System.Int32)">
            <summary>
            Get the input for the given frame and player.
            </summary>
            <param name="frame">Frame number</param>
            <param name="playerSlot">Local player slot</param>
            <returns>The input struct for that player that can be inserted into the simulation</returns>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicDeltaCompressedInput">
            <summary>
            The interface encapsulates managing the access to delta compressed input.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicDeltaCompressedInput.GetRawInput(Photon.Deterministic.DeterministicFrame,System.Int32[]@)">
            <summary>
            Raw input as int array is saved on the frame.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicDeltaCompressedInput.ResetInputState(Photon.Deterministic.DeterministicFrame)">
            <summary>
            Reset input state for late-joins and instant replays.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicDeltaCompressedInput.OnInputPollingDone(System.Int32,System.Int32)">
            <summary>
            Timing required for the local input provider to cache the raw input and call OnInputSetConfirmed callback.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicReplayProvider">
            <summary>
            An internal interface to encapsulate managing rpc and input.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.IDeterministicStreamReplayInputProvider">
            <summary>
            The interface to implement streaming input for a Quantum replay session.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.IDeterministicStreamReplayInputProvider.MaxFrame">
            <summary>
            The maximum frame number that the input provider can provide at a given moment.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicStreamReplayInputProvider.BeginReadFrame(System.Int32)">
            <summary>
            Request input for a certain frame.
            </summary>
            <param name="frame">The frame for the requested input</param>
            <returns>The size of the input to be read</returns>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicStreamReplayInputProvider.CompleteReadFrame(System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Read the input data for the frame.
            </summary>
            <param name="frame">The frame to read the input for</param>
            <param name="length">The input length requested in <see cref="M:Photon.Deterministic.IDeterministicStreamReplayInputProvider.BeginReadFrame(System.Int32)"/></param>
            <param name="data">The array to copy input data to</param>
        </member>
        <member name="M:Photon.Deterministic.IDeterministicStreamReplayInputProvider.Reset">
            <summary>
            Resets the input provider when restarting a replay for example. The stream should be reset to the beginning.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.LocalInputProvider.GetRawInput(Photon.Deterministic.DeterministicFrame,System.Int32[]@)">
            <summary>
            This method does a bit more than just provide the raw input to the frame.
            It will use the timing to call OnInputSetConfirmed() to be able to record a DC replay in local game mode.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.LocalInputProvider.OnInputPollingDone(System.Int32,System.Int32)">
            <summary>
            This timing is required, because we need to cache the input for this frame to be used after the simulation (GetRawInput())
            Also, the OnInputSetConfirmed callback needs to be called to be able to recorded DC input replays from a local game.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.LocalInputProvider.GetInput(System.Int32,System.Int32)">
            <summary>
            Input is polled from all local players, we'll save the polled input internally as well to be able to OnInputSetConfirmed (delta compressed replays).
            </summary>
        </member>
        <member name="M:Photon.Deterministic.ReplayInputProvider.EnsureTempBufferSize(System.Byte[]@,System.Int32)">
            <summary>
            Resize temp byte buffer
            </summary>
        </member>
        <member name="M:Photon.Deterministic.ReplayInputProvider.AdvanceCurrentFrame(System.Int32)">
            <summary>
            Advance the current frame to the required tick while reading from the DC input stream. Only moves forward.
            Writes the results into _decodeResult.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.ReplayInputProvider.GetRawInput(Photon.Deterministic.DeterministicFrame,System.Int32[]@)">
            <summary>
            Returns the int input set for a specific frame. This is used by the simulator and it will ask for frames in the past (before _sharedInputFrame).
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Simulator.Timing.OnOff">
            <summary>
            Reduces errors at a fixed rate using an on-off controller.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Simulator.Timing.PID">
            <summary>
            Reduces errors at a variable rate using a PID controller.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.Simulator.Timing.RingBuffer`1">
            <summary>
            <para>
            A circular buffer.
            </para>
            <para>
            Normally, you push to the back and pop from the front.
            When it's full, <c>PushBack</c> will remove from the front and <c>PushFront</c> will remove from the back.
            </para>
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            Returns a new <see cref="T:Photon.Deterministic.Simulator.Timing.RingBuffer`1"/> instance.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Returns a new <see cref="T:Photon.Deterministic.Simulator.Timing.RingBuffer`1"/> instance.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Count">
            <summary>
            The number of items in the buffer.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Capacity">
            <summary>
            The maximum number of items that can be in the buffer.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.RingBuffer`1.IsEmpty">
            <summary>
            <see langword="true"/> if the buffer contains no items.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.RingBuffer`1.IsFull">
            <summary>
            <see langword="true"/> if the buffer contains the maximum number of items.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Item(System.Int32)">
            <summary>
            <para>Indexed access to items in the buffer.</para>
            <para>Indexes follow insertion order, i.e. <c>this[0]</c> returns the front item and <c>this[Count - 1]</c> returns the rear item.</para>
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Front">
            <summary>
            The front item in the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Back">
            <summary>
            The back item in the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.PushBack(`0)">
            <summary>
            Inserts an item at the back of the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.PushFront(`0)">
            <summary>
            Inserts an item at the front of the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.PopBack">
            <summary>
            Removes and returns the item at the back of the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.PopFront">
            <summary>
            Removes and returns the item at the front of the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Clear">
            <summary>
            Removes all items from the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.ToArraySegments">
            <summary>
            Returns an <c>ArraySegment</c> pair, where both segments and the items within them follow insertion order.
            Does not copy.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.ToArray">
            <summary>
            Returns a new array with the buffer's items in insertion order.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate the buffer.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts <c>index</c> into the corresponding index in <c>_buffer</c>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Increment(System.Int32)">
            <summary>
            Increments the provided index variable, wrapping around if necessary.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.RingBuffer`1.Decrement(System.Int32)">
            <summary>
            Decrements the provided index variable, wrapping around if necessary.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Count">
            <summary>
            The number of available samples.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Capacity">
            <summary>
            The maximum number samples that can fit in this series.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.IsFull">
            <summary>
            <see langword="true"/> if the series contains the maximum number of samples.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Latest">
            <summary>
            The most recent sample.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Avg">
            <summary>
            The arithmetic mean of the samples in the series.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Var">
            <summary>
            The variance of the samples in the series.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Dev">
            <summary>
            The standard deviation of the samples in the series.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Min">
            <summary>
            The smallest value in the series.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.Simulator.Timing.TimeSeries.Max">
            <summary>
            The largest value in the series.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.TimeSeries.Smoothed(System.Double)">
            <summary>
            Returns the exponentially-weighted moving average of the series (with smoothing factor <c>alpha</c>).
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.TimeSeries.Add(System.Double)">
            <summary>
            Adds a new sample. If the series is full, the oldest sample will be removed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Photon.Deterministic.Simulator.Timing.TimeSeries.Clear">
            <summary>
            Removes all samples and resets all values.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.BitStream">
            <summary>
            Writes information at the bit level to a byte array.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Position">
            <summary>
            Represents the position of the stream pointer in the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.BitStream.BytesRequired">
            <summary>
            Gets the number of bytes required to represent the current position of the stream pointer in the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
            <remarks>
            This property is calculated based on the current position of the stream pointer in bits and converted to bytes.
            </remarks>
        </member>
        <member name="P:Photon.Deterministic.BitStream.IsEvenBytes">
            <summary>
            Gets a value indicating whether the position of the stream pointer in the <see cref="T:Photon.Deterministic.BitStream"/> is aligned on even bytes.
            </summary>
            <remarks>
            The position of the stream pointer is considered to be aligned on even bytes if the remainder of division by 8 is 0.
            For example, if the value is 16, it is aligned on even bytes, but if the value is 17, it is not aligned on even bytes.
            </remarks>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Capacity">
            <summary>
            Gets the capacity of the BitStream, in bytes.
            </summary>
            <value>
            The capacity of the BitStream, in bytes.
            </value>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Offset">
            <summary>
            Represents the offset in bytes from the beginning of the byte array in the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.BitStream.OffsetBits">
            <summary>
            Represents the offset in bits from the start of the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Done">
            <summary>
            Gets a value indicating whether the stream pointer of the <see cref="T:Photon.Deterministic.BitStream"/> has reached the maximum pointer position.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Overflowing">
            <summary>
            Gets a value indicating whether the stream pointer of the <see cref="T:Photon.Deterministic.BitStream"/> has exceeded the maximum pointer position.
            </summary>
            <remarks>
            The <see cref="P:Photon.Deterministic.BitStream.Overflowing"/> property returns <see langword="true"/> if the stream pointer is greater than the maximum pointer position, indicating that the stream has overflowed.
            </remarks>
        </member>
        <member name="P:Photon.Deterministic.BitStream.DoneOrOverflow">
            <summary>
            Indicates whether a bit stream is done (reached the end) or overflowing.
            </summary>
            <value><see langword="true"/> if the bit stream is done or overflowing; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Writing">
            <summary>
            Represents the property indicating whether writing is enabled in the BitStream.
            </summary>
            <value>
            <see langword="true"/> if writing is enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Reading">
            <summary>
            Gets or sets a value indicating whether the stream is in reading mode.
            </summary>
            <value><see langword="true"/> if the stream is in reading mode; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Photon.Deterministic.BitStream.Data">
            <summary>
            Represents the data buffer used by the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.BitStream.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Photon.Deterministic.BitStream"/> class with a default buffer size of 0.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.BitStream.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of the <see cref="T:Photon.Deterministic.BitStream"/> class with the specified buffer size.
            </summary>
            <param name="size">The size of the internal buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.#ctor(System.Byte[])">
            <summary>
            Constructs a new instance of the <see cref="T:Photon.Deterministic.BitStream"/> class with the specified buffer.
            </summary>
            <param name="arr">The source data buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructs a new instance of the <see cref="T:Photon.Deterministic.BitStream"/> class with the specified buffer and size.
            </summary>
            <param name="arr">The source data buffer.</param>
            <param name="size">The size to use.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of the <see cref="T:Photon.Deterministic.BitStream"/> class with the specified buffer, size, and offset.
            </summary>
            <param name="arr">The source data buffer.</param>
            <param name="size">The size to use.</param>
            <param name="offset">The offset to use.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SetBuffer(System.Byte[])">
            <summary>
            Sets the buffer of the BitStream with the specified byte array.
            </summary>
            <param name="arr">The byte array to set as the buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SetBuffer(System.Byte[],System.Int32)">
            <summary>
            Sets the buffer and size of the BitStream instance.
            </summary>
            <param name="arr">The byte array buffer.</param>
            <param name="size">The size of the buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SetBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the buffer of the BitStream instance.
            </summary>
            <param name="arr">The byte array to set as the buffer for the BitStream.</param>
            <param name="size">The size of the buffer in bytes.</param>
            <param name="offset">The offset in bytes from the start of the buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.RoundToByte">
            <summary>
            Rounds the current position in the stream to the nearest byte boundary and returns the number of bytes written up to that point.
            </summary>
            <returns>The number of bytes written up to the current position in the stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.RoundTo4Bytes">
            <summary>
            Pads the stream with 0s to make it 4-byte exact.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.BitStream.CanWrite">
            <summary>
            Determines whether the BitStream can write one bit.
            </summary>
            <returns><see langword="true"/> if the BitStream can write a bit, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.CanRead">
            <summary>
            Determines if there is at least one bit available to read.
            </summary>
            <returns>
            <see langword="true"/> if there is one bit available to read; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.CanWrite(System.Int32)">
            <summary>
            Determines if the given number of bits can be written to the BitStream without exceeding the buffer size.
            </summary>
            <param name="bits">The number of bits to be written.</param>
            <returns>
            <see langword="true"/> if the given number of bits can be written to the BitStream without exceeding the buffer size;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.CanRead(System.Int32)">
            <summary>
            Determines whether the BitStream can read the specified number of bits.
            </summary>
            <param name="bits">The number of bits to check if can be read.</param>
            <returns><see langword="true"/> if the BitStream can read the specified number of bits, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.CopyFromArray(System.Byte[])">
            <summary>
            Copies data from the input array to the internal buffer.
            </summary>
            <param name="array">The input array to copy data from.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.CopyFromBuffer(System.Byte*,System.Int32)">
            <summary>
            Copies a specified number of bytes from a buffer into the internal buffer of the BitStream.
            </summary>
            <param name="buffer">A pointer to the buffer containing the bytes to be copied.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.BlockCopyToArray(System.Array,System.Int32)">
            <summary>
            Block copy the bitstream buffer into an array.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Reset">
            <summary>
            Resets the BitStream to its initial state.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Reset(System.Int32)">
            <summary>
            Resets the BitStream to its initial state, clearing the data and setting the pointer and maximum pointer values.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ResetFast(System.Int32)">
            <summary>
            Resets the BitStream to a specified byte size.
            </summary>
            <param name="byteSize">The size, in bytes, to reset the BitStream to.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ToArray">
            <summary>
            Copies the data from the BitStream into a new byte array.
            </summary>
            <returns>A new byte array containing the copied data.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteBool(System.Boolean)">
            <summary>
            Writes a boolean value to the bit stream.
            </summary>
            <param name="value">The boolean value to write.</param>
            <returns>The boolean value that was written to the bit stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean value to the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
            <param name="value">The boolean value to write.</param>
            <returns><see langword="true"/> if the value was written successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadBool">
            <summary>
            Reads a boolean value from the current position in the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
            <returns>A boolean value that indicates whether the read value is <see langword="true"/> (1) or <see langword="false"/> (0).</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadBoolean">
            <summary>
            Reads a boolean value from the BitStream.
            </summary>
            <returns>Returns the boolean value read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByte(System.Byte,System.Int32)">
            <summary>
            Writes a byte value to the BitStream with a specified number of bits.
            </summary>
            <param name="value">The byte value to write.</param>
            <param name="bits">The number of bits to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadByte(System.Int32)">
            <summary>
            Reads a byte from the BitStream with the specified number of bits.
            </summary>
            <param name="bits">The number of bits to read the byte.</param>
            <returns>The byte read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte value to the BitStream using 8 bits.
            </summary>
            <param name="value">The byte value to be written.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadByte">
            <summary>
            Reads a byte from the bit stream using the default number of bits (8 bits).
            </summary>
            <returns>The byte read from the bit stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadSByte">
            <summary>
            Reads a signed byte value from the bit stream.
            </summary>
            <returns>
            A signed byte value read from the bit stream.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteSByte(System.SByte)">
            <summary>
            Writes a signed byte value to the bit stream.
            </summary>
            <param name="value">The signed byte value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteUShort(System.UInt16,System.Int32)">
            <summary>
            Writes an unsigned short value to the BitStream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bits">The number of bits to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadUShort(System.Int32)">
            <summary>
            Reads an unsigned short value from the BitStream.
            </summary>
            <param name="bits">The number of bits to read, must be less than or equal to 16.</param>
            <returns>The unsigned short value read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteUShort(System.UInt16)">
            <summary>
            Writes a ushort value to the BitStream.
            </summary>
            <param name="value">The ushort value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadUShort">
            <summary>
            Reads an unsigned short (16 bits) from the BitStream.
            </summary>
            <returns>The value read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteShort(System.Int16,System.Int32)">
            <summary>
            Writes a signed 16-bit integer value to the BitStream with specified number of bits.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bits">The number of bits to write. Must be between 1 and 16, inclusive.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadShort(System.Int32)">
            <summary>
            Reads a short value from the BitStream.
            </summary>
            <param name="bits">The number of bits to read.</param>
            <returns>The short value read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteShort(System.Int16)">
            <summary>
            Writes a short value to the BitStream using the specified number of bits.
            </summary>
            <param name="value">The short value to write.</param>
            <remarks>
            The specified number of bits determines the size of the value that can be written.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadShort">
            <summary>
            Reads a 16-bit integer from the bit stream.
            </summary>
            <returns>The 16-bit integer read from the bit stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteChar(System.Char)">
            <summary>
            Writes a character to the BitStream by converting it to a 16-bit unsigned integer.
            </summary>
            <param name="value">The character to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadChar">
            <summary>
            Reads a character from the BitStream.
            </summary>
            <returns>
            The character read from the BitStream.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteInt64VarLength(System.Int64,System.Int32)">
            <summary>
            Writes a signed 64-bit integer using variable-length encoding to the bit stream.
            </summary>
            <param name="value">The signed 64-bit integer to write.</param>
            <param name="blockSize">The block size for encoding the integer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteInt32VarLength(System.Int32,System.Int32)">
            <summary>
            Writes a variable length int32 value to the BitStream.
            </summary>
            <param name="value">The int32 value to be written.</param>
            <param name="blockSize">The block size to use.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadInt64VarLength(System.Int32)">
            <summary>
            Reads a variable-length 64-bit signed integer from the <see cref="T:Photon.Deterministic.BitStream"/> with the specified block size.
            </summary>
            <param name="blockSize">The block size for reading the variable-length integer.</param>
            <returns>The read 64-bit signed integer.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadInt32VarLength(System.Int32)">
            <summary>
            Reads a variable-length 32-bit integer from the buffer.
            </summary>
            <param name="blockSize">The block size used for encoding the integer.</param>
            <returns>The value of the read integer.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadUInt32VarLength(System.Int32)">
            <summary>
            Reads a variable length unsigned 32-bit integer from the BitStream.
            </summary>
            <param name="blockSize">The size of each block of bits to read.</param>
            <returns>The value of the variable length unsigned 32-bit integer.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadUInt64VarLength(System.Int32)">
            <summary>
            Reads an unsigned 64-bit integer with variable length from the BitStream.
            </summary>
            <param name="blockSize">The number of bits in each block. Must be between 2 and 16 (inclusive).</param>
            <returns>The read value as an unsigned 64-bit integer.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteUInt32VarLength(System.UInt32,System.Int32)">
            <summary>
            Writes a variable-length unsigned 32-bit integer to the BitStream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="blockSize">The number of bits per block. Must be between 2 and 16 (inclusive).</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteUInt64VarLength(System.UInt64,System.Int32)">
            <summary>
            Writes a UInt64 variable-length value to the BitStream using the specified blockSize.
            </summary>
            <param name="value">The UInt64 value to write.</param>
            <param name="blockSize">The size of each block in bits.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteUInt(System.UInt32,System.Int32)">
            <summary>
            Writes an unsigned integer value to the BitStream with the specified number of bits.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bits">The number of bits to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadUInt(System.Int32)">
            <summary>
            Reads an unsigned integer from the <see cref="T:Photon.Deterministic.BitStream"/> with the specified number of bits.
            </summary>
            <param name="bits">The number of bits to read.</param>
            <returns>The unsigned integer read from the <see cref="T:Photon.Deterministic.BitStream"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteUInt(System.UInt32)">
            <summary>
            Writes an unsigned integer value of 32 bits to the bit stream.
            </summary>
            <param name="value">The unsigned integer value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadUInt">
            <summary>
            Reads an unsigned 32-bit integer from the BitStream.
            </summary>
            <returns>The unsigned 32-bit integer read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteInt_Shifted(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an integer value to the BitStream with specified number of bits and a shift value.
            </summary>
            <param name="value">The integer value to be written.</param>
            <param name="bits">The number of bits to use to represent the integer value.</param>
            <param name="shift">The shift value to apply to the integer value before writing.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadInt_Shifted(System.Int32,System.Int32)">
            <summary>
            Reads an integer value shifted by the specified amount of bits from the BitStream.
            </summary>
            <param name="bits">The number of bits to read from the BitStream.</param>
            <param name="shift">The amount of bits to shift the read value by.</param>
            <returns>The integer value read from the BitStream, shifted by the specified amount of bits.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteInt(System.Int32,System.Int32)">
            <summary>
            Writes an integer value to the bitstream using the specified number of bits.
            </summary>
            <param name="value">The integer value to be written to the bitstream.</param>
            <param name="bits">The number of bits to use for writing the integer value.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadInt(System.Int32)">
            <summary>
            Reads an integer value from the bit stream.
            </summary>
            <param name="bits">The number of bits to read.</param>
            <returns>The integer value read from the bit stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteInt(System.Int32)">
            <summary>
            Writes an integer value to the BitStream using a specified number of bits.
            </summary>
            <param name="value">The integer value to write</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadInt">
            <summary>
            Reads an integer value from the bit stream.
            </summary>
            <returns>The integer value read from the bit stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteULong(System.UInt64,System.Int32)">
            <summary>
            Writes an unsigned long value to the bit stream.
            If the number of bits is less than or equal to 32, it writes the lower 32 bits of the value.
            Otherwise, it writes the lower 32 bits first, followed by the remaining bits.
            </summary>
            <param name="value">The value to be written</param>
            <param name="bits">The number of bits to write</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadULong(System.Int32)">
            <summary>
            Reads an unsigned 64-bit integer (ulong) from the BitStream with the specified number of bits.
            If the specified number of bits is less than or equal to 32, it reads an unsigned 32-bit integer (uint) instead.
            </summary>
            <param name="bits">The number of bits to read.</param>
            <returns>The value read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteULong(System.UInt64)">
            <summary>
            Writes an unsigned long value to the bit stream using a specified number of bits.
            </summary>
            <param name="value">The unsigned long value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadULong">
            <summary>
            Reads an unsigned 64-bit integer from the BitStream.
            </summary>
            <returns>The unsigned 64-bit integer read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteLong(System.Int64,System.Int32)">
            <summary>
            Writes a long value to the BitStream with the specified number of bits.
            </summary>
            <param name="value">The long value to write.</param>
            <param name="bits">The number of bits to use for encoding the value.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadLong(System.Int32)">
            <summary>
            Reads a long value from the BitStream with the specified number of bits.
            </summary>
            <param name="bits">The number of bits to read.</param>
            <returns>The long value read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteLong(System.Int64)">
            <summary>
            Writes a long value to the BitStream.
            </summary>
            <param name="value">The long value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadLong">
            <summary>
            Reads a long integer from the BitStream.
            </summary>
            <returns>The long integer value.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFloat(System.Single)">
            <summary>
            Writes a single-precision floating-point value to the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFloat">
            <summary>
            Reads a single-precision floating-point number from the BitStream.
            </summary>
            <returns>The single-precision floating-point number read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteDouble(System.Double)">
            <summary>
            Writes a double value to the bit stream.
            </summary>
            <param name="value">The double value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadDouble">
            <summary>
            Reads a double value from the bit stream.
            </summary>
            <returns>The double value read from the bit stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByteArray(System.Byte[])">
            <summary>
            Writes a byte array to the BitStream.
            </summary>
            <param name="from">The byte array to write</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByteArray(System.Byte[],System.Int32)">
            <summary>
            Writes a byte array to the BitStream starting from a specified offset and writing a specified number of bytes.
            </summary>
            <param name="from">The byte array to write from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte array to the BitStream.
            </summary>
            <param name="from">The byte array to write.</param>
            <param name="offset">The starting index of the byte array to write.</param>
            <param name="count">The number of bytes to write from the byte array.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadByteArray(System.Int32)">
            <summary>
            Reads a byte array from the <see cref="T:Photon.Deterministic.BitStream"/> with the specified size.
            </summary>
            <param name="size">The size of the byte array to read.</param>
            <returns>The byte array read from the <see cref="T:Photon.Deterministic.BitStream"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadByteArray(System.Byte[])">
            <summary>
            Reads a byte array from the <see cref="T:Photon.Deterministic.BitStream"/> object.
            </summary>
            <param name="to">The byte array to read the data into.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadByteArray(System.Byte[],System.Int32)">
            <summary>
            Reads a byte array from the BitStream, starting from the current position.
            </summary>
            <param name="to">The array to read into.</param>
            <param name="count">The number of bytes to read.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="to"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByteArrayLengthPrefixed(System.Byte[])">
            <summary>
            Writes a byte array to the BitStream with a length prefix.
            </summary>
            <param name="array">The byte array to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByteArrayLengthPrefixed(System.Byte[],System.Int32)">
            <summary>
            Writes a byte array to the bit stream in a length-prefixed format.
            </summary>
            <param name="array">The byte array to write.</param>
            <param name="maxLength">The maximum length of the byte array to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadByteArrayLengthPrefixed">
            <summary>
            Reads a byte array from the bit stream that is length prefixed.
            </summary>
            <returns>The byte array read from the bit stream. Returns <see langword="null"/> if the length prefix is <see langword="false"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteString(System.String,System.Text.Encoding)">
            <summary>
            Writes a string value to the BitStream using the specified encoding.
            </summary>
            <param name="value">The string value to write.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteString(System.String)">
            <summary>
            Writes a string to the BitStream using the specified encoding.
            </summary>
            <param name="value">The string to write to the BitStream.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadString(System.Text.Encoding)">
            <summary>
            Reads a string from the bit stream using the specified encoding.
            </summary>
            <param name="encoding">The encoding used to decode the string.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadString">
            <summary>
            Reads a string from the BitStream using the specified encoding.
            </summary>
            <returns>A string value read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteStringGZip(System.String,System.Text.Encoding)">
            <summary>
            Writes a string to the BitStream using GZip compression.
            </summary>
            <param name="value">The string value to write.</param>
            <param name="encoding">The encoding to use when compressing the string.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadStringGZip(System.Text.Encoding)">
            <summary>
            Reads a compressed string from the BitStream using GZip decompression.
            </summary>
            <param name="encoding">The encoding to use for the string.</param>
            <returns>The decompressed string.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteGuid(System.Guid)">
            <summary>
            Writes a Guid to the BitStream.
            </summary>
            <param name="guid">The Guid to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadGuid">
            <summary>
            Reads a Guid from the BitStream by reading 16 bytes and constructing a Guid object.
            </summary>
            <returns>
            The Guid read from the BitStream.
            </returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.InternalWriteByte(System.Byte,System.Int32)">
            <summary>
            Writes a byte value with the specified number of bits to the internal buffer at the current position.
            </summary>
            <param name="value">The byte to write.</param>
            <param name="bits">The number of bits to use for writing the byte.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFP(Photon.Deterministic.FP)">
            <summary>
            Writes the given fixed-point value to the bit stream.
            </summary>
            <param name="fp">The fixed-point value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFP">
            <summary>
            The BitStream class is used for reading and writing data in a binary format.
            </summary>
            <remarks>
            This class provides methods for reading and writing various types of data, including integers, floats, and custom types such as FP (fixed-point), FPVector2, and FPVector3.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteNullableFP(Photon.Deterministic.FP)">
            <summary>
            Writes a nullable fixed-point value to the BitStream.
            </summary>
            <param name="fp">The nullable fixed-point value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPVector2(Photon.Deterministic.FPVector2)">
            <summary>
            Writes an instance of FPVector2 to the BitStream.
            </summary>
            <param name="v">The FPVector2 instance to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPVector2">
            <summary>
            Reads an FPVector2 from the current BitStream.
            </summary>
            <returns>The read FPVector2.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPVector3(Photon.Deterministic.FPVector3)">
            <summary>
            Writes an FPVector3 to the BitStream.
            </summary>
            <param name="v">The FPVector3 value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPVector3">
            <summary>
            Reads a FPVector3 from the BitStream.
            </summary>
            <returns>The read FPVector3.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPQuaternion(Photon.Deterministic.FPQuaternion)">
            <summary>
            Writes a <see cref="T:Photon.Deterministic.FPQuaternion"/> value to the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
            <param name="v">The <see cref="T:Photon.Deterministic.FPQuaternion"/> value to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPQuaternion">
            <summary>
            Reads and returns an instance of FPQuaternion from the current BitStream.
            </summary>
            <returns>The read FPQuaternion.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPMatrix2x2(Photon.Deterministic.FPMatrix2x2)">
            <summary>
            Writes a FPMatrix2x2 to the BitStream.
            </summary>
            <param name="v">The FPMatrix2x2 to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPMatrix2x2">
            <summary>
            Reads a 2x2 matrix of fixed-point numbers from the BitStream.
            </summary>
            <returns>The 2x2 matrix of fixed-point numbers read from the BitStream.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPMatrix3x3(Photon.Deterministic.FPMatrix3x3)">
            <summary>
            Writes a 3x3 matrix of fixed-point numbers to the current instance of the BitStream.
            </summary>
            <param name="v">The FPMatrix3x3 to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPMatrix3x3">
            Reads a 3x3 matrix of fixed-point numbers from the BitStream. <returns>The read 3x3 matrix of fixed-point numbers.</returns>
            /
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPMatrix4x4(Photon.Deterministic.FPMatrix4x4)">
            <summary>
            Writes a 4x4 matrix of Fixed Point (FP) values to the bit stream.
            </summary>
            <param name="v">The 4x4 matrix of FP values to be written.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPMatrix4x4">
            <summary>
            Reads a 4x4 matrix of Fixed Point numbers from the BitStream.
            </summary>
            <returns>The read <see cref="T:Photon.Deterministic.FPMatrix4x4"/> value.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPBounds2(Photon.Deterministic.FPBounds2)">
            <summary>
            Writes an instance of <see cref="T:Photon.Deterministic.FPBounds2"/> to the current <see cref="T:Photon.Deterministic.BitStream"/> object.
            </summary>
            <param name="v">The <see cref="T:Photon.Deterministic.FPBounds2"/> instance to write.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPBounds2">
            <summary>
            Reads an instance of <see cref="T:Photon.Deterministic.FPBounds2"/> from the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
            <returns>The read <see cref="T:Photon.Deterministic.FPBounds2"/>.</returns>
            <remarks>
            The method reads two instances of <see cref="T:Photon.Deterministic.FPVector2"/> from the
            <see cref="T:Photon.Deterministic.BitStream"/> and assigns them to the corresponding fields of <see cref="T:Photon.Deterministic.FPBounds2"/>.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteFPBounds3(Photon.Deterministic.FPBounds3)">
            <summary>
            Writes the FPBounds3 structure to the BitStream.
            </summary>
            <param name="v">The FPBounds3 structure to be written.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.ReadFPBounds3">
            <summary>
            Reads a <see cref="T:Photon.Deterministic.FPBounds3"/> structure from the <see cref="T:Photon.Deterministic.BitStream"/>.
            </summary>
            <returns>The <see cref="T:Photon.Deterministic.FPBounds3"/> structure read from the <see cref="T:Photon.Deterministic.BitStream"/>.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.WriteByteAt(System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            Writes a byte value at the specified position in a byte array, considering the number of bits to be written for the value.
            </summary>
            <param name="data">The byte array in which the value will be written.</param>
            <param name="ptr">The position in the byte array to write the value.</param>
            <param name="bits">The number of bits to be written for the value.</param>
            <param name="value">The byte value to be written.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.InternalReadByte(System.Int32)">
            <summary>
            Reads a byte from the internal buffer with the specified number of bits.
            </summary>
            <param name="bits">The number of bits to read.</param>
            <returns>The byte value read from the internal buffer.</returns>
        </member>
        <member name="T:Photon.Deterministic.BitStream.ArrayElementSerializer`1">
            <summary>
            Represents a delegate for serializing an array element.
            </summary>
            <typeparam name="T">Type of the array element.</typeparam>
            <param name="element">Reference to the array element.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Condition(System.Boolean)">
            <summary>
            Serializes or deserializes a condition value.
            </summary>
            <param name="condition">The condition value to serialize or deserialize.</param>
            <returns>The serialized or deserialized condition value.</returns>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.String@)">
            <summary>
            Serializes or deserializes a string value.
            </summary>
            <param name="value">The string value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Boolean@)">
            <summary>
            Serializes or deserializes a boolean value.
            </summary>
            <param name="value">The boolean value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Single@)">
            <summary>
            Serializes or deserializes a string value.
            </summary>
            <param name="value">The string value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Double@)">
            <summary>
            Serializes or deserializes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int64@)">
            <summary>
            Serializes or deserializes a 64-bit signed integer value.
            </summary>
            <param name="value">The 64-bit signed integer value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt64@)">
            <summary>
            Serializes or deserializes a UInt64 value.
            </summary>
            <param name="value">The UInt64 value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt16@)">
            <summary>
            Serializes or deserializes a ushort (UInt16) value.
            </summary>
            <param name="value">The value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(Photon.Deterministic.FP@)">
            <summary>
            Serializes or deserializes an FP value.
            </summary>
            <param name="value">The FP value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(Photon.Deterministic.FPVector2@)">
            <summary>
            Serializes or deserializes a <see cref="T:Photon.Deterministic.FPVector2"/> value.
            </summary>
            <param name="value">The <see cref="T:Photon.Deterministic.FPVector2"/> value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(Photon.Deterministic.FPVector3@)">
            <summary>
            Serializes or deserializes a FPVector3 value.
            </summary>
            <param name="value">The FPVector3 value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(Photon.Deterministic.FPQuaternion@)">
            <summary>
            Serializes or deserializes an FPQuaternion value.
            </summary>
            <param name="value">The FPQuaternion value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Byte@)">
            <summary>
            Serializes or deserializes a Byte value.
            </summary>
            <param name="value">The value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt32@)">
            <summary>
            Serializes or deserializes a string value.
            </summary>
            <param name="value">The string value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt32@,System.Int32)">
            <summary>
            Serializes or deserializes a given uint value.
            </summary>
            <param name="value">The value to serialize or deserialize.</param>
            <param name="bits">The number of bits to use for serialization or deserialization.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt64@,System.Int32)">
            <summary>
            Serializes or deserializes a ulong value with a specified number of bits.
            </summary>
            <param name="value">The ulong value to serialize or deserialize.</param>
            <param name="bits">The number of bits to use for serialization or deserialization.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int32@)">
            <summary>
            Serializes or deserializes a value of type int.
            </summary>
            <param name="value">The value of type int to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int32@,System.Int32)">
            <summary>
            Serializes or deserializes a value of type int with the specified number of bits.
            </summary>
            <param name="value">The int value to serialize or deserialize.</param>
            <param name="bits">The number of bits used to represent the int value.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int32[]@)">
            <summary>
            Serializes or deserializes an array of Int32 values.
            </summary>
            <param name="value">The array of Int32 values to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Byte[]@)">
            <summary>
            Serializes or deserializes a byte array.
            </summary>
            <param name="value">The byte array to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeAsByteArray(Photon.Deterministic.BitStream)">
            <summary>
            Serializes the given BitStream as a byte array.
            </summary>
            <param name="otherStream">The BitStream to be serialized.</param>
            <exception cref="T:System.NotImplementedException">Thrown if the otherStream's Data array is <see langword="null"/>.</exception>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Byte[]@,System.Int32@)">
            <summary>
            Serializes or deserializes an array of bytes with a variable length.
            </summary>
            <param name="array">The array to serialize or deserialize.</param>
            <param name="length">The length of the array.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Byte[]@,System.Int32)">
            <summary>
            Serializes or deserializes a fixed-sized byte array.
            </summary>
            <param name="value">The byte array to serialize or deserialize.</param>
            <param name="fixedSize">The fixed size of the byte array.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            Serializes or deserializes a byte array with a fixed size.
            </summary>
            <param name="array">The byte array to serialize or deserialize.</param>
            <param name="length">The length of the byte array.</param>
            <param name="fixedSize">The fixed size of the byte array.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeArrayLength``1(``0[]@)">
            <summary>
            Serializes or deserializes the length of a generic array.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeArray``1(``0[]@,Photon.Deterministic.BitStream.ArrayElementSerializer{``0})">
            <summary>
            Serializes or deserializes an array using a custom serializer.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array to serialize or deserialize.</param>
            <param name="serializer">The custom serializer for the array elements.</param>
            <remarks>
            If write mode is enabled, the method serializes the length of the array, followed by each element of the array using the provided serializer.
            If write mode is disabled, the method deserializes the length of the array, creates a new array of the appropriate length,
            and populates the new array by deserializing each array element using the provided serializer.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Byte*)">
            <summary>
            Serializes or deserializes a byte value.
            </summary>
            <param name="v">The byte value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.SByte*)">
            <summary>
            Serializes or deserializes a value.
            </summary>
            <param name="v">The value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int16*)">
            <summary>
            Serializes or deserializes a short value.
            </summary>
            <param name="v">Pointer to the short value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt16*)">
            <summary>
            Serializes or deserializes a ushort value.
            </summary>
            <param name="v">The ushort value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int32*)">
            <summary>
            Serializes or deserializes a value of type int*.
            </summary>
            <param name="v">The pointer to the int value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt32*)">
            <summary>
            Serializes or deserializes a pointer to an unsigned integer.
            </summary>
            <param name="v">The pointer to an unsigned integer to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int64*)">
            <summary>
            Serializes or deserializes a long value.
            </summary>
            <param name="v">A pointer to the long value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt64*)">
            <summary>
            Serializes or deserializes the value pointed to by a ulong pointer.
            </summary>
            <param name="v">The ulong pointer to the value to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.UInt32*,System.Int32)">
            <summary>
            Serializes or deserializes a string value.
            </summary>
            <param name="v">The string value to serialize or deserialize.</param>
            <param name="bits">The amount of bits to serialize or deserialize.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.Serialize(System.Int32*,System.Int32)">
            <summary>
            Serializes or deserializes a value.
            </summary>
            <param name="v">The value to serialize or deserialize.</param>
            <param name="bits">The number of bits to use for serialization.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.Byte*,System.Int32)">
            <summary>
            Serializes or deserializes a buffer of bytes.
            </summary>
            <param name="buffer">A pointer to the buffer of bytes to serialize or deserialize.</param>
            <param name="length">The length of the buffer.</param>
            <remarks>
            If in write mode, the method writes each byte from the buffer to the stream.
            If in read mode, the method reads each byte from the stream and stores it in the buffer.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.SByte*,System.Int32)">
            <summary>
            Serializes or deserializes a buffer of signed bytes.
            </summary>
            <param name="buffer">The buffer of signed bytes to serialize or deserialize.</param>
            <param name="length">The length of the buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.Int16*,System.Int32)">
            <summary>
            Serializes or deserializes a buffer of type `short`.
            </summary>
            <param name="buffer">The buffer to serialize or deserialize.</param>
            <param name="length">The length of the buffer.</param>
            <remarks>
            If `_write` is <see langword="true"/>, the method writes each element of the buffer to the bit stream.
            If `_write` is <see langword="false"/>, the method reads each element of the buffer from the bit stream.
            </remarks>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.UInt16*,System.Int32)">
            <summary>
            Serializes or deserializes a buffer of unsigned shorts.
            </summary>
            <param name="buffer">The buffer of unsigned shorts to serialize or deserialize.</param>
            <param name="length">The length of the buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.Int32*,System.Int32)">
            <summary>
            Serializes or deserializes a buffer of integers.
            </summary>
            <param name="buffer">The buffer of integers to serialize or deserialize.</param>
            <param name="length">The length of the buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.UInt32*,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.Int64*,System.Int32)">
            <summary>
            Serializes or deserializes a buffer of long values.
            </summary>
            <param name="buffer">The buffer of long values to serialize or deserialize.</param>
            <param name="length">The length of the buffer.</param>
        </member>
        <member name="M:Photon.Deterministic.BitStream.SerializeBuffer(System.UInt64*,System.Int32)">
            <summary>
            Serializes or deserializes a buffer of ulong values.
            </summary>
            <param name="buffer">A pointer to the buffer to serialize or deserialize.</param>
            <param name="length">The length of the buffer.</param>
        </member>
        <member name="T:Photon.Deterministic.ByteUtils">
            <summary>
            Utility class for working with bytes.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.ToByteArray(System.Byte*,System.Int32)">
            <summary>
            Convert a pointer to a byte array.
            </summary>
            <param name="ptr">The pointer to convert.</param>
            <param name="length">The length of the byte array.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.MergeByteBlocks(System.Byte[][])">
            <summary>
            Merges multiple byte blocks into a single byte array.
            </summary>
            <param name="blocks">The byte blocks to merge.</param>
            <returns>The merged byte array.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.AddValueBlock(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Adds a value block to a byte array.
            </summary>
            <param name="value">The value to add to the byte array.</param>
            <param name="buffer">The byte array to add the value block to.</param>
            <param name="offset">The offset in the byte array to start adding the value block.</param>
            <returns>The new offset in the byte array after adding the value block.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.AddValueBlock(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Adds a value block to the specified byte array at the given offset.
            </summary>
            <param name="value">The value to add to the byte array.</param>
            <param name="buffer">The byte array.</param>
            <param name="offset">The offset at which to add the value block.</param>
            <returns>The updated offset after adding the value block.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.AddValueBlock(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Adds a value block to the specified byte array at the given offset.
            </summary>
            <param name="value">The value to add to the byte array.</param>
            <param name="buffer">The byte array.</param>
            <param name="offset">The offset at which to add the value block.</param>
            <returns>The updated offset after adding the value block.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.AddByteBlock(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="block"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.BeginByteBlockHeader(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Begins a byte block header in the given buffer at the specified offset.
            </summary>
            <param name="buffer">The byte array buffer.</param>
            <param name="offset">The offset at which to begin the byte block header.</param>
            <param name="blockStart">The starting index of the byte block.</param>
            <returns>The new offset after the byte block header is initialized.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.EndByteBlockHeader(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Ends the byte block header by updating the block size in the byte array.
            </summary>
            <param name="buffer">The byte array containing the block header.</param>
            <param name="blockStart">The start index of the block header.</param>
            <param name="bytesWritten">The number of bytes written in the block.</param>
            <returns>The updated index after updating the block size in the byte array.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.PackByteBlocks(System.Byte[][])">
            <summary>
            Takes multiple byte blocks and packs them into a single byte array.
            </summary>
            <param name="blocks">The byte blocks to pack.</param>
            <returns>The packed byte array.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.ReadByteBlocks(System.Byte[])">
            <summary>
            Read byte blocks from a byte array.
            </summary>
            <param name="data">The byte array containing the byte blocks.</param>
            <returns>An enumerable collection of byte arrays, each representing a byte block.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.PrintBits(System.Array,System.Int32,System.Int32)">
            <summary>
            Print the bits of an array starting at the specified offset and for the given length.
            </summary>
            <param name="array">The array to print the bits from.</param>
            <param name="offset">The offset within the array to start printing from.</param>
            <param name="length">The length of the bits to print.</param>
            <returns>A string representation of the bits.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies data from the source stream to the destination stream.
            </summary>
            <param name="source">The source stream to copy from.</param>
            <param name="destination">The destination stream to copy to.</param>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.Base64EncodeString(System.String,System.Text.Encoding)">
            <summary>
            Base64 encodes a string using the specified encoding.
            </summary>
            <param name="data">The string to be encoded.</param>
            <param name="encoding">The encoding to be used.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.Base64DecodeString(System.String,System.Text.Encoding)">
            <summary>
            Decodes a Base64-encoded string to its original string representation using the specified encoding.
            </summary>
            <param name="data">The Base64-encoded string to decode.</param>
            <param name="encoding">The encoding to use for the decoded string.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.Base64Encode(System.Byte[])">
            <summary>
            Encodes a byte array to a Base64 string.
            </summary>
            <param name="data">The byte array to encode.</param>
            <returns>The Base64 encoded string.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.Base64Decode(System.String)">
            <summary>
            Decodes a Base64 encoded string into a byte array.
            </summary>
            <param name="data">The Base64 encoded string to decode.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.GZipCompressBytes(System.Byte[])">
            <summary>
            Compresses a byte array using GZip.
            </summary>
            <param name="data">The data to compress.</param>
            <returns></returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.GZipCompressBytes(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Compresses a byte array using GZip.
            </summary>
            <param name="data">The data to compress.</param>
            <param name="offset">The offset in the data array to start compressing from.</param>
            <param name="size">The size of the data to compress.</param>
            <param name="output">The stream to write the data to.</param>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.GZipCompressBytes(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses a byte array using GZip.
            </summary>
            <param name="input">The stream to read the data from.</param>
            <param name="output">The stream to write the compressed data to.</param>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.CreateGZipCompressStream(System.IO.Stream)">
            <summary>
            Decompresses a byte array using GZip.
            </summary>
            <param name="output">The stream to write the data to.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.CreateGZipDecompressStream(System.IO.Stream)">
            <summary>
            Decompresses a byte array using GZip.
            </summary>
            <param name="output">The stream to write the data to.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.GZipDecompressBytes(System.Byte[])">
            <summary>
            Decompresses a byte array using GZip.
            </summary>
            <param name="data">The data to decompress</param>
            <returns>The decompressed data.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.GZipCompressString(System.String,System.Text.Encoding)">
            <summary>
            Compresses a byte array using GZip.
            </summary>
            <param name="data">The string data to decompress.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>The compressed string.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.GZipDecompressString(System.Byte[],System.Text.Encoding)">
            <summary>
            Decompresses a byte array using GZip.
            </summary>
            <param name="data">The string data to decompress.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>The decompressed string.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.GZipDecompressString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Decompresses a byte array using GZip.
            </summary>
            <param name="data">The string data to decompress.</param>
            <param name="offset">The offset in the data array to start decompressing from.</param>
            <param name="size">The size of the data to decompress.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>The decompressed string.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.WriteBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a long value to a byte array at the specified offset.
            </summary>
            <param name="value">The long value to write.</param>
            <param name="array">The byte array to write the value to.</param>
            <param name="offset">The offset in the byte array to write the value to.</param>
            <returns>The length written in bytes.</returns>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.WriteBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes an unsigned long value to a byte array at the specified offset.
            </summary>
            <param name="value">The unsigned long value to write.</param>
            <param name="array">The byte array to write the value to.</param>
            <param name="offset">The offset in the byte array to write the value to.</param>
        </member>
        <member name="M:Photon.Deterministic.ByteUtils.WriteBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes an integer value to a byte array at the specified offset.
            </summary>
            <param name="value">The integer value to write.</param>
            <param name="array">The byte array to write the value to.</param>
            <param name="offset">The offset in the byte array to write the value to.</param>
        </member>
        <member name="T:Photon.Deterministic.ConfigParsingExtensions">
            <summary>
            Used by the server to parse the config information
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.SizeOfBits``1">
            <summary>
            Returns the size of a type in bits.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.BytesRequiredForBits(System.Int32)">
            <summary>
            Returns the number of bytes required to store the given number of bits.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.IntsRequiredForBits(System.Int32)">
            <summary>
            Returns the number of integers required to store the given number of bits.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.BytesRequiredForBits(System.Int16)">
            <summary>
            Returns the number of bytes required to store the given number of bits.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.PrintBits(System.Byte*,System.Int32)">
            <summary>
            Returns a string representation of the bits in the given data.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.BitsRequiredForNumber(System.Int32)">
            <summary>
            Returns the minimum required bits to represent the given <paramref name="n"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.FloorToInt(System.Double)">
            <summary>
            Returns the largest integer smaller to or equal to <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.CeilToInt(System.Double)">
            <summary>
            Returns the smallest integer greater to or equal to <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.BitsRequiredForNumber(System.UInt32)">
            <summary>
            Returns the minimum required bits to represent the given uint <paramref name="n"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.MillisecondsToSeconds(System.Double)">
            <summary>
            Converts the given milliseconds to seconds.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.SecondsToMilliseconds(System.Double)">
            <summary>
            Converts the given seconds to milliseconds.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.SecondsToMicroseconds(System.Double)">
            <summary>
            Converts the given seconds to microseconds.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.MicrosecondsToSeconds(System.Int64)">
            <summary>
            Converts the given microseconds to seconds.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.MillisecondsToMicroseconds(System.Int64)">
            <summary>
            Converts the given microseconds to milliseconds.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp the given value to the given range.
            </summary>
            <param name="v">Value to clamp.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:Photon.Deterministic.Maths.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <inheritdoc cref="M:Photon.Deterministic.Maths.Clamp(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Photon.Deterministic.Maths.Clamp(System.Double,System.Double,System.Double)">
            <inheritdoc cref="M:Photon.Deterministic.Maths.Clamp(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Photon.Deterministic.Maths.Clamp(System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:Photon.Deterministic.Maths.Clamp(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Photon.Deterministic.Maths.Clamp01(System.Double)">
            <summary>
            Clamps the given value to the range [0, 1].
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.Clamp01(System.Single)">
            <inheritdoc cref="M:Photon.Deterministic.Maths.Clamp01(System.Double)"/>
        </member>
        <member name="M:Photon.Deterministic.Maths.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between <paramref name="a"/> and <paramref name="b"/> by <paramref name="t"/>.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.Maths.Lerp(System.Double,System.Double,System.Double)">
            <inheritdoc cref="M:Photon.Deterministic.Maths.Lerp(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:Photon.Deterministic.Maths.Min(System.UInt32,System.UInt32)">
            <summary>
            Returns the smallest value of <paramref name="v"/> and <paramref name="max"/>.
            </summary>
        </member>
        <member name="T:Photon.Deterministic.RNGSession">
            <summary>
            PCG32 random generator, 16 bytes in size.
            <a href="http://www.pcg-random.org">http://www.pcg-random.org</a>
            </summary>
        </member>
        <member name="P:Photon.Deterministic.RNGSession.Peek">
            <summary>
            Returns a copy of this RNGSession, can be used to check what next random values will be
            without affecting the state.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.Next">
            <summary>
            Returns a random FP within [0.0, 1.0).
            </summary>
            <returns>A random FP within [0.0, 1.0)</returns>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.NextInclusive">
            <summary>
            Returns a random FP within [0.0, 1.0].
            </summary>
            <returns>A random FP within [0.0, 1.0]</returns>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.Next(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns a random FP within [<paramref name="minInclusive"/>, <paramref name="maxExclusive"/>).
            </summary>
            <returns>A random FP within [<paramref name="minInclusive"/>, <paramref name="maxExclusive"/>)</returns>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.NextInclusive(Photon.Deterministic.FP,Photon.Deterministic.FP)">
            <summary>
            Returns a random FP within [<paramref name="minInclusive"/>, <paramref name="maxInclusive"/>].
            </summary>
            <returns>A random FP within [<paramref name="minInclusive"/>, <paramref name="maxInclusive"/>]</returns>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random int within [<paramref name="minInclusive"/>, <paramref name="maxExclusive"/>].
            </summary>
            <returns>A random int within [<paramref name="minInclusive"/>, <paramref name="maxExclusive"/>]</returns>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.NextInclusive(System.Int32,System.Int32)">
            <summary>
            Returns a random int within [<paramref name="minInclusive"/>, <paramref name="maxInclusive"/>].
            </summary>
            <returns>A random int within [<paramref name="minInclusive"/>, <paramref name="maxInclusive"/>]</returns>
        </member>
        <member name="F:Photon.Deterministic.RNGSession.SIZE">
            <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="F:Photon.Deterministic.RNGSession.MAX">
            <summary>
            The maximum possible value to generate.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.#ctor(System.Int32)">
            <summary>
            Create a new RNGSession with the given seed.
            </summary>
            <param name="seed">The random number generator seed.</param>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.ToString">
            <summary>
            Returns a string representation of the RNGSession.
            </summary>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes a <see cref="T:Photon.Deterministic.RNGSession"/> into a <see cref="T:Photon.Deterministic.IDeterministicFrameSerializer"/> to write or read from a frame snapshot.
            </summary>
            <param name="ptr">The pointer to the <see cref="T:Photon.Deterministic.RNGSession"/>.</param>
            <param name="serializer">The <see cref="T:Photon.Deterministic.IDeterministicFrameSerializer"/> instance into which the struct will be serialized.</param>
        </member>
        <member name="M:Photon.Deterministic.RNGSession.GetHashCode">
            <summary>
            Overrides the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Photon.Deterministic.DeterministicStats">
            <summary>
            Deterministic simulation statistic.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicStats.Ping">
            <summary>
            The round trip time to the server in milliseconds.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicStats.Frame">
            <summary>
            The last predicted frame that was simulated.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicStats.Offset">
            <summary>
            The current input offset.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicStats.Predicted">
            <summary>
            The current number of predicted frames.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicStats.ResimulatedFrames">
            <summary>
            Not used anymore.
            </summary>
        </member>
        <member name="P:Photon.Deterministic.DeterministicStats.UpdateTime">
            <summary>
            The total time of the last update.
            </summary>
        </member>
        <member name="T:Quantum.PlayerRef">
            <summary>
            Represents a Quantum player.
            <para>The PlayerRef, in contrast to the player index, is 1-based. The reason is that default(PlayerRef) will return a "null/invalid" player ref struct for convenience. There are automatic cast operators that can cast an int into a PlayerRef.</para>
            </summary>
            <example>
            default(PlayerRef), internally a 0, means NOBODY
            PlayerRef, internally 1, is the same as player index 0
            PlayerRef, internally 2, is the same as player index 1
            </example>
        </member>
        <member name="F:Quantum.PlayerRef.SIZE">
            <summary>
            The size of the struct in-memory inside the Frame data-buffers or stack (when passed as value parameter).
            Not related to the snapshot payload this occupies, which is bit-packed and compressed.
            </summary>
        </member>
        <member name="F:Quantum.PlayerRef._index">
            <summary>
            PlayerRef backing field. 0 means no player.
            </summary>
        </member>
        <member name="P:Quantum.PlayerRef.None">
            <summary>
            None player has index 0.
            </summary>
        </member>
        <member name="P:Quantum.PlayerRef.IsValid">
            <summary>
            Returns <see langword="true"/> if the player reference is valid (larger than 0).
            </summary>
        </member>
        <member name="M:Quantum.PlayerRef.Equals(Quantum.PlayerRef)">
            <summary>
            Returns <see langword="true"/> if the PlayerRefs are equal.
            </summary>
        </member>
        <member name="M:Quantum.PlayerRef.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the PlayerRefs are equal.
            </summary>
        </member>
        <member name="M:Quantum.PlayerRef.GetHashCode">
            <summary>
            Overrides the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Quantum.PlayerRef.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance</returns>
        </member>
        <member name="M:Quantum.PlayerRef.op_Implicit(Quantum.PlayerRef)~System.Int32">
            <summary>
            Converts a PlayerRef to an integer.
            <para>The PlayerRef is 1-based and it will return 0 for player 1 for example.</para>
            </summary>
            <param name="value">PlayerRef to cast to int.</param>
        </member>
        <member name="M:Quantum.PlayerRef.op_Implicit(System.Int32)~Quantum.PlayerRef">
            <summary>
            Converts an integer to a PlayerRef.
            <para>The PlayerRef is 1-based and will return PlayerRef 1 for input 0 for example.</para>
            </summary>
            <param name="value">The integer to cast into a PlayerRef.</param>
        </member>
        <member name="M:Quantum.PlayerRef.op_Equality(Quantum.PlayerRef,Quantum.PlayerRef)">
            <summary>
            Operator override for which checks if two instances of PlayerRef are equal.
            </summary>
            <returns><see langword="true"/> if the instances are equal.</returns>
        </member>
        <member name="M:Quantum.PlayerRef.op_Inequality(Quantum.PlayerRef,Quantum.PlayerRef)">
            <summary>
            Operator override for which checks if two instances of PlayerRef are not equal.
            </summary>
            <returns><see langword="true"/> if the instances are not equal.</returns>
        </member>
        <member name="M:Quantum.PlayerRef.Serialize(System.Void*,Photon.Deterministic.IDeterministicFrameSerializer)">
            <summary>
            Serializes a <see cref="T:Quantum.PlayerRef"/> into a <see cref="T:Photon.Deterministic.IDeterministicFrameSerializer"/> to write or read from a frame snapshot.
            </summary>
            <param name="ptr">The pointer to the <see cref="T:Quantum.PlayerRef"/>.</param>
            <param name="serializer">The <see cref="T:Photon.Deterministic.IDeterministicFrameSerializer"/> instance into which the struct will be serialized.</param>
        </member>
    </members>
</doc>
