//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Photon/PhotonChat/ChatContoroller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ChatsInputs
{
    public partial class @ChatInputManager: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ChatInputManager()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ChatContoroller"",
    ""maps"": [
        {
            ""name"": ""ChatsActions"",
            ""id"": ""e3b97d84-4a83-47c6-a8b8-dddd32ee386f"",
            ""actions"": [
                {
                    ""name"": ""SendMsg"",
                    ""type"": ""Button"",
                    ""id"": ""671d000e-fcdd-4784-8b29-8cfc80d44007"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9615cbf-e42d-42f3-b06a-73bcf7dcd486"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendMsg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32221692-3cc2-4e14-8818-9158d7ce9991"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendMsg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d40b0f0-e64d-4c82-9e9b-3c423e9a7e06"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendMsg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ChatsActions
            m_ChatsActions = asset.FindActionMap("ChatsActions", throwIfNotFound: true);
            m_ChatsActions_SendMsg = m_ChatsActions.FindAction("SendMsg", throwIfNotFound: true);
        }
  
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ChatsActions
        private readonly InputActionMap m_ChatsActions;
        private List<IChatsActionsActions> m_ChatsActionsActionsCallbackInterfaces = new List<IChatsActionsActions>();
        private readonly InputAction m_ChatsActions_SendMsg;
        public struct ChatsActionsActions
        {
            private @ChatInputManager m_Wrapper;
            public ChatsActionsActions(@ChatInputManager wrapper) { m_Wrapper = wrapper; }
            public InputAction @SendMsg => m_Wrapper.m_ChatsActions_SendMsg;
            public InputActionMap Get() { return m_Wrapper.m_ChatsActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ChatsActionsActions set) { return set.Get(); }
            public void AddCallbacks(IChatsActionsActions instance)
            {
                if (instance == null || m_Wrapper.m_ChatsActionsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ChatsActionsActionsCallbackInterfaces.Add(instance);
                @SendMsg.started += instance.OnSendMsg;
                @SendMsg.performed += instance.OnSendMsg;
                @SendMsg.canceled += instance.OnSendMsg;
            }

            private void UnregisterCallbacks(IChatsActionsActions instance)
            {
                @SendMsg.started -= instance.OnSendMsg;
                @SendMsg.performed -= instance.OnSendMsg;
                @SendMsg.canceled -= instance.OnSendMsg;
            }

            public void RemoveCallbacks(IChatsActionsActions instance)
            {
                if (m_Wrapper.m_ChatsActionsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IChatsActionsActions instance)
            {
                foreach (var item in m_Wrapper.m_ChatsActionsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ChatsActionsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ChatsActionsActions @ChatsActions => new ChatsActionsActions(this);
        public interface IChatsActionsActions
        {
            void OnSendMsg(InputAction.CallbackContext context);
        }
    }
}
