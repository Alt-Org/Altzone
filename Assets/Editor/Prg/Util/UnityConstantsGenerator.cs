using System.IO;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using UnityEngine.Assertions;

namespace Editor.Prg.Util
{
    public static class UnityConstantsGenerator
    {
        [MenuItem("Window/ALT-Zone/Util/Generate UnityConstants.cs")]
        public static void Generate()
        {
            UnityEngine.Debug.Log("*");
            var path = InternalGenerate();
            UnityEngine.Debug.Log($"Wrote {path}");
        }

        private static string InternalGenerate()
        {
            string MakeSafeForCode(string name)
            {
                // Code style might not allow underscores so we just remove everything suspicious
                var str = Regex.Replace(name, "[^a-zA-Z0-9_]", "", RegexOptions.Compiled);
                Assert.IsTrue(str.Length > 0);
                return str;
            }

            // Try to find an existing file in the project called "UnityConstants.cs"
            var filePath = string.Empty;
            foreach (var file in Directory.GetFiles(Application.dataPath, "*.cs", SearchOption.AllDirectories))
            {
                if (Path.GetFileNameWithoutExtension(file) == "UnityConstants")
                {
                    filePath = file;
                    break;
                }
            }

            // If no such file exists already, use the save panel to get a folder in which the file will be placed.
            if (string.IsNullOrEmpty(filePath))
            {
                var directory =
                    EditorUtility.OpenFolderPanel("Choose location for UnityConstants.cs", Application.dataPath, string.Empty);

                // Canceled choose? Do nothing.
                if (string.IsNullOrEmpty(directory))
                {
                    return directory;
                }

                filePath = Path.Combine(directory, "UnityConstants.cs");
            }

            // Write out our file
            using (var writer = new StreamWriter(filePath))
            {
                writer.WriteLine("// This file is auto-generated by {0}.", nameof(UnityConstantsGenerator));
                writer.WriteLine();
                writer.WriteLine("// ReSharper disable once CheckNamespace");
                writer.WriteLine("namespace UnityConstants");
                writer.WriteLine("{");

                // Write out the tags
                writer.WriteLine("    /// <summary>");
                writer.WriteLine("    /// Convenience class for UNITY Tags");
                writer.WriteLine("    /// </summary>");
                writer.WriteLine("    public static class Tags");
                writer.WriteLine("    {");
                foreach (var tag in InternalEditorUtility.tags)
                {
                    writer.WriteLine("        public const string {0} = \"{1}\";", MakeSafeForCode(tag), tag);
                }
                writer.WriteLine("    }");
                writer.WriteLine();

                // Write out sorting layers
                writer.WriteLine("    /// <summary>");
                writer.WriteLine("    /// Convenience class for UNITY SortingLayers");
                writer.WriteLine("    /// </summary>");
                writer.WriteLine("    public static class SortingLayers");
                writer.WriteLine("    {");
                foreach (var layer in SortingLayer.layers)
                {
                    writer.WriteLine("        /// <summary>");
                    writer.WriteLine("        /// ID of sorting layer '{0}'.", layer.name);
                    writer.WriteLine("        /// </summary>");
                    writer.WriteLine("        public const int {0} = {1};", MakeSafeForCode(layer.name), layer.id);
                }
                writer.WriteLine("    }");
                writer.WriteLine();

                // Write out layers
                writer.WriteLine("    /// <summary>");
                writer.WriteLine("    /// Convenience class for UNITY Layers");
                writer.WriteLine("    /// </summary>");
                writer.WriteLine("    public static class Layers");
                writer.WriteLine("    {");
                var first = true;
                for (var i = 0; i < 32; i++)
                {
                    var layer = InternalEditorUtility.GetLayerName(i);
                    if (!string.IsNullOrEmpty(layer))
                    {
                        if (first)
                        {
                            writer.WriteLine("        // Index of layer");
                            first = false;
                        }
                        writer.WriteLine("        public const int {0} = {1};", MakeSafeForCode(layer), i);
                    }
                }
                writer.WriteLine();
                first = true;
                for (var i = 1; i < 32; i++) // Skip default mask!
                {
                    var layer = InternalEditorUtility.GetLayerName(i);
                    if (!string.IsNullOrEmpty(layer))
                    {
                        if (first)
                        {
                            writer.WriteLine("        // Bitmask of layer");
                            first = false;
                        }
                        writer.WriteLine("        public const int {0}Mask = 1 << {1};", MakeSafeForCode(layer), i);
                    }
                }
                writer.WriteLine("    }");

                // End of namespace UnityConstants
                writer.Write("}");
            }

            // Refresh
            AssetDatabase.Refresh();
            return filePath;
        }
    }
}