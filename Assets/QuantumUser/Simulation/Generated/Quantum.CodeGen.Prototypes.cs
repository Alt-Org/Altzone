// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ArenaBorder))]
  public unsafe partial class ArenaBorderPrototype : ComponentPrototype<Quantum.ArenaBorder> {
    public FPVector2 Normal;
    public FP CollisionMinOffset;
    partial void MaterializeUser(Frame frame, ref Quantum.ArenaBorder result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.ArenaBorder component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.ArenaBorder result, in PrototypeMaterializationContext context = default) {
        result.Normal = this.Normal;
        result.CollisionMinOffset = this.CollisionMinOffset;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.GameSession))]
  public unsafe partial class GameSessionPrototype : ComponentPrototype<Quantum.GameSession> {
    public Quantum.QEnum32<GameState> state;
    public FP TimeUntilStart;
    partial void MaterializeUser(Frame frame, ref Quantum.GameSession result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.GameSession component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.GameSession result, in PrototypeMaterializationContext context = default) {
        result.state = this.state;
        result.TimeUntilStart = this.TimeUntilStart;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Goal))]
  public unsafe partial class GoalPrototype : ComponentPrototype<Quantum.Goal> {
    public AssetRef<GoalConfig> goalConfig;
    public QBoolean hasTriggered;
    partial void MaterializeUser(Frame frame, ref Quantum.Goal result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Goal component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Goal result, in PrototypeMaterializationContext context = default) {
        result.goalConfig = this.goalConfig;
        result.hasTriggered = this.hasTriggered;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.GridPosition))]
  public unsafe partial class GridPositionPrototype : StructPrototype {
    public Int32 Row;
    public Int32 Col;
    partial void MaterializeUser(Frame frame, ref Quantum.GridPosition result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.GridPosition result, in PrototypeMaterializationContext context = default) {
        result.Row = this.Row;
        result.Col = this.Col;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public Button MouseClick;
    public Quantum.Prototypes.GridPositionPrototype MovementPosition;
    public Button RotateMotion;
    public FP RotationDirection;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result.MouseClick = this.MouseClick;
        this.MovementPosition.Materialize(frame, ref result.MovementPosition, in context);
        result.RotateMotion = this.RotateMotion;
        result.RotationDirection = this.RotationDirection;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerData))]
  public unsafe class PlayerDataPrototype : ComponentPrototype<Quantum.PlayerData> {
    public PlayerRef Player;
    public Quantum.QEnum32<BattlePlayerSlot> Slot;
    public Quantum.QEnum32<BattleTeamNumber> TeamNumber;
    public Int32 CharacterId;
    public Int32 CharacterClass;
    public FP StatHp;
    public FP StatSpeed;
    public FP StatCharacterSize;
    public FP StatAttack;
    public FP StatDefence;
    public FP Speed;
    public FPVector2 TargetPosition;
    public FP BaseRotation;
    public FP MovementRotation;
    public FPVector2 Normal;
    public FP CollisionMinOffset;
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public MapEntityId[] ShieldHitboxArray = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerData component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerData result, in PrototypeMaterializationContext context = default) {
        result.Player = this.Player;
        result.Slot = this.Slot;
        result.TeamNumber = this.TeamNumber;
        result.CharacterId = this.CharacterId;
        result.CharacterClass = this.CharacterClass;
        result.StatHp = this.StatHp;
        result.StatSpeed = this.StatSpeed;
        result.StatCharacterSize = this.StatCharacterSize;
        result.StatAttack = this.StatAttack;
        result.StatDefence = this.StatDefence;
        result.Speed = this.Speed;
        result.TargetPosition = this.TargetPosition;
        result.BaseRotation = this.BaseRotation;
        result.MovementRotation = this.MovementRotation;
        result.Normal = this.Normal;
        result.CollisionMinOffset = this.CollisionMinOffset;
        if (this.ShieldHitboxArray.Length == 0) {
          result.ShieldHitboxArray = default;
        } else {
          var list = frame.AllocateList(out result.ShieldHitboxArray, this.ShieldHitboxArray.Length);
          for (int i = 0; i < this.ShieldHitboxArray.Length; ++i) {
            EntityRef tmp = default;
            PrototypeValidator.FindMapEntity(this.ShieldHitboxArray[i], in context, out tmp);
            list.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerHitBox))]
  public unsafe class PlayerHitBoxPrototype : ComponentPrototype<Quantum.PlayerHitBox> {
    public MapEntityId Player;
    public Quantum.QEnum32<PlayerHitboxType> HitBoxType;
    public Quantum.QEnum32<PlayerCollisionType> CollisionType;
    public FPVector2 Normal;
    public FP CollisionMinOffset;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerHitBox component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerHitBox result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Player, in context, out result.Player);
        result.HitBoxType = this.HitBoxType;
        result.CollisionType = this.CollisionType;
        result.Normal = this.Normal;
        result.CollisionMinOffset = this.CollisionMinOffset;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerManagerData))]
  public unsafe class PlayerManagerDataPrototype : ComponentPrototype<Quantum.PlayerManagerData> {
    [ArrayLengthAttribute(4)]
    public Quantum.QEnum32<PlayerPlayState>[] PlayStates = new Quantum.QEnum32<PlayerPlayState>[4];
    [ArrayLengthAttribute(4)]
    public PlayerRef[] PlayerRefs = new PlayerRef[4];
    [ArrayLengthAttribute(4)]
    public MapEntityId[] SelectedCharacters = new MapEntityId[4];
    [ArrayLengthAttribute(12)]
    public MapEntityId[] AllCharacters = new MapEntityId[12];
    [ArrayLengthAttribute(4)]
    public Int32[] SelectedCharacterNumbers = new Int32[4];
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerManagerData component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerManagerData result, in PrototypeMaterializationContext context = default) {
        for (int i = 0, count = PrototypeValidator.CheckLength(PlayStates, 4, in context); i < count; ++i) {
          *result.PlayStates.GetPointer(i) = this.PlayStates[i];
        }
        for (int i = 0, count = PrototypeValidator.CheckLength(PlayerRefs, 4, in context); i < count; ++i) {
          *result.PlayerRefs.GetPointer(i) = this.PlayerRefs[i];
        }
        for (int i = 0, count = PrototypeValidator.CheckLength(SelectedCharacters, 4, in context); i < count; ++i) {
          PrototypeValidator.FindMapEntity(this.SelectedCharacters[i], in context, out *result.SelectedCharacters.GetPointer(i));
        }
        for (int i = 0, count = PrototypeValidator.CheckLength(AllCharacters, 12, in context); i < count; ++i) {
          PrototypeValidator.FindMapEntity(this.AllCharacters[i], in context, out *result.AllCharacters.GetPointer(i));
        }
        for (int i = 0, count = PrototypeValidator.CheckLength(SelectedCharacterNumbers, 4, in context); i < count; ++i) {
          result.SelectedCharacterNumbers[i] = this.SelectedCharacterNumbers[i];
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Projectile))]
  public unsafe partial class ProjectilePrototype : ComponentPrototype<Quantum.Projectile> {
    public QBoolean IsLaunched;
    public FP Speed;
    public FPVector2 Direction;
    public FP CoolDown;
    public FP Radius;
    public Int32 TestSpriteIndex;
    partial void MaterializeUser(Frame frame, ref Quantum.Projectile result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Projectile component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Projectile result, in PrototypeMaterializationContext context = default) {
        result.IsLaunched = this.IsLaunched;
        result.Speed = this.Speed;
        result.Direction = this.Direction;
        result.CoolDown = this.CoolDown;
        result.Radius = this.Radius;
        result.TestSpriteIndex = this.TestSpriteIndex;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ProjectileSpawner))]
  public unsafe partial class ProjectileSpawnerPrototype : ComponentPrototype<Quantum.ProjectileSpawner> {
    public QBoolean HasSpawned;
    partial void MaterializeUser(Frame frame, ref Quantum.ProjectileSpawner result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.ProjectileSpawner component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.ProjectileSpawner result, in PrototypeMaterializationContext context = default) {
        result.HasSpawned = this.HasSpawned;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SoulWall))]
  public unsafe class SoulWallPrototype : ComponentPrototype<Quantum.SoulWall> {
    public MapEntityId ChildEntity;
    public FPVector2 Normal;
    public FP CollisionMinOffset;
    public Int32 Layer;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.SoulWall component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.SoulWall result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.ChildEntity, in context, out result.ChildEntity);
        result.Normal = this.Normal;
        result.CollisionMinOffset = this.CollisionMinOffset;
        result.Layer = this.Layer;
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
