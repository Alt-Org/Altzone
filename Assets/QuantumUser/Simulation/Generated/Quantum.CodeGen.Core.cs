// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Battle.QSimulation.Goal;
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public enum BattleCollisionTriggerType : int {
    ArenaBorder = 0,
    SoulWall = 1,
    Player = 2,
    Shield = 3,
    Goal = 4,
  }
  public enum BattleEmotionState : int {
    Sadness = 0,
    Joy = 1,
    Playful = 2,
    Aggression = 3,
    Love = 4,
  }
  public enum BattleGameState : int {
    InitializeGame,
    WaitForPlayers,
    CreateMap,
    ReadyToStart,
    Countdown,
    GetReadyToPlay,
    Playing,
    GameOver,
    PostGame,
  }
  public enum BattleLightrayColor : int {
    Red = 0,
    Blue = 1,
  }
  public enum BattleLightraySize : int {
    Narrow = 0,
    Medium = 1,
    Wide = 3,
  }
  public enum BattleMovementInputType : int {
    None = 0,
    Position = 1,
    Direction = 2,
  }
  public enum BattlePlayerCollisionType : int {
    None = 0,
    Reflect = 1,
    Override = 2,
  }
  public enum BattlePlayerHitboxType : int {
    Shield = 0,
    Character = 1,
  }
  public enum BattlePlayerPlayState : int {
    NotInGame,
    OutOfPlay,
    InPlay,
  }
  public enum BattlePlayerSlot : int {
    Guest = 0,
    Slot1 = 1,
    Slot2 = 2,
    Slot3 = 3,
    Slot4 = 4,
    Spectator = 10,
  }
  public enum BattleSoulWallRow : int {
    First = 0,
    Middle = 1,
    Last = 2,
  }
  public enum BattleSoundFX : int {
    SoulWallHit,
    GoalHit,
    SideWallHit,
    WallBroken,
  }
  public enum BattleTeamNumber : int {
    NoTeam = 0,
    TeamAlpha = 1,
    TeamBeta = 2,
  }
  [System.FlagsAttribute()]
  public enum BattleProjectileCollisionFlags : byte {
    Projectile = 1 << 0,
    SoulWall = 1 << 1,
    Player = 1 << 2,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    RotationInput = 1 << 0,
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this BattleProjectileCollisionFlags self, BattleProjectileCollisionFlags flag) {
      return (self & flag) == flag;
    }
    public static BattleProjectileCollisionFlags SetFlag(this BattleProjectileCollisionFlags self, BattleProjectileCollisionFlags flag) {
      return self | flag;
    }
    public static BattleProjectileCollisionFlags ClearFlag(this BattleProjectileCollisionFlags self, BattleProjectileCollisionFlags flag) {
      return self & ~flag;
    }
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [System.SerializableAttribute()]
  public unsafe partial struct QString512 : IQString, System.IEquatable<QString512> {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public UInt16 ByteCount;
    [FieldOffset(2)]
    [FixedBufferDynamicLength("ByteCount")]
    public fixed Byte Bytes[510];
    public const int MaxByteCount = 510;
    public QString512(String str) {
      QString.ConstructFrom(str, MaxByteCount, out this);
    }
    public int Length {
      get {
        return QString.GetLength(ref this);
      }
    }
    public override System.String ToString() {
      return QString.GetString(ref this);
    }
    public static Boolean CanHold(String str) {
      return QString.CanHold(str, MaxByteCount);
    }
    Int32 IQString.CompareOrdinal(byte* bytes, UInt16 byteCount) {
      return QString.CompareOrdinal(ref this, bytes, byteCount);
    }
    public Int32 CompareOrdinal(String str) {
      return QString.CompareOrdinal(ref this, str);
    }
    public static implicit operator QString512(String str) {
      return new QString512(str);
    }
    public static implicit operator String(QString512 str) {
      return str.ToString();
    }
    public override Boolean Equals(Object obj) {
      return QString.AreEqual(ref this, obj);
    }
    public Boolean Equals(QString512 str) {
      return QString.CompareOrdinal(ref this, str.Bytes, str.ByteCount) == 0;
    }
    public Boolean Equals<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str) == 0;
    }
    public Int32 CompareOrdinal<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str);
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18229;
        hash = hash * 31 + ByteCount.GetHashCode();
        fixed (Byte* p = Bytes) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, this.ByteCount);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QString512*)ptr;
        serializer.Stream.Serialize(&p->ByteCount);
        Assert.Always(p->ByteCount <= 510, p->ByteCount);
        serializer.Stream.SerializeBuffer(&p->Bytes[0], p->ByteCount);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Serializable()]
  public unsafe partial struct BattleGridPosition {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    public Int32 Row;
    [FieldOffset(0)]
    public Int32 Col;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9901;
        hash = hash * 31 + Row.GetHashCode();
        hash = hash * 31 + Col.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleGridPosition*)ptr;
        serializer.Stream.Serialize(&p->Col);
        serializer.Stream.Serialize(&p->Row);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Serializable()]
  public unsafe partial struct BattlePlayerHitboxColliderTemplate {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public IntVector2 Position;
    [FieldOffset(8)]
    public IntVector2 Size;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15461;
        hash = hash * 31 + Position.GetHashCode();
        hash = hash * 31 + Size.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattlePlayerHitboxColliderTemplate*)ptr;
        IntVector2.Serialize(&p->Position, serializer);
        IntVector2.Serialize(&p->Size, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Serializable()]
  public unsafe partial struct BattlePlayerHitboxTemplate {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    [FreeOnComponentRemoved()]
    public QListPtr<BattlePlayerHitboxColliderTemplate> ColliderTemplateList;
    [FieldOffset(0)]
    public BattlePlayerCollisionType CollisionType;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12821;
        hash = hash * 31 + ColliderTemplateList.GetHashCode();
        hash = hash * 31 + (Int32)CollisionType;
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (ColliderTemplateList != default) f.FreeList(ref ColliderTemplateList);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattlePlayerHitboxTemplate*)ptr;
        serializer.Stream.Serialize((Int32*)&p->CollisionType);
        QList.Serialize(&p->ColliderTemplateList, serializer, Statics.SerializeBattlePlayerHitboxColliderTemplate);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Serializable()]
  public unsafe partial struct BattlePlayerStats {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public FP Hp;
    [FieldOffset(32)]
    public FP Speed;
    [FieldOffset(8)]
    public FP CharacterSize;
    [FieldOffset(0)]
    public FP Attack;
    [FieldOffset(16)]
    public FP Defence;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5557;
        hash = hash * 31 + Hp.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        hash = hash * 31 + CharacterSize.GetHashCode();
        hash = hash * 31 + Attack.GetHashCode();
        hash = hash * 31 + Defence.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattlePlayerStats*)ptr;
        FP.Serialize(&p->Attack, serializer);
        FP.Serialize(&p->CharacterSize, serializer);
        FP.Serialize(&p->Defence, serializer);
        FP.Serialize(&p->Hp, serializer);
        FP.Serialize(&p->Speed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Serializable()]
  public unsafe partial struct BattleSoulWallTemplate {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(8)]
    public BattleGridPosition Position;
    [FieldOffset(4)]
    public Int32 WidthType;
    [FieldOffset(0)]
    public Int32 ColorIndex;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19919;
        hash = hash * 31 + Position.GetHashCode();
        hash = hash * 31 + WidthType.GetHashCode();
        hash = hash * 31 + ColorIndex.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleSoulWallTemplate*)ptr;
        serializer.Stream.Serialize(&p->ColorIndex);
        serializer.Stream.Serialize(&p->WidthType);
        Quantum.BattleGridPosition.Serialize(&p->Position, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public BattleMovementInputType MovementInput;
    [FieldOffset(8)]
    public QBoolean MovementDirectionIsNormalized;
    [FieldOffset(12)]
    public BattleGridPosition MovementPosition;
    [FieldOffset(48)]
    public FPVector2 MovementDirection;
    [FieldOffset(32)]
    public Button RotationInput;
    [FieldOffset(24)]
    public FP RotationValue;
    [FieldOffset(4)]
    public Int32 PlayerCharacterNumber;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + (Int32)MovementInput;
        hash = hash * 31 + MovementDirectionIsNormalized.GetHashCode();
        hash = hash * 31 + MovementPosition.GetHashCode();
        hash = hash * 31 + MovementDirection.GetHashCode();
        hash = hash * 31 + RotationInput.GetHashCode();
        hash = hash * 31 + RotationValue.GetHashCode();
        hash = hash * 31 + PlayerCharacterNumber.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.RotationInput: return RotationInput.IsDown;
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.RotationInput: return RotationInput.WasPressed;
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize((Int32*)&p->MovementInput);
        serializer.Stream.Serialize(&p->PlayerCharacterNumber);
        QBoolean.Serialize(&p->MovementDirectionIsNormalized, serializer);
        Quantum.BattleGridPosition.Serialize(&p->MovementPosition, serializer);
        FP.Serialize(&p->RotationValue, serializer);
        Button.Serialize(&p->RotationInput, serializer);
        FPVector2.Serialize(&p->MovementDirection, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 952;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(32)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(48)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(64)]
    public RNGSession RngSession;
    [FieldOffset(80)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(128)]
    public BitSet1024 Systems;
    [FieldOffset(256)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(552)]
    public Int32 PlayerConnectedCount;
    [FieldOffset(560)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[384];
    [FieldOffset(944)]
    public BitSet6 PlayerLastConnectionState;
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 64, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerConnectedCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        return hash;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->PlayerConnectedCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleArenaBorderQComponent : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FPVector2 Normal;
    [FieldOffset(0)]
    public FP CollisionMinOffset;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21013;
        hash = hash * 31 + Normal.GetHashCode();
        hash = hash * 31 + CollisionMinOffset.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleArenaBorderQComponent*)ptr;
        FP.Serialize(&p->CollisionMinOffset, serializer);
        FPVector2.Serialize(&p->Normal, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleCollisionTriggerQComponent : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public BattleCollisionTriggerType Type;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18133;
        hash = hash * 31 + (Int32)Type;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleCollisionTriggerQComponent*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Type);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleDiamondCounterQSingleton : Quantum.IComponentSingleton {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 AlphaDiamonds;
    [FieldOffset(4)]
    public Int32 BetaDiamonds;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3517;
        hash = hash * 31 + AlphaDiamonds.GetHashCode();
        hash = hash * 31 + BetaDiamonds.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleDiamondCounterQSingleton*)ptr;
        serializer.Stream.Serialize(&p->AlphaDiamonds);
        serializer.Stream.Serialize(&p->BetaDiamonds);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleDiamondDataQComponent : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public BattleTeamNumber OwnerTeam;
    [FieldOffset(8)]
    public FP TimeUntilDisappearance;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7121;
        hash = hash * 31 + (Int32)OwnerTeam;
        hash = hash * 31 + TimeUntilDisappearance.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleDiamondDataQComponent*)ptr;
        serializer.Stream.Serialize((Int32*)&p->OwnerTeam);
        FP.Serialize(&p->TimeUntilDisappearance, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleGameSessionQSingleton : Quantum.IComponentSingleton {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public QBoolean GameInitialized;
    [FieldOffset(0)]
    public BattleGameState State;
    [FieldOffset(16)]
    public FP TimeUntilStart;
    [FieldOffset(8)]
    public FP GameTimeSec;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1487;
        hash = hash * 31 + GameInitialized.GetHashCode();
        hash = hash * 31 + (Int32)State;
        hash = hash * 31 + TimeUntilStart.GetHashCode();
        hash = hash * 31 + GameTimeSec.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleGameSessionQSingleton*)ptr;
        serializer.Stream.Serialize((Int32*)&p->State);
        QBoolean.Serialize(&p->GameInitialized, serializer);
        FP.Serialize(&p->GameTimeSec, serializer);
        FP.Serialize(&p->TimeUntilStart, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleGoalQComponent : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public BattleTeamNumber TeamNumber;
    [FieldOffset(4)]
    public QBoolean HasTriggered;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4663;
        hash = hash * 31 + (Int32)TeamNumber;
        hash = hash * 31 + HasTriggered.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleGoalQComponent*)ptr;
        serializer.Stream.Serialize((Int32*)&p->TeamNumber);
        QBoolean.Serialize(&p->HasTriggered, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattlePlayerDataQComponent : Quantum.IComponent {
    public const Int32 SIZE = 136;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public PlayerRef PlayerRef;
    [FieldOffset(0)]
    public BattlePlayerSlot Slot;
    [FieldOffset(4)]
    public BattleTeamNumber TeamNumber;
    [FieldOffset(12)]
    public Int32 CharacterId;
    [FieldOffset(8)]
    public Int32 CharacterClass;
    [FieldOffset(96)]
    public BattlePlayerStats Stats;
    [FieldOffset(20)]
    public Int32 GridExtendTop;
    [FieldOffset(16)]
    public Int32 GridExtendBottom;
    [FieldOffset(28)]
    public QBoolean HasTargetPosition;
    [FieldOffset(80)]
    public FPVector2 TargetPosition;
    [FieldOffset(56)]
    public FP RotationBase;
    [FieldOffset(64)]
    public FP RotationOffset;
    [FieldOffset(48)]
    public FP CurrentHp;
    [FieldOffset(40)]
    public EntityRef HitboxShieldEntity;
    [FieldOffset(32)]
    public EntityRef HitboxCharacterEntity;
    [FieldOffset(72)]
    public FrameTimer DamageCooldown;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6911;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + (Int32)Slot;
        hash = hash * 31 + (Int32)TeamNumber;
        hash = hash * 31 + CharacterId.GetHashCode();
        hash = hash * 31 + CharacterClass.GetHashCode();
        hash = hash * 31 + Stats.GetHashCode();
        hash = hash * 31 + GridExtendTop.GetHashCode();
        hash = hash * 31 + GridExtendBottom.GetHashCode();
        hash = hash * 31 + HasTargetPosition.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + RotationBase.GetHashCode();
        hash = hash * 31 + RotationOffset.GetHashCode();
        hash = hash * 31 + CurrentHp.GetHashCode();
        hash = hash * 31 + HitboxShieldEntity.GetHashCode();
        hash = hash * 31 + HitboxCharacterEntity.GetHashCode();
        hash = hash * 31 + DamageCooldown.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattlePlayerDataQComponent*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Slot);
        serializer.Stream.Serialize((Int32*)&p->TeamNumber);
        serializer.Stream.Serialize(&p->CharacterClass);
        serializer.Stream.Serialize(&p->CharacterId);
        serializer.Stream.Serialize(&p->GridExtendBottom);
        serializer.Stream.Serialize(&p->GridExtendTop);
        PlayerRef.Serialize(&p->PlayerRef, serializer);
        QBoolean.Serialize(&p->HasTargetPosition, serializer);
        EntityRef.Serialize(&p->HitboxCharacterEntity, serializer);
        EntityRef.Serialize(&p->HitboxShieldEntity, serializer);
        FP.Serialize(&p->CurrentHp, serializer);
        FP.Serialize(&p->RotationBase, serializer);
        FP.Serialize(&p->RotationOffset, serializer);
        FrameTimer.Serialize(&p->DamageCooldown, serializer);
        FPVector2.Serialize(&p->TargetPosition, serializer);
        Quantum.BattlePlayerStats.Serialize(&p->Stats, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattlePlayerDataTemplateQComponent : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    public Int32 GridExtendTop;
    [FieldOffset(0)]
    public Int32 GridExtendBottom;
    [FieldOffset(16)]
    public BattlePlayerHitboxTemplate HitboxShield;
    [FieldOffset(8)]
    public BattlePlayerHitboxTemplate HitboxCharacter;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8821;
        hash = hash * 31 + GridExtendTop.GetHashCode();
        hash = hash * 31 + GridExtendBottom.GetHashCode();
        hash = hash * 31 + HitboxShield.GetHashCode();
        hash = hash * 31 + HitboxCharacter.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      HitboxShield.ClearPointers(f, entity);
      HitboxCharacter.ClearPointers(f, entity);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.BattlePlayerDataTemplateQComponent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattlePlayerDataTemplateQComponent*)ptr;
        serializer.Stream.Serialize(&p->GridExtendBottom);
        serializer.Stream.Serialize(&p->GridExtendTop);
        Quantum.BattlePlayerHitboxTemplate.Serialize(&p->HitboxCharacter, serializer);
        Quantum.BattlePlayerHitboxTemplate.Serialize(&p->HitboxShield, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattlePlayerHitboxQComponent : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public EntityRef PlayerEntity;
    [FieldOffset(4)]
    public BattlePlayerHitboxType HitboxType;
    [FieldOffset(0)]
    public BattlePlayerCollisionType CollisionType;
    [FieldOffset(24)]
    public FPVector2 Normal;
    [FieldOffset(16)]
    public FP CollisionMinOffset;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16633;
        hash = hash * 31 + PlayerEntity.GetHashCode();
        hash = hash * 31 + (Int32)HitboxType;
        hash = hash * 31 + (Int32)CollisionType;
        hash = hash * 31 + Normal.GetHashCode();
        hash = hash * 31 + CollisionMinOffset.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattlePlayerHitboxQComponent*)ptr;
        serializer.Stream.Serialize((Int32*)&p->CollisionType);
        serializer.Stream.Serialize((Int32*)&p->HitboxType);
        EntityRef.Serialize(&p->PlayerEntity, serializer);
        FP.Serialize(&p->CollisionMinOffset, serializer);
        FPVector2.Serialize(&p->Normal, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattlePlayerManagerDataQSingleton : Quantum.IComponentSingleton {
    public const Int32 SIZE = 184;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public Int32 PlayerCount;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(BattlePlayerPlayState), 4)]
    private fixed Byte _PlayStates_[16];
    [FieldOffset(36)]
    [FramePrinter.FixedArrayAttribute(typeof(PlayerRef), 4)]
    private fixed Byte _PlayerRefs_[16];
    [FieldOffset(152)]
    [FramePrinter.FixedArrayAttribute(typeof(EntityRef), 4)]
    private fixed Byte _SelectedCharacters_[32];
    [FieldOffset(56)]
    [FramePrinter.FixedArrayAttribute(typeof(EntityRef), 12)]
    private fixed Byte _AllCharacters_[96];
    [FieldOffset(20)]
    public fixed Int32 SelectedCharacterNumbers[4];
    public FixedArray<BattlePlayerPlayState> PlayStates {
      get {
        fixed (byte* p = _PlayStates_) { return new FixedArray<BattlePlayerPlayState>(p, 4, 4); }
      }
    }
    public FixedArray<PlayerRef> PlayerRefs {
      get {
        fixed (byte* p = _PlayerRefs_) { return new FixedArray<PlayerRef>(p, 4, 4); }
      }
    }
    public FixedArray<EntityRef> SelectedCharacters {
      get {
        fixed (byte* p = _SelectedCharacters_) { return new FixedArray<EntityRef>(p, 8, 4); }
      }
    }
    public FixedArray<EntityRef> AllCharacters {
      get {
        fixed (byte* p = _AllCharacters_) { return new FixedArray<EntityRef>(p, 8, 12); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17239;
        hash = hash * 31 + PlayerCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(PlayStates);
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(PlayerRefs);
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(SelectedCharacters);
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(AllCharacters);
        fixed (Int32* p = SelectedCharacterNumbers) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattlePlayerManagerDataQSingleton*)ptr;
        FixedArray.Serialize(p->PlayStates, serializer, Statics.SerializeBattlePlayerPlayState);
        serializer.Stream.Serialize(&p->PlayerCount);
        serializer.Stream.SerializeBuffer(&p->SelectedCharacterNumbers[0], 4);
        FixedArray.Serialize(p->PlayerRefs, serializer, Statics.SerializePlayerRef);
        FixedArray.Serialize(p->AllCharacters, serializer, Statics.SerializeEntityRef);
        FixedArray.Serialize(p->SelectedCharacters, serializer, Statics.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleProjectileQComponent : Quantum.IComponent {
    public const Int32 SIZE = 136;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public QBoolean IsLaunched;
    [FieldOffset(12)]
    public QBoolean IsMoving;
    [FieldOffset(56)]
    public FP Speed;
    [FieldOffset(72)]
    [FramePrinter.FixedArrayAttribute(typeof(FP), 5)]
    private fixed Byte _SpeedMultiplierArray_[40];
    [FieldOffset(112)]
    public FP SpeedPotential;
    [FieldOffset(64)]
    public FP SpeedIncrement;
    [FieldOffset(16)]
    public FP AccelerationTimer;
    [FieldOffset(24)]
    public FP AccelerationTimerDuration;
    [FieldOffset(120)]
    public FPVector2 Direction;
    [FieldOffset(48)]
    public FP Radius;
    [FieldOffset(4)]
    public BattleEmotionState Emotion;
    [FieldOffset(32)]
    public FP Attack;
    [FieldOffset(40)]
    public FP AttackMax;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(BattleProjectileCollisionFlags), 2)]
    private fixed Byte _CollisionFlags_[2];
    public FixedArray<FP> SpeedMultiplierArray {
      get {
        fixed (byte* p = _SpeedMultiplierArray_) { return new FixedArray<FP>(p, 8, 5); }
      }
    }
    public FixedArray<BattleProjectileCollisionFlags> CollisionFlags {
      get {
        fixed (byte* p = _CollisionFlags_) { return new FixedArray<BattleProjectileCollisionFlags>(p, 1, 2); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4001;
        hash = hash * 31 + IsLaunched.GetHashCode();
        hash = hash * 31 + IsMoving.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(SpeedMultiplierArray);
        hash = hash * 31 + SpeedPotential.GetHashCode();
        hash = hash * 31 + SpeedIncrement.GetHashCode();
        hash = hash * 31 + AccelerationTimer.GetHashCode();
        hash = hash * 31 + AccelerationTimerDuration.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + Radius.GetHashCode();
        hash = hash * 31 + (Int32)Emotion;
        hash = hash * 31 + Attack.GetHashCode();
        hash = hash * 31 + AttackMax.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(CollisionFlags);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleProjectileQComponent*)ptr;
        FixedArray.Serialize(p->CollisionFlags, serializer, Statics.SerializeBattleProjectileCollisionFlags);
        serializer.Stream.Serialize((Int32*)&p->Emotion);
        QBoolean.Serialize(&p->IsLaunched, serializer);
        QBoolean.Serialize(&p->IsMoving, serializer);
        FP.Serialize(&p->AccelerationTimer, serializer);
        FP.Serialize(&p->AccelerationTimerDuration, serializer);
        FP.Serialize(&p->Attack, serializer);
        FP.Serialize(&p->AttackMax, serializer);
        FP.Serialize(&p->Radius, serializer);
        FP.Serialize(&p->Speed, serializer);
        FP.Serialize(&p->SpeedIncrement, serializer);
        FixedArray.Serialize(p->SpeedMultiplierArray, serializer, Statics.SerializeFP);
        FP.Serialize(&p->SpeedPotential, serializer);
        FPVector2.Serialize(&p->Direction, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleProjectileSpawnerQComponent : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QBoolean HasSpawned;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2273;
        hash = hash * 31 + HasSpawned.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleProjectileSpawnerQComponent*)ptr;
        QBoolean.Serialize(&p->HasSpawned, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BattleSoulWallQComponent : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public BattleTeamNumber Team;
    [FieldOffset(4)]
    public BattleSoulWallRow Row;
    [FieldOffset(12)]
    public Int32 WallNumber;
    [FieldOffset(0)]
    public BattleEmotionState Emotion;
    [FieldOffset(24)]
    public FPVector2 Normal;
    [FieldOffset(16)]
    public FP CollisionMinOffset;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9463;
        hash = hash * 31 + (Int32)Team;
        hash = hash * 31 + (Int32)Row;
        hash = hash * 31 + WallNumber.GetHashCode();
        hash = hash * 31 + (Int32)Emotion;
        hash = hash * 31 + Normal.GetHashCode();
        hash = hash * 31 + CollisionMinOffset.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BattleSoulWallQComponent*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Emotion);
        serializer.Stream.Serialize((Int32*)&p->Row);
        serializer.Stream.Serialize((Int32*)&p->Team);
        serializer.Stream.Serialize(&p->WallNumber);
        FP.Serialize(&p->CollisionMinOffset, serializer);
        FPVector2.Serialize(&p->Normal, serializer);
    }
  }
  public unsafe partial interface ISignalBattleOnProjectileHitSoulWall : ISignal {
    void BattleOnProjectileHitSoulWall(Frame f, BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattleSoulWallQComponent* soulWall, EntityRef soulWallEntity);
  }
  public unsafe partial interface ISignalBattleOnProjectileHitArenaBorder : ISignal {
    void BattleOnProjectileHitArenaBorder(Frame f, BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattleArenaBorderQComponent* arenaBorder, EntityRef arenaBorderEntity);
  }
  public unsafe partial interface ISignalBattleOnProjectileHitPlayerCharacter : ISignal {
    void BattleOnProjectileHitPlayerCharacter(Frame f, BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattlePlayerHitboxQComponent* playerHitbox, EntityRef playerHitboxEntity);
  }
  public unsafe partial interface ISignalBattleOnProjectileHitPlayerShield : ISignal {
    void BattleOnProjectileHitPlayerShield(Frame f, BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattlePlayerHitboxQComponent* playerHitbox, EntityRef playerHitboxEntity);
  }
  public unsafe partial interface ISignalBattleOnProjectileHitGoal : ISignal {
    void BattleOnProjectileHitGoal(Frame f, BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattleGoalQComponent* goal, EntityRef goalEntity);
  }
  public unsafe partial interface ISignalBattleOnDiamondHitPlayer : ISignal {
    void BattleOnDiamondHitPlayer(Frame f, BattleDiamondDataQComponent* diamond, EntityRef diamondEntity, BattlePlayerHitboxQComponent* playerHitbox, EntityRef playerEntity);
  }
  public unsafe partial interface ISignalBattleOnGameOver : ISignal {
    void BattleOnGameOver(Frame f, BattleTeamNumber winningTeam, BattleProjectileQComponent* projectile, EntityRef projectileEntity);
  }
  public static unsafe partial class Constants {
    public const Int32 BATTLE_PLAYER_SLOT_COUNT = 4;
    public const Int32 BATTLE_PLAYER_CHARACTER_COUNT = 3;
    public const Int32 BATTLE_PLAYER_CHARACTER_TOTAL_COUNT = 12;
    public const Int32 BATTLE_EMOTION_STATE_COUNT = 5;
  }
  public unsafe partial class Frame {
    private ISignalBattleOnProjectileHitSoulWall[] _ISignalBattleOnProjectileHitSoulWallSystems;
    private ISignalBattleOnProjectileHitArenaBorder[] _ISignalBattleOnProjectileHitArenaBorderSystems;
    private ISignalBattleOnProjectileHitPlayerCharacter[] _ISignalBattleOnProjectileHitPlayerCharacterSystems;
    private ISignalBattleOnProjectileHitPlayerShield[] _ISignalBattleOnProjectileHitPlayerShieldSystems;
    private ISignalBattleOnProjectileHitGoal[] _ISignalBattleOnProjectileHitGoalSystems;
    private ISignalBattleOnDiamondHitPlayer[] _ISignalBattleOnDiamondHitPlayerSystems;
    private ISignalBattleOnGameOver[] _ISignalBattleOnGameOverSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ISignalBattleOnProjectileHitSoulWallSystems = BuildSignalsArray<ISignalBattleOnProjectileHitSoulWall>();
      _ISignalBattleOnProjectileHitArenaBorderSystems = BuildSignalsArray<ISignalBattleOnProjectileHitArenaBorder>();
      _ISignalBattleOnProjectileHitPlayerCharacterSystems = BuildSignalsArray<ISignalBattleOnProjectileHitPlayerCharacter>();
      _ISignalBattleOnProjectileHitPlayerShieldSystems = BuildSignalsArray<ISignalBattleOnProjectileHitPlayerShield>();
      _ISignalBattleOnProjectileHitGoalSystems = BuildSignalsArray<ISignalBattleOnProjectileHitGoal>();
      _ISignalBattleOnDiamondHitPlayerSystems = BuildSignalsArray<ISignalBattleOnDiamondHitPlayer>();
      _ISignalBattleOnGameOverSystems = BuildSignalsArray<ISignalBattleOnGameOver>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.BattleArenaBorderQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleArenaBorderQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleCollisionTriggerQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleCollisionTriggerQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleDiamondCounterQSingleton>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleDiamondCounterQSingleton>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleDiamondDataQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleDiamondDataQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleGameSessionQSingleton>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleGameSessionQSingleton>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleGoalQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleGoalQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattlePlayerDataQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattlePlayerDataQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattlePlayerDataTemplateQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattlePlayerDataTemplateQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattlePlayerHitboxQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattlePlayerHitboxQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattlePlayerManagerDataQSingleton>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattlePlayerManagerDataQSingleton>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleProjectileQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleProjectileQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleProjectileSpawnerQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleProjectileSpawnerQComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BattleSoulWallQComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BattleSoulWallQComponent>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->MovementInput = input.MovementInput;
      i->MovementDirectionIsNormalized = input.MovementDirectionIsNormalized;
      i->MovementPosition = input.MovementPosition;
      i->MovementDirection = input.MovementDirection;
      i->RotationInput = i->RotationInput.Update(this.Number, input.RotationInput);
      i->RotationValue = input.RotationValue;
      i->PlayerCharacterNumber = input.PlayerCharacterNumber;
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      if (Context.Physics2D != null && Physics2D.Map != null && Physics2D.Map.Guid.IsDynamic) Physics2D.ResetMap();
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      if (Context.Physics3D != null && Physics3D.Map != null && Physics3D.Map.Guid.IsDynamic) Physics3D.ResetMap();
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
      public void BattleOnProjectileHitSoulWall(BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattleSoulWallQComponent* soulWall, EntityRef soulWallEntity) {
        var array = _f._ISignalBattleOnProjectileHitSoulWallSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.BattleOnProjectileHitSoulWall(_f, projectile, projectileEntity, soulWall, soulWallEntity);
          }
        }
      }
      public void BattleOnProjectileHitArenaBorder(BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattleArenaBorderQComponent* arenaBorder, EntityRef arenaBorderEntity) {
        var array = _f._ISignalBattleOnProjectileHitArenaBorderSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.BattleOnProjectileHitArenaBorder(_f, projectile, projectileEntity, arenaBorder, arenaBorderEntity);
          }
        }
      }
      public void BattleOnProjectileHitPlayerCharacter(BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattlePlayerHitboxQComponent* playerHitbox, EntityRef playerHitboxEntity) {
        var array = _f._ISignalBattleOnProjectileHitPlayerCharacterSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.BattleOnProjectileHitPlayerCharacter(_f, projectile, projectileEntity, playerHitbox, playerHitboxEntity);
          }
        }
      }
      public void BattleOnProjectileHitPlayerShield(BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattlePlayerHitboxQComponent* playerHitbox, EntityRef playerHitboxEntity) {
        var array = _f._ISignalBattleOnProjectileHitPlayerShieldSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.BattleOnProjectileHitPlayerShield(_f, projectile, projectileEntity, playerHitbox, playerHitboxEntity);
          }
        }
      }
      public void BattleOnProjectileHitGoal(BattleProjectileQComponent* projectile, EntityRef projectileEntity, BattleGoalQComponent* goal, EntityRef goalEntity) {
        var array = _f._ISignalBattleOnProjectileHitGoalSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.BattleOnProjectileHitGoal(_f, projectile, projectileEntity, goal, goalEntity);
          }
        }
      }
      public void BattleOnDiamondHitPlayer(BattleDiamondDataQComponent* diamond, EntityRef diamondEntity, BattlePlayerHitboxQComponent* playerHitbox, EntityRef playerEntity) {
        var array = _f._ISignalBattleOnDiamondHitPlayerSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.BattleOnDiamondHitPlayer(_f, diamond, diamondEntity, playerHitbox, playerEntity);
          }
        }
      }
      public void BattleOnGameOver(BattleTeamNumber winningTeam, BattleProjectileQComponent* projectile, EntityRef projectileEntity) {
        var array = _f._ISignalBattleOnGameOverSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.BattleOnGameOver(_f, winningTeam, projectile, projectileEntity);
          }
        }
      }
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeBattlePlayerHitboxColliderTemplate;
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeBattlePlayerPlayState;
    public static FrameSerializer.Delegate SerializePlayerRef;
    public static FrameSerializer.Delegate SerializeBattleProjectileCollisionFlags;
    public static FrameSerializer.Delegate SerializeFP;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeBattlePlayerHitboxColliderTemplate = Quantum.BattlePlayerHitboxColliderTemplate.Serialize;
      SerializeEntityRef = EntityRef.Serialize;
      SerializeBattlePlayerPlayState = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializePlayerRef = PlayerRef.Serialize;
      SerializeBattleProjectileCollisionFlags = (v, s) => {{ s.Stream.Serialize((Byte*)v); }};
      SerializeFP = FP.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleArenaBorderQComponent), Quantum.BattleArenaBorderQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleCollisionTriggerQComponent), Quantum.BattleCollisionTriggerQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleCollisionTriggerType), 4);
      typeRegistry.Register(typeof(Quantum.BattleDiamondCounterQSingleton), Quantum.BattleDiamondCounterQSingleton.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleDiamondDataQComponent), Quantum.BattleDiamondDataQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleEmotionState), 4);
      typeRegistry.Register(typeof(Quantum.BattleGameSessionQSingleton), Quantum.BattleGameSessionQSingleton.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleGameState), 4);
      typeRegistry.Register(typeof(Quantum.BattleGoalQComponent), Quantum.BattleGoalQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleGridPosition), Quantum.BattleGridPosition.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleLightrayColor), 4);
      typeRegistry.Register(typeof(Quantum.BattleLightraySize), 4);
      typeRegistry.Register(typeof(Quantum.BattleMovementInputType), 4);
      typeRegistry.Register(typeof(Quantum.BattlePlayerCollisionType), 4);
      typeRegistry.Register(typeof(Quantum.BattlePlayerDataQComponent), Quantum.BattlePlayerDataQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattlePlayerDataTemplateQComponent), Quantum.BattlePlayerDataTemplateQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattlePlayerHitboxColliderTemplate), Quantum.BattlePlayerHitboxColliderTemplate.SIZE);
      typeRegistry.Register(typeof(Quantum.BattlePlayerHitboxQComponent), Quantum.BattlePlayerHitboxQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattlePlayerHitboxTemplate), Quantum.BattlePlayerHitboxTemplate.SIZE);
      typeRegistry.Register(typeof(Quantum.BattlePlayerHitboxType), 4);
      typeRegistry.Register(typeof(Quantum.BattlePlayerManagerDataQSingleton), Quantum.BattlePlayerManagerDataQSingleton.SIZE);
      typeRegistry.Register(typeof(Quantum.BattlePlayerPlayState), 4);
      typeRegistry.Register(typeof(Quantum.BattlePlayerSlot), 4);
      typeRegistry.Register(typeof(Quantum.BattlePlayerStats), Quantum.BattlePlayerStats.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleProjectileCollisionFlags), 1);
      typeRegistry.Register(typeof(Quantum.BattleProjectileQComponent), Quantum.BattleProjectileQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleProjectileSpawnerQComponent), Quantum.BattleProjectileSpawnerQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleSoulWallQComponent), Quantum.BattleSoulWallQComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleSoulWallRow), 4);
      typeRegistry.Register(typeof(Quantum.BattleSoulWallTemplate), Quantum.BattleSoulWallTemplate.SIZE);
      typeRegistry.Register(typeof(Quantum.BattleSoundFX), 4);
      typeRegistry.Register(typeof(Quantum.BattleTeamNumber), 4);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CallbackFlags), 4);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(FrameTimer), FrameTimer.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(IntVector2), IntVector2.SIZE);
      typeRegistry.Register(typeof(IntVector3), IntVector3.SIZE);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.QString512), Quantum.QString512.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(QueryOptions), 2);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 13)
        .AddBuiltInComponents()
        .Add<Quantum.BattleArenaBorderQComponent>(Quantum.BattleArenaBorderQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattleCollisionTriggerQComponent>(Quantum.BattleCollisionTriggerQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattleDiamondCounterQSingleton>(Quantum.BattleDiamondCounterQSingleton.Serialize, null, null, ComponentFlags.Singleton)
        .Add<Quantum.BattleDiamondDataQComponent>(Quantum.BattleDiamondDataQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattleGameSessionQSingleton>(Quantum.BattleGameSessionQSingleton.Serialize, null, null, ComponentFlags.Singleton)
        .Add<Quantum.BattleGoalQComponent>(Quantum.BattleGoalQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattlePlayerDataQComponent>(Quantum.BattlePlayerDataQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattlePlayerDataTemplateQComponent>(Quantum.BattlePlayerDataTemplateQComponent.Serialize, null, Quantum.BattlePlayerDataTemplateQComponent.OnRemoved, ComponentFlags.None)
        .Add<Quantum.BattlePlayerHitboxQComponent>(Quantum.BattlePlayerHitboxQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattlePlayerManagerDataQSingleton>(Quantum.BattlePlayerManagerDataQSingleton.Serialize, null, null, ComponentFlags.Singleton)
        .Add<Quantum.BattleProjectileQComponent>(Quantum.BattleProjectileQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattleProjectileSpawnerQComponent>(Quantum.BattleProjectileSpawnerQComponent.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BattleSoulWallQComponent>(Quantum.BattleSoulWallQComponent.Serialize, null, null, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleCollisionTriggerType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleEmotionState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleGameState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleLightrayColor>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleLightraySize>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleMovementInputType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattlePlayerCollisionType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattlePlayerHitboxType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattlePlayerPlayState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattlePlayerSlot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleProjectileCollisionFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleSoulWallRow>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleSoundFX>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BattleTeamNumber>();
      FramePrinter.EnsurePrimitiveNotStripped<CallbackFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.QString512>();
      FramePrinter.EnsurePrimitiveNotStripped<QueryOptions>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
