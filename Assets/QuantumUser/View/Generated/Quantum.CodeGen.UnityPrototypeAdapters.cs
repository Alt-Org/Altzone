// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes.Unity {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  public unsafe partial class PlayerDataPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.PlayerDataPrototype> {
    public PlayerRef PlayerRef;
    public Quantum.QEnum32<BattlePlayerSlot> Slot;
    public Quantum.QEnum32<BattleTeamNumber> TeamNumber;
    public Int32 CharacterId;
    public Int32 CharacterClass;
    public FP StatHp;
    public FP StatSpeed;
    public FP StatCharacterSize;
    public FP StatAttack;
    public FP StatDefence;
    public FPVector2 TargetPosition;
    public FP BaseRotation;
    public FP MovementRotation;
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.Unity.PlayerHitBoxLinkPrototype[] PlayerHitboxList = {};
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.Unity.PlayerHitBoxLinkPrototype[] ShieldHitboxList = {};
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.Unity.PlayerHitBoxLinkPrototype[] CharacterHitboxList = {};
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.PlayerDataPrototype prototype);
    public override Quantum.Prototypes.PlayerDataPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.PlayerDataPrototype();
      converter.Convert(this.PlayerRef, out result.PlayerRef);
      converter.Convert(this.Slot, out result.Slot);
      converter.Convert(this.TeamNumber, out result.TeamNumber);
      converter.Convert(this.CharacterId, out result.CharacterId);
      converter.Convert(this.CharacterClass, out result.CharacterClass);
      converter.Convert(this.StatHp, out result.StatHp);
      converter.Convert(this.StatSpeed, out result.StatSpeed);
      converter.Convert(this.StatCharacterSize, out result.StatCharacterSize);
      converter.Convert(this.StatAttack, out result.StatAttack);
      converter.Convert(this.StatDefence, out result.StatDefence);
      converter.Convert(this.TargetPosition, out result.TargetPosition);
      converter.Convert(this.BaseRotation, out result.BaseRotation);
      converter.Convert(this.MovementRotation, out result.MovementRotation);
      converter.Convert(this.PlayerHitboxList, out result.PlayerHitboxList);
      converter.Convert(this.ShieldHitboxList, out result.ShieldHitboxList);
      converter.Convert(this.CharacterHitboxList, out result.CharacterHitboxList);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class PlayerHitBoxPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.PlayerHitBoxPrototype> {
    public Quantum.QuantumEntityPrototype PlayerEntity;
    public Quantum.QEnum32<PlayerHitboxType> HitBoxType;
    public Quantum.QEnum32<PlayerCollisionType> CollisionType;
    public FPVector2 Normal;
    public FP CollisionMinOffset;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.PlayerHitBoxPrototype prototype);
    public override Quantum.Prototypes.PlayerHitBoxPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.PlayerHitBoxPrototype();
      converter.Convert(this.PlayerEntity, out result.PlayerEntity);
      converter.Convert(this.HitBoxType, out result.HitBoxType);
      converter.Convert(this.CollisionType, out result.CollisionType);
      converter.Convert(this.Normal, out result.Normal);
      converter.Convert(this.CollisionMinOffset, out result.CollisionMinOffset);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class PlayerHitBoxLinkPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.PlayerHitBoxLinkPrototype> {
    public Quantum.QuantumEntityPrototype Entity;
    public FPVector2 Position;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.PlayerHitBoxLinkPrototype prototype);
    public override Quantum.Prototypes.PlayerHitBoxLinkPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.PlayerHitBoxLinkPrototype();
      converter.Convert(this.Entity, out result.Entity);
      converter.Convert(this.Position, out result.Position);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class PlayerManagerDataPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.PlayerManagerDataPrototype> {
    [ArrayLengthAttribute(4)]
    public Quantum.QEnum32<PlayerPlayState>[] PlayStates = new Quantum.QEnum32<PlayerPlayState>[4];
    [ArrayLengthAttribute(4)]
    public PlayerRef[] PlayerRefs = new PlayerRef[4];
    [ArrayLengthAttribute(4)]
    public Quantum.QuantumEntityPrototype[] SelectedCharacters = new Quantum.QuantumEntityPrototype[4];
    [ArrayLengthAttribute(12)]
    public Quantum.QuantumEntityPrototype[] AllCharacters = new Quantum.QuantumEntityPrototype[12];
    [ArrayLengthAttribute(4)]
    public Int32[] SelectedCharacterNumbers = new Int32[4];
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.PlayerManagerDataPrototype prototype);
    public override Quantum.Prototypes.PlayerManagerDataPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.PlayerManagerDataPrototype();
      converter.Convert(this.PlayStates, out result.PlayStates);
      converter.Convert(this.PlayerRefs, out result.PlayerRefs);
      converter.Convert(this.SelectedCharacters, out result.SelectedCharacters);
      converter.Convert(this.AllCharacters, out result.AllCharacters);
      converter.Convert(this.SelectedCharacterNumbers, out result.SelectedCharacterNumbers);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class SoulWallPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.SoulWallPrototype> {
    public Quantum.QuantumEntityPrototype ChildEntity;
    public FPVector2 Normal;
    public FP CollisionMinOffset;
    public Int32 Layer;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.SoulWallPrototype prototype);
    public override Quantum.Prototypes.SoulWallPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.SoulWallPrototype();
      converter.Convert(this.ChildEntity, out result.ChildEntity);
      converter.Convert(this.Normal, out result.Normal);
      converter.Convert(this.CollisionMinOffset, out result.CollisionMinOffset);
      converter.Convert(this.Layer, out result.Layer);
      ConvertUser(converter, ref result);
      return result;
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
